
Lab5_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007108  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007218  08007218  00017218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007624  08007624  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007624  08007624  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007624  08007624  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800762c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001f0  0800781c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800781c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010946  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fe  00000000  00000000  00030b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  000344a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a16f  00000000  00000000  000352b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001330c  00000000  00000000  0004f427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee15  00000000  00000000  00062733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f80  00000000  00000000  000f1598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007200 	.word	0x08007200

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08007200 	.word	0x08007200

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <adc_reading_init>:
#include "adc_reading.h"

uint32_t ADC_value = 0;

void adc_reading_init()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <adc_reading_init+0x10>)
 8000b2e:	f000 fe9f 	bl	8001870 <HAL_ADC_Start>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000214 	.word	0x20000214

08000b3c <read_sensor_value>:

void read_sensor_value()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	ADC_value = HAL_ADC_GetValue(&hadc1);
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <read_sensor_value+0x14>)
 8000b42:	f000 ff43 	bl	80019cc <HAL_ADC_GetValue>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a02      	ldr	r2, [pc, #8]	; (8000b54 <read_sensor_value+0x18>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000214 	.word	0x20000214
 8000b54:	2000020c 	.word	0x2000020c

08000b58 <transmit_sensor_value>:

void transmit_sensor_value()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4821      	ldr	r0, [pc, #132]	; (8000be8 <transmit_sensor_value+0x90>)
 8000b62:	f001 fd01 	bl	8002568 <HAL_GPIO_TogglePin>
	float sensor_voltage = 1.0 * (ADC_value - GND_VALUE) /
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <transmit_sensor_value+0x94>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fc3a 	bl	80003e4 <__aeabi_ui2d>
 8000b70:	a31b      	add	r3, pc, #108	; (adr r3, 8000be0 <transmit_sensor_value+0x88>)
 8000b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b76:	f7ff fdd9 	bl	800072c <__aeabi_ddiv>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4610      	mov	r0, r2
 8000b80:	4619      	mov	r1, r3
			(VCC_VALUE - GND_VALUE) * VCC_VOLTAGE;
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <transmit_sensor_value+0x98>)
 8000b88:	f7ff fca6 	bl	80004d8 <__aeabi_dmul>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
	float sensor_voltage = 1.0 * (ADC_value - GND_VALUE) /
 8000b90:	4610      	mov	r0, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	f7ff ff78 	bl	8000a88 <__aeabi_d2f>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	613b      	str	r3, [r7, #16]
	char str[10];
	uint8_t str_len = sprintf(str, "%4.3f\r\n", sensor_voltage);
 8000b9c:	6938      	ldr	r0, [r7, #16]
 8000b9e:	f7ff fc43 	bl	8000428 <__aeabi_f2d>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	1d38      	adds	r0, r7, #4
 8000ba8:	4912      	ldr	r1, [pc, #72]	; (8000bf4 <transmit_sensor_value+0x9c>)
 8000baa:	f004 f8af 	bl	8004d0c <siprintf>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < str_len; ++i)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	75fb      	strb	r3, [r7, #23]
 8000bb6:	e00a      	b.n	8000bce <transmit_sensor_value+0x76>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)(&str[i]), 1, 50);
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	1d3a      	adds	r2, r7, #4
 8000bbc:	18d1      	adds	r1, r2, r3
 8000bbe:	2332      	movs	r3, #50	; 0x32
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <transmit_sensor_value+0xa0>)
 8000bc4:	f002 fde8 	bl	8003798 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < str_len; ++i)
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	75fb      	strb	r3, [r7, #23]
 8000bce:	7dfa      	ldrb	r2, [r7, #23]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3f0      	bcc.n	8000bb8 <transmit_sensor_value+0x60>
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	00000000 	.word	0x00000000
 8000be4:	40affe00 	.word	0x40affe00
 8000be8:	40010800 	.word	0x40010800
 8000bec:	2000020c 	.word	0x2000020c
 8000bf0:	40140000 	.word	0x40140000
 8000bf4:	08007218 	.word	0x08007218
 8000bf8:	2000028c 	.word	0x2000028c

08000bfc <command_parser_init>:

uint8_t sensor_reading_flag = 0;
uint8_t user_accept_flag = 0;

void command_parser_init()
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	parserState = SENSOR_READING_IDLE;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <command_parser_init+0x14>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000

08000c14 <command_parser_fsm>:

void command_parser_fsm()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	switch (parserState)
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <command_parser_fsm+0xf8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d869      	bhi.n	8000cf4 <command_parser_fsm+0xe0>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <command_parser_fsm+0x14>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c55 	.word	0x08000c55
 8000c30:	08000c99 	.word	0x08000c99
 8000c34:	08000cb1 	.word	0x08000cb1
	{
	case SENSOR_READING_IDLE:
		if (get_last_character() == '!')
 8000c38:	f000 fc74 	bl	8001524 <get_last_character>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b21      	cmp	r3, #33	; 0x21
 8000c40:	d15a      	bne.n	8000cf8 <command_parser_fsm+0xe4>
		{
			parserState = SENSOR_READING_PARSE;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <command_parser_fsm+0xf8>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
			read_sensor_value();
 8000c48:	f7ff ff78 	bl	8000b3c <read_sensor_value>
			command_index = 1;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <command_parser_fsm+0xfc>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c52:	e051      	b.n	8000cf8 <command_parser_fsm+0xe4>
	case SENSOR_READING_PARSE:
		if (get_last_character() != sensor_reading_command[command_index])
 8000c54:	f000 fc66 	bl	8001524 <get_last_character>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <command_parser_fsm+0xfc>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <command_parser_fsm+0x100>)
 8000c64:	5c5b      	ldrb	r3, [r3, r1]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d003      	beq.n	8000c72 <command_parser_fsm+0x5e>
		{
			parserState = SENSOR_READING_IDLE;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <command_parser_fsm+0xf8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
			{
				sensor_reading_flag = 1;
				parserState = USER_ACCEPT_IDLE;
			}
		}
		break;
 8000c70:	e044      	b.n	8000cfc <command_parser_fsm+0xe8>
			++command_index;
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <command_parser_fsm+0xfc>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <command_parser_fsm+0xfc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
			if (command_index == sensor_reading_command_len)
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <command_parser_fsm+0xfc>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <command_parser_fsm+0x104>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d138      	bne.n	8000cfc <command_parser_fsm+0xe8>
				sensor_reading_flag = 1;
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <command_parser_fsm+0x108>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
				parserState = USER_ACCEPT_IDLE;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <command_parser_fsm+0xf8>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
		break;
 8000c96:	e031      	b.n	8000cfc <command_parser_fsm+0xe8>
	case USER_ACCEPT_IDLE:
		if (get_last_character() == '!')
 8000c98:	f000 fc44 	bl	8001524 <get_last_character>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b21      	cmp	r3, #33	; 0x21
 8000ca0:	d12e      	bne.n	8000d00 <command_parser_fsm+0xec>
		{
			parserState = USER_ACCEPT_PARSE;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <command_parser_fsm+0xf8>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	701a      	strb	r2, [r3, #0]
			command_index = 1;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <command_parser_fsm+0xfc>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cae:	e027      	b.n	8000d00 <command_parser_fsm+0xec>
	case USER_ACCEPT_PARSE:
		if (get_last_character() != user_accept_command[command_index])
 8000cb0:	f000 fc38 	bl	8001524 <get_last_character>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <command_parser_fsm+0xfc>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <command_parser_fsm+0x10c>)
 8000cc0:	5c5b      	ldrb	r3, [r3, r1]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d003      	beq.n	8000cce <command_parser_fsm+0xba>
		{
			parserState = USER_ACCEPT_IDLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <command_parser_fsm+0xf8>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	701a      	strb	r2, [r3, #0]
			{
				user_accept_flag = 1;
				parserState = SENSOR_READING_IDLE;
			}
		}
		break;
 8000ccc:	e01a      	b.n	8000d04 <command_parser_fsm+0xf0>
			++command_index;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <command_parser_fsm+0xfc>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <command_parser_fsm+0xfc>)
 8000cd8:	701a      	strb	r2, [r3, #0]
			if (command_index == user_accept_command_len)
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <command_parser_fsm+0xfc>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <command_parser_fsm+0x110>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d10e      	bne.n	8000d04 <command_parser_fsm+0xf0>
				user_accept_flag = 1;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <command_parser_fsm+0x114>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
				parserState = SENSOR_READING_IDLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <command_parser_fsm+0xf8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
		break;
 8000cf2:	e007      	b.n	8000d04 <command_parser_fsm+0xf0>
	default:
		break;
 8000cf4:	bf00      	nop
 8000cf6:	e006      	b.n	8000d06 <command_parser_fsm+0xf2>
		break;
 8000cf8:	bf00      	nop
 8000cfa:	e004      	b.n	8000d06 <command_parser_fsm+0xf2>
		break;
 8000cfc:	bf00      	nop
 8000cfe:	e002      	b.n	8000d06 <command_parser_fsm+0xf2>
		break;
 8000d00:	bf00      	nop
 8000d02:	e000      	b.n	8000d06 <command_parser_fsm+0xf2>
		break;
 8000d04:	bf00      	nop
	}
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000210 	.word	0x20000210
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000009 	.word	0x20000009
 8000d1c:	20000211 	.word	0x20000211
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000010 	.word	0x20000010
 8000d28:	20000212 	.word	0x20000212

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f000 fc64 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f820 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f000 f922 	bl	8000f80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d3c:	f000 f86c 	bl	8000e18 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d40:	f000 f8f4 	bl	8000f2c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d44:	f000 f8a6 	bl	8000e94 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_reading_init();
 8000d48:	f000 fbde 	bl	8001508 <uart_reading_init>
  command_parser_init();
 8000d4c:	f7ff ff56 	bl	8000bfc <command_parser_init>
  adc_reading_init();
 8000d50:	f7ff feea 	bl	8000b28 <adc_reading_init>
  timer_init();
 8000d54:	f000 fb34 	bl	80013c0 <timer_init>
  uart_communiation_init();
 8000d58:	f000 fb88 	bl	800146c <uart_communiation_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (buffer_flag == 1)
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <main+0x48>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d104      	bne.n	8000d6e <main+0x42>
	  {
		  command_parser_fsm();
 8000d64:	f7ff ff56 	bl	8000c14 <command_parser_fsm>
		  buffer_flag = 0;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <main+0x48>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communiation_fsm();
 8000d6e:	f000 fb89 	bl	8001484 <uart_communiation_fsm>
	  if (buffer_flag == 1)
 8000d72:	e7f3      	b.n	8000d5c <main+0x30>
 8000d74:	20000303 	.word	0x20000303

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d82:	2228      	movs	r2, #40	; 0x28
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fb58 	bl	800443c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2310      	movs	r3, #16
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fbed 	bl	800259c <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000dc8:	f000 f90c 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fe5a 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000df2:	f000 f8f7 	bl	8000fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df6:	2302      	movs	r3, #2
 8000df8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 ffdb 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e0c:	f000 f8ea 	bl	8000fe4 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	; 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <MX_ADC1_Init+0x78>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e56:	f000 fc33 	bl	80016c0 <HAL_ADC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e60:	f000 f8c0 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_ADC1_Init+0x74>)
 8000e76:	f000 fe87 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e80:	f000 f8b0 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000214 	.word	0x20000214
 8000e90:	40012400 	.word	0x40012400

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eba:	2209      	movs	r2, #9
 8000ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eda:	f002 f825 	bl	8002f28 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 f87e 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ef6:	f002 f9bb 	bl	8003270 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f870 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000f12:	f002 fb87 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f862 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000244 	.word	0x20000244

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f002 fbc8 	bl	80036f8 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f839 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000028c 	.word	0x2000028c
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_GPIO_Init+0x5c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2120      	movs	r1, #32
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_GPIO_Init+0x60>)
 8000fb2:	f001 fac1 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_TEST_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0x60>)
 8000fce:	f001 f937 	bl	8002240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_MspInit+0x40>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_MspInit+0x40>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_MspInit+0x40>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_MspInit+0x40>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_MspInit+0x40>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_MspInit+0x40>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_ADC_MspInit+0x7c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d129      	bne.n	80010a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001088:	2303      	movs	r3, #3
 800108a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_ADC_MspInit+0x84>)
 8001094:	f001 f8d4 	bl	8002240 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2012      	movs	r0, #18
 800109e:	f000 ffe6 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f000 ffff 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40012400 	.word	0x40012400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d113      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201c      	movs	r0, #28
 80010ec:	f000 ffbf 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 ffd8 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_UART_MspInit+0x98>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d137      	bne.n	8001194 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_UART_MspInit+0x9c>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_UART_MspInit+0x9c>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	61d3      	str	r3, [r2, #28]
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0x9c>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x9c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x9c>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_UART_MspInit+0x9c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001154:	2304      	movs	r3, #4
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	480f      	ldr	r0, [pc, #60]	; (80011a4 <HAL_UART_MspInit+0xa0>)
 8001168:	f001 f86a 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800116c:	2308      	movs	r3, #8
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <HAL_UART_MspInit+0xa0>)
 8001180:	f001 f85e 	bl	8002240 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2026      	movs	r0, #38	; 0x26
 800118a:	f000 ff70 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800118e:	2026      	movs	r0, #38	; 0x26
 8001190:	f000 ff89 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40004400 	.word	0x40004400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010800 	.word	0x40010800

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f000 fa4b 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <ADC1_2_IRQHandler+0x10>)
 80011fe:	f000 fbf1 	bl	80019e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000214 	.word	0x20000214

0800120c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <TIM2_IRQHandler+0x10>)
 8001212:	f001 ff25 	bl	8003060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000244 	.word	0x20000244

08001220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <USART2_IRQHandler+0x10>)
 8001226:	f002 fb5f 	bl	80038e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000028c 	.word	0x2000028c

08001234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <_kill>:

int _kill(int pid, int sig)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800124c:	f003 f8cc 	bl	80043e8 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	2216      	movs	r2, #22
 8001254:	601a      	str	r2, [r3, #0]
  return -1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_exit>:

void _exit (int status)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800126a:	f04f 31ff 	mov.w	r1, #4294967295
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffe7 	bl	8001242 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001274:	e7fe      	b.n	8001274 <_exit+0x12>

08001276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e00a      	b.n	800129e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001288:	f3af 8000 	nop.w
 800128c:	4601      	mov	r1, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbf0      	blt.n	8001288 <_read+0x12>
  }

  return len;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e009      	b.n	80012d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	60ba      	str	r2, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbf1      	blt.n	80012c2 <_write+0x12>
  }
  return len;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_close>:

int _close(int file)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	605a      	str	r2, [r3, #4]
  return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <_isatty>:

int _isatty(int file)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f003 f836 	bl	80043e8 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002800 	.word	0x20002800
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200002d4 	.word	0x200002d4
 80013b0:	20000318 	.word	0x20000318

080013b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <timer_init>:

int sensor_timer_flag = 0;
int sensor_timer_counter = 0;

void timer_init()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <timer_init+0x10>)
 80013c6:	f001 fdff 	bl	8002fc8 <HAL_TIM_Base_Start_IT>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000244 	.word	0x20000244

080013d4 <set_sensor_timer>:

void set_sensor_timer(int duration)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	sensor_timer_counter = duration / TIME_UNIT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <set_sensor_timer+0x2c>)
 80013e0:	fb82 1203 	smull	r1, r2, r2, r3
 80013e4:	1092      	asrs	r2, r2, #2
 80013e6:	17db      	asrs	r3, r3, #31
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <set_sensor_timer+0x30>)
 80013ec:	6013      	str	r3, [r2, #0]
	sensor_timer_flag = 0;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <set_sensor_timer+0x34>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	66666667 	.word	0x66666667
 8001404:	200002dc 	.word	0x200002dc
 8001408:	200002d8 	.word	0x200002d8

0800140c <is_sensor_timer_flagged>:

int is_sensor_timer_flagged()
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	return sensor_timer_flag;
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <is_sensor_timer_flagged+0x10>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	200002d8 	.word	0x200002d8

08001420 <sensor_timer_run>:

void sensor_timer_run()
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	--sensor_timer_counter;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <sensor_timer_run+0x24>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a06      	ldr	r2, [pc, #24]	; (8001444 <sensor_timer_run+0x24>)
 800142c:	6013      	str	r3, [r2, #0]
	if (sensor_timer_counter <= 0)
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <sensor_timer_run+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dc02      	bgt.n	800143c <sensor_timer_run+0x1c>
	{
		sensor_timer_flag = 1;
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <sensor_timer_run+0x28>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
	}
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	200002dc 	.word	0x200002dc
 8001448:	200002d8 	.word	0x200002d8

0800144c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d101      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		sensor_timer_run();
 800145e:	f7ff ffdf 	bl	8001420 <sensor_timer_run>
	}
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <uart_communiation_init>:
#define USER_ACCEPT_TIMEOUT 3000

UARTState uartState = IDLE;

void uart_communiation_init()
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	uartState = IDLE;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <uart_communiation_init+0x14>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200002e0 	.word	0x200002e0

08001484 <uart_communiation_fsm>:

void uart_communiation_fsm()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	switch (uartState)
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <uart_communiation_fsm+0x78>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d01b      	beq.n	80014c8 <uart_communiation_fsm+0x44>
 8001490:	2b02      	cmp	r3, #2
 8001492:	dc2c      	bgt.n	80014ee <uart_communiation_fsm+0x6a>
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <uart_communiation_fsm+0x1a>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d00b      	beq.n	80014b4 <uart_communiation_fsm+0x30>
		{
			uartState = SENSOR_DISPLAY;
		}
		break;
	default:
		break;
 800149c:	e027      	b.n	80014ee <uart_communiation_fsm+0x6a>
		if (sensor_reading_flag == 1)
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <uart_communiation_fsm+0x7c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d125      	bne.n	80014f2 <uart_communiation_fsm+0x6e>
			uartState = SENSOR_DISPLAY;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <uart_communiation_fsm+0x78>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
			sensor_reading_flag = 0;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <uart_communiation_fsm+0x7c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
		break;
 80014b2:	e01e      	b.n	80014f2 <uart_communiation_fsm+0x6e>
		set_sensor_timer(USER_ACCEPT_TIMEOUT);
 80014b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014b8:	f7ff ff8c 	bl	80013d4 <set_sensor_timer>
		transmit_sensor_value();
 80014bc:	f7ff fb4c 	bl	8000b58 <transmit_sensor_value>
		uartState = USER_ACCEPT;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <uart_communiation_fsm+0x78>)
 80014c2:	2202      	movs	r2, #2
 80014c4:	701a      	strb	r2, [r3, #0]
		break;
 80014c6:	e017      	b.n	80014f8 <uart_communiation_fsm+0x74>
		if (user_accept_flag == 1)
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <uart_communiation_fsm+0x80>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <uart_communiation_fsm+0x58>
			uartState = IDLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <uart_communiation_fsm+0x78>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			user_accept_flag = 0;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <uart_communiation_fsm+0x80>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
		if (is_sensor_timer_flagged())
 80014dc:	f7ff ff96 	bl	800140c <is_sensor_timer_flagged>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <uart_communiation_fsm+0x72>
			uartState = SENSOR_DISPLAY;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <uart_communiation_fsm+0x78>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
		break;
 80014ec:	e003      	b.n	80014f6 <uart_communiation_fsm+0x72>
		break;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <uart_communiation_fsm+0x74>
		break;
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <uart_communiation_fsm+0x74>
		break;
 80014f6:	bf00      	nop
	}
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002e0 	.word	0x200002e0
 8001500:	20000211 	.word	0x20000211
 8001504:	20000212 	.word	0x20000212

08001508 <uart_reading_init>:
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;

void uart_reading_init()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	4903      	ldr	r1, [pc, #12]	; (800151c <uart_reading_init+0x14>)
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <uart_reading_init+0x18>)
 8001512:	f002 f9c4 	bl	800389e <HAL_UART_Receive_IT>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002e1 	.word	0x200002e1
 8001520:	2000028c 	.word	0x2000028c

08001524 <get_last_character>:

uint8_t get_last_character()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return temp;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <get_last_character+0x10>)
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	200002e1 	.word	0x200002e1

08001538 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_UART_RxCpltCallback+0x60>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d121      	bne.n	800158e <HAL_UART_RxCpltCallback+0x56>
	{
		// Loop-back communication to observe system behavior conveniently
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800154a:	2332      	movs	r3, #50	; 0x32
 800154c:	2201      	movs	r2, #1
 800154e:	4913      	ldr	r1, [pc, #76]	; (800159c <HAL_UART_RxCpltCallback+0x64>)
 8001550:	4813      	ldr	r0, [pc, #76]	; (80015a0 <HAL_UART_RxCpltCallback+0x68>)
 8001552:	f002 f921 	bl	8003798 <HAL_UART_Transmit>
		buffer[index_buffer] = temp;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_UART_RxCpltCallback+0x6c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_UART_RxCpltCallback+0x64>)
 800155e:	7819      	ldrb	r1, [r3, #0]
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_UART_RxCpltCallback+0x70>)
 8001562:	5499      	strb	r1, [r3, r2]
		++index_buffer;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_UART_RxCpltCallback+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_UART_RxCpltCallback+0x6c>)
 800156e:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE)
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_UART_RxCpltCallback+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b1e      	cmp	r3, #30
 8001576:	d102      	bne.n	800157e <HAL_UART_RxCpltCallback+0x46>
		{
			index_buffer = 0;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_UART_RxCpltCallback+0x6c>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
		}
		buffer_flag = 1;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_UART_RxCpltCallback+0x74>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <HAL_UART_RxCpltCallback+0x64>)
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_UART_RxCpltCallback+0x68>)
 800158a:	f002 f988 	bl	800389e <HAL_UART_Receive_IT>
	}
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40004400 	.word	0x40004400
 800159c:	200002e1 	.word	0x200002e1
 80015a0:	2000028c 	.word	0x2000028c
 80015a4:	20000302 	.word	0x20000302
 80015a8:	200002e4 	.word	0x200002e4
 80015ac:	20000303 	.word	0x20000303

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff ff00 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b6:	490c      	ldr	r1, [pc, #48]	; (80015e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015cc:	4c09      	ldr	r4, [pc, #36]	; (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f002 ff0b 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fba5 	bl	8000d2c <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80015ec:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 80015f0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80015f4:	20000318 	.word	0x20000318

080015f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <CAN1_RX1_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 fd23 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fcea 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fd3b 	bl	80020c2 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 fd03 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000014 	.word	0x20000014
 8001680:	2000001c 	.word	0x2000001c
 8001684:	20000018 	.word	0x20000018

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x1c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x20>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_IncTick+0x20>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	2000001c 	.word	0x2000001c
 80016a8:	20000304 	.word	0x20000304

080016ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_GetTick+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000304 	.word	0x20000304

080016c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0be      	b.n	8001860 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fc98 	bl	8001034 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fb91 	bl	8001e2c <ADC_ConversionStop_Disable>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8099 	bne.w	800184e <HAL_ADC_Init+0x18e>
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 8095 	bne.w	800184e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800172c:	f023 0302 	bic.w	r3, r3, #2
 8001730:	f043 0202 	orr.w	r2, r3, #2
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001740:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7b1b      	ldrb	r3, [r3, #12]
 8001746:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001748:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4313      	orrs	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001758:	d003      	beq.n	8001762 <HAL_ADC_Init+0xa2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d102      	bne.n	8001768 <HAL_ADC_Init+0xa8>
 8001762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001766:	e000      	b.n	800176a <HAL_ADC_Init+0xaa>
 8001768:	2300      	movs	r3, #0
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7d1b      	ldrb	r3, [r3, #20]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d119      	bne.n	80017ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7b1b      	ldrb	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	3b01      	subs	r3, #1
 8001786:	035a      	lsls	r2, r3, #13
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e00b      	b.n	80017ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_ADC_Init+0x1a8>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_Init+0x126>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d104      	bne.n	80017f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	051b      	lsls	r3, r3, #20
 80017ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	430a      	orrs	r2, r1
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_ADC_Init+0x1ac>)
 800180c:	4013      	ands	r3, r2
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	429a      	cmp	r2, r3
 8001812:	d10b      	bne.n	800182c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800182a:	e018      	b.n	800185e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f023 0312 	bic.w	r3, r3, #18
 8001834:	f043 0210 	orr.w	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184c:	e007      	b.n	800185e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	f043 0210 	orr.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800185e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	ffe1f7fd 	.word	0xffe1f7fd
 800186c:	ff1f0efe 	.word	0xff1f0efe

08001870 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_ADC_Start+0x1a>
 8001886:	2302      	movs	r3, #2
 8001888:	e098      	b.n	80019bc <HAL_ADC_Start+0x14c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fa70 	bl	8001d78 <ADC_Enable>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 8087 	bne.w	80019b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a41      	ldr	r2, [pc, #260]	; (80019c4 <HAL_ADC_Start+0x154>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d105      	bne.n	80018ce <HAL_ADC_Start+0x5e>
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_ADC_Start+0x158>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d115      	bne.n	80018fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d026      	beq.n	8001936 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018f8:	e01d      	b.n	8001936 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_ADC_Start+0x158>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d004      	beq.n	800191a <HAL_ADC_Start+0xaa>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <HAL_ADC_Start+0x154>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10d      	bne.n	8001936 <HAL_ADC_Start+0xc6>
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_ADC_Start+0x158>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f023 0206 	bic.w	r2, r3, #6
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
 800194e:	e002      	b.n	8001956 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0202 	mvn.w	r2, #2
 8001966:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001972:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001976:	d113      	bne.n	80019a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_ADC_Start+0x154>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d105      	bne.n	800198e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_ADC_Start+0x158>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	e00c      	b.n	80019ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	e003      	b.n	80019ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40012800 	.word	0x40012800
 80019c8:	40012400 	.word	0x40012400

080019cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03e      	beq.n	8001a84 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d039      	beq.n	8001a84 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a36:	d11d      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d119      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0220 	bic.w	r2, r2, #32
 8001a4e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f874 	bl	8001b62 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f06f 0212 	mvn.w	r2, #18
 8001a82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d04d      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d048      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001aba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001abe:	d012      	beq.n	8001ae6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d125      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ad8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001adc:	d11d      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9c7 	bl	8001eae <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 020c 	mvn.w	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d012      	beq.n	8001b5a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f812 	bl	8001b74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0201 	mvn.w	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x20>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0dc      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1da>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d81c      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b05      	subs	r3, #5
 8001bca:	221f      	movs	r2, #31
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4019      	ands	r1, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	fa00 f203 	lsl.w	r2, r0, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	e03c      	b.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d81c      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b23      	subs	r3, #35	; 0x23
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4019      	ands	r1, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b23      	subs	r3, #35	; 0x23
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
 8001c32:	e01b      	b.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b41      	subs	r3, #65	; 0x41
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b41      	subs	r3, #65	; 0x41
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	d91c      	bls.n	8001cae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	2207      	movs	r2, #7
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4019      	ands	r1, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6898      	ldr	r0, [r3, #8]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b1e      	subs	r3, #30
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e019      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6919      	ldr	r1, [r3, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6898      	ldr	r0, [r3, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d132      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d125      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d126      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d11a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9a      	lsrs	r2, r3, #18
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x1b2>
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40012400 	.word	0x40012400
 8001d70:	20000014 	.word	0x20000014
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d040      	beq.n	8001e18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <ADC_Enable+0xac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <ADC_Enable+0xb0>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	0c9b      	lsrs	r3, r3, #18
 8001db2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001db4:	e002      	b.n	8001dbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dc2:	f7ff fc73 	bl	80016ac <HAL_GetTick>
 8001dc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dc8:	e01f      	b.n	8001e0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dca:	f7ff fc6f 	bl	80016ac <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d918      	bls.n	8001e0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d011      	beq.n	8001e0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d1d8      	bne.n	8001dca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000014 	.word	0x20000014
 8001e28:	431bde83 	.word	0x431bde83

08001e2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d12e      	bne.n	8001ea4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e56:	f7ff fc29 	bl	80016ac <HAL_GetTick>
 8001e5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e5c:	e01b      	b.n	8001e96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e5e:	f7ff fc25 	bl	80016ac <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d914      	bls.n	8001e96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10d      	bne.n	8001e96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f043 0210 	orr.w	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d0dc      	beq.n	8001e5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <__NVIC_EnableIRQ+0x34>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff90 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff2d 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff42 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff90 	bl	8001fb0 <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5f 	bl	8001f5c <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff35 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d008      	beq.n	8002104 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e020      	b.n	8002146 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 020e 	bic.w	r2, r2, #14
 8002112:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d005      	beq.n	8002174 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2204      	movs	r2, #4
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e051      	b.n	8002218 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020e 	bic.w	r2, r2, #14
 8002182:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <HAL_DMA_Abort_IT+0xd4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d029      	beq.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a21      	ldr	r2, [pc, #132]	; (8002228 <HAL_DMA_Abort_IT+0xd8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_Abort_IT+0x9e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_DMA_Abort_IT+0xdc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01a      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x98>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_DMA_Abort_IT+0xe0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d012      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x92>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_DMA_Abort_IT+0xe4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00a      	beq.n	80021dc <HAL_DMA_Abort_IT+0x8c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_DMA_Abort_IT+0xe8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d102      	bne.n	80021d6 <HAL_DMA_Abort_IT+0x86>
 80021d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d4:	e00e      	b.n	80021f4 <HAL_DMA_Abort_IT+0xa4>
 80021d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021da:	e00b      	b.n	80021f4 <HAL_DMA_Abort_IT+0xa4>
 80021dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e0:	e008      	b.n	80021f4 <HAL_DMA_Abort_IT+0xa4>
 80021e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e6:	e005      	b.n	80021f4 <HAL_DMA_Abort_IT+0xa4>
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	e002      	b.n	80021f4 <HAL_DMA_Abort_IT+0xa4>
 80021ee:	2310      	movs	r3, #16
 80021f0:	e000      	b.n	80021f4 <HAL_DMA_Abort_IT+0xa4>
 80021f2:	2301      	movs	r3, #1
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_DMA_Abort_IT+0xec>)
 80021f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4798      	blx	r3
    } 
  }
  return status;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40020008 	.word	0x40020008
 8002228:	4002001c 	.word	0x4002001c
 800222c:	40020030 	.word	0x40020030
 8002230:	40020044 	.word	0x40020044
 8002234:	40020058 	.word	0x40020058
 8002238:	4002006c 	.word	0x4002006c
 800223c:	40020000 	.word	0x40020000

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	e161      	b.n	8002518 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002254:	2201      	movs	r2, #1
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8150 	bne.w	8002512 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a97      	ldr	r2, [pc, #604]	; (80024d4 <HAL_GPIO_Init+0x294>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d05e      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 800227c:	4a95      	ldr	r2, [pc, #596]	; (80024d4 <HAL_GPIO_Init+0x294>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d875      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 8002282:	4a95      	ldr	r2, [pc, #596]	; (80024d8 <HAL_GPIO_Init+0x298>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d058      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002288:	4a93      	ldr	r2, [pc, #588]	; (80024d8 <HAL_GPIO_Init+0x298>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d86f      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800228e:	4a93      	ldr	r2, [pc, #588]	; (80024dc <HAL_GPIO_Init+0x29c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d052      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002294:	4a91      	ldr	r2, [pc, #580]	; (80024dc <HAL_GPIO_Init+0x29c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d869      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800229a:	4a91      	ldr	r2, [pc, #580]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04c      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022a0:	4a8f      	ldr	r2, [pc, #572]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d863      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022a6:	4a8f      	ldr	r2, [pc, #572]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d046      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022ac:	4a8d      	ldr	r2, [pc, #564]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d85d      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d82a      	bhi.n	800230c <HAL_GPIO_Init+0xcc>
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d859      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <HAL_GPIO_Init+0x80>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	0800233b 	.word	0x0800233b
 80022c4:	08002315 	.word	0x08002315
 80022c8:	08002327 	.word	0x08002327
 80022cc:	08002369 	.word	0x08002369
 80022d0:	0800236f 	.word	0x0800236f
 80022d4:	0800236f 	.word	0x0800236f
 80022d8:	0800236f 	.word	0x0800236f
 80022dc:	0800236f 	.word	0x0800236f
 80022e0:	0800236f 	.word	0x0800236f
 80022e4:	0800236f 	.word	0x0800236f
 80022e8:	0800236f 	.word	0x0800236f
 80022ec:	0800236f 	.word	0x0800236f
 80022f0:	0800236f 	.word	0x0800236f
 80022f4:	0800236f 	.word	0x0800236f
 80022f8:	0800236f 	.word	0x0800236f
 80022fc:	0800236f 	.word	0x0800236f
 8002300:	0800236f 	.word	0x0800236f
 8002304:	0800231d 	.word	0x0800231d
 8002308:	08002331 	.word	0x08002331
 800230c:	4a76      	ldr	r2, [pc, #472]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002312:	e02c      	b.n	800236e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e029      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	3304      	adds	r3, #4
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e024      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	3308      	adds	r3, #8
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e01f      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	330c      	adds	r3, #12
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e01a      	b.n	8002370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002342:	2304      	movs	r3, #4
 8002344:	623b      	str	r3, [r7, #32]
          break;
 8002346:	e013      	b.n	8002370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002350:	2308      	movs	r3, #8
 8002352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	611a      	str	r2, [r3, #16]
          break;
 800235a:	e009      	b.n	8002370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	615a      	str	r2, [r3, #20]
          break;
 8002366:	e003      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x130>
          break;
 800236e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2bff      	cmp	r3, #255	; 0xff
 8002374:	d801      	bhi.n	800237a <HAL_GPIO_Init+0x13a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	e001      	b.n	800237e <HAL_GPIO_Init+0x13e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d802      	bhi.n	800238c <HAL_GPIO_Init+0x14c>
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x152>
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3b08      	subs	r3, #8
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	210f      	movs	r1, #15
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a9 	beq.w	8002512 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a49      	ldr	r2, [pc, #292]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d8:	4a45      	ldr	r2, [pc, #276]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <HAL_GPIO_Init+0x2b4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00d      	beq.n	8002420 <HAL_GPIO_Init+0x1e0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d007      	beq.n	800241c <HAL_GPIO_Init+0x1dc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_GPIO_Init+0x1d8>
 8002414:	2302      	movs	r3, #2
 8002416:	e004      	b.n	8002422 <HAL_GPIO_Init+0x1e2>
 8002418:	2303      	movs	r3, #3
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x1e2>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_GPIO_Init+0x1e2>
 8002420:	2300      	movs	r3, #0
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	f002 0203 	and.w	r2, r2, #3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4093      	lsls	r3, r2
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002432:	492f      	ldr	r1, [pc, #188]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	492b      	ldr	r1, [pc, #172]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	4927      	ldr	r1, [pc, #156]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002464:	4013      	ands	r3, r2
 8002466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4921      	ldr	r1, [pc, #132]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	491d      	ldr	r1, [pc, #116]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 800248c:	4013      	ands	r3, r2
 800248e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4913      	ldr	r1, [pc, #76]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01f      	beq.n	8002504 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	490d      	ldr	r1, [pc, #52]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e01f      	b.n	8002512 <HAL_GPIO_Init+0x2d2>
 80024d2:	bf00      	nop
 80024d4:	10320000 	.word	0x10320000
 80024d8:	10310000 	.word	0x10310000
 80024dc:	10220000 	.word	0x10220000
 80024e0:	10210000 	.word	0x10210000
 80024e4:	10120000 	.word	0x10120000
 80024e8:	10110000 	.word	0x10110000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40010800 	.word	0x40010800
 80024f8:	40010c00 	.word	0x40010c00
 80024fc:	40011000 	.word	0x40011000
 8002500:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_GPIO_Init+0x2f4>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	43db      	mvns	r3, r3
 800250c:	4909      	ldr	r1, [pc, #36]	; (8002534 <HAL_GPIO_Init+0x2f4>)
 800250e:	4013      	ands	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	f47f ae96 	bne.w	8002254 <HAL_GPIO_Init+0x14>
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	372c      	adds	r7, #44	; 0x2c
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4013      	ands	r3, r2
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43d9      	mvns	r1, r3
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	400b      	ands	r3, r1
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
	...

0800259c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e272      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025bc:	4b92      	ldr	r3, [pc, #584]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
 80025d4:	4b8c      	ldr	r3, [pc, #560]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b89      	ldr	r3, [pc, #548]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x12c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d168      	bne.n	80026c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e24c      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x76>
 8002604:	4b80      	ldr	r3, [pc, #512]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e01d      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0xbc>
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a71      	ldr	r2, [pc, #452]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002658:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6a      	ldr	r2, [pc, #424]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff f818 	bl	80016ac <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff f814 	bl	80016ac <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e200      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0xe4>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff f804 	bl	80016ac <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff f800 	bl	80016ac <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1ec      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x10c>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d063      	beq.n	800279e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e2:	4b49      	ldr	r3, [pc, #292]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1c0      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4939      	ldr	r1, [pc, #228]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e03a      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_RCC_OscConfig+0x270>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe ffb9 	bl	80016ac <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe ffb5 	bl	80016ac <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1a1      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4927      	ldr	r1, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e015      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <HAL_RCC_OscConfig+0x270>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe ff98 	bl	80016ac <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe ff94 	bl	80016ac <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e180      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03a      	beq.n	8002820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_RCC_OscConfig+0x274>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7fe ff78 	bl	80016ac <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe ff74 	bl	80016ac <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e160      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f000 face 	bl	8002d80 <RCC_Delay>
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCC_OscConfig+0x274>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7fe ff5e 	bl	80016ac <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe ff5a 	bl	80016ac <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d908      	bls.n	8002814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e146      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	42420000 	.word	0x42420000
 8002810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e9      	bne.n	80027f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a6 	beq.w	800297a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b8b      	ldr	r3, [pc, #556]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a87      	ldr	r2, [pc, #540]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7e      	ldr	r2, [pc, #504]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7fe ff1b 	bl	80016ac <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe ff17 	bl	80016ac <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e103      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b75      	ldr	r3, [pc, #468]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x312>
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e02d      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028b6:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a66      	ldr	r2, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	e01c      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x356>
 80028d8:	4b61      	ldr	r3, [pc, #388]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e00b      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a5a      	ldr	r2, [pc, #360]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a57      	ldr	r2, [pc, #348]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7fe fecb 	bl	80016ac <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe fec7 	bl	80016ac <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0b1      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ee      	beq.n	800291a <HAL_RCC_OscConfig+0x37e>
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe feb5 	bl	80016ac <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe feb1 	bl	80016ac <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e09b      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ee      	bne.n	8002946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8087 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d061      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d146      	bne.n	8002a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fe85 	bl	80016ac <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fe81 	bl	80016ac <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e06d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4921      	ldr	r1, [pc, #132]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a19      	ldr	r1, [r3, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	430b      	orrs	r3, r1
 80029f2:	491b      	ldr	r1, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe fe55 	bl	80016ac <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe fe51 	bl	80016ac <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e03d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46a>
 8002a24:	e035      	b.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fe3e 	bl	80016ac <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fe3a 	bl	80016ac <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e026      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x498>
 8002a52:	e01e      	b.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e019      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x500>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d0      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4965      	ldr	r1, [pc, #404]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d040      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d115      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e073      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4936      	ldr	r1, [pc, #216]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fd8c 	bl	80016ac <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe fd88 	bl	80016ac <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e053      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d210      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0207 	bic.w	r2, r3, #7
 8002bd6:	4922      	ldr	r1, [pc, #136]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1cc>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fcea 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08007220 	.word	0x08007220
 8002c6c:	20000014 	.word	0x20000014
 8002c70:	20000018 	.word	0x20000018

08002c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d003      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x36>
 8002ca2:	e027      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	e027      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0c5b      	lsrs	r3, r3, #17
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	fb03 f202 	mul.w	r2, r3, r2
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e004      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	613b      	str	r3, [r7, #16]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cf6:	613b      	str	r3, [r7, #16]
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	693b      	ldr	r3, [r7, #16]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	08007238 	.word	0x08007238
 8002d14:	08007248 	.word	0x08007248
 8002d18:	003d0900 	.word	0x003d0900

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	20000014 	.word	0x20000014

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff2 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08007230 	.word	0x08007230

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffde 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0adb      	lsrs	r3, r3, #11
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08007230 	.word	0x08007230

08002d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <RCC_Delay+0x34>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <RCC_Delay+0x38>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0a5b      	lsrs	r3, r3, #9
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d9c:	bf00      	nop
  }
  while (Delay --);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	60fa      	str	r2, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <RCC_Delay+0x1c>
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	20000014 	.word	0x20000014
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d07d      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
 8002df4:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d118      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a42      	ldr	r2, [pc, #264]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fc46 	bl	80016ac <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	e008      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7fe fc42 	bl	80016ac <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e06d      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d02e      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d027      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e60:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e70:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d014      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fc11 	bl	80016ac <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fc0d 	bl	80016ac <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e036      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ee      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4917      	ldr	r1, [pc, #92]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	490b      	ldr	r1, [pc, #44]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
 8002f24:	42420440 	.word	0x42420440

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f8b4 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fa6e 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d001      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e035      	b.n	800304c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <HAL_TIM_Base_Start_IT+0x90>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_TIM_Base_Start_IT+0x4e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d004      	beq.n	8003016 <HAL_TIM_Base_Start_IT+0x4e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_TIM_Base_Start_IT+0x94>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d111      	bne.n	800303a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d010      	beq.n	800304a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	e007      	b.n	800304a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400

08003060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0202 	mvn.w	r2, #2
 800308c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9b4 	bl	8003410 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9a7 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f9b6 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0204 	mvn.w	r2, #4
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f98a 	bl	8003410 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f97d 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f98c 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b08      	cmp	r3, #8
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0208 	mvn.w	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f960 	bl	8003410 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f953 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f962 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b10      	cmp	r3, #16
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b10      	cmp	r3, #16
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0210 	mvn.w	r2, #16
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2208      	movs	r2, #8
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f936 	bl	8003410 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f929 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f938 	bl	8003422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0201 	mvn.w	r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe f934 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa6b 	bl	80036e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d10e      	bne.n	800323c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d107      	bne.n	800323c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8fc 	bl	8003434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b20      	cmp	r3, #32
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0220 	mvn.w	r2, #32
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa36 	bl	80036d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIM_ConfigClockSource+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e0b4      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x186>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c4:	d03e      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0xd4>
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ca:	f200 8087 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	f000 8086 	beq.w	80033e2 <HAL_TIM_ConfigClockSource+0x172>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d87f      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b70      	cmp	r3, #112	; 0x70
 80032de:	d01a      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0xa6>
 80032e0:	2b70      	cmp	r3, #112	; 0x70
 80032e2:	d87b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b60      	cmp	r3, #96	; 0x60
 80032e6:	d050      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x11a>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d877      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b50      	cmp	r3, #80	; 0x50
 80032ee:	d03c      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xfa>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d873      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d058      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x13a>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d86f      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d064      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d86b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d060      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d867      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05c      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	2b10      	cmp	r3, #16
 8003312:	d05a      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	e062      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f000 f95e 	bl	80035e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	609a      	str	r2, [r3, #8]
      break;
 8003342:	e04f      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f000 f947 	bl	80035e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e03c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	461a      	mov	r2, r3
 8003378:	f000 f8be 	bl	80034f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2150      	movs	r1, #80	; 0x50
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f915 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 8003388:	e02c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	461a      	mov	r2, r3
 8003398:	f000 f8dc 	bl	8003554 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2160      	movs	r1, #96	; 0x60
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f905 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 80033a8:	e01c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f89e 	bl	80034f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f8f5 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f000 f8ec 	bl	80035b2 <TIM_ITRx_SetConfig>
      break;
 80033da:	e003      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e000      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
	...

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <TIM_Base_SetConfig+0xa8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <TIM_Base_SetConfig+0x28>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0x28>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <TIM_Base_SetConfig+0xac>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d108      	bne.n	8003482 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <TIM_Base_SetConfig+0xa8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_Base_SetConfig+0x52>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d003      	beq.n	800349a <TIM_Base_SetConfig+0x52>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <TIM_Base_SetConfig+0xac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <TIM_Base_SetConfig+0xa8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	615a      	str	r2, [r3, #20]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400

080034f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f023 0201 	bic.w	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 030a 	bic.w	r3, r3, #10
 8003534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0210 	bic.w	r2, r3, #16
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800357e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	031b      	lsls	r3, r3, #12
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003590:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f043 0307 	orr.w	r3, r3, #7
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4313      	orrs	r3, r2
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	609a      	str	r2, [r3, #8]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e041      	b.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d004      	beq.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10c      	bne.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40000400 	.word	0x40000400

080036d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e042      	b.n	8003790 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fcf0 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fdc5 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d16d      	bne.n	8003894 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Transmit+0x2c>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e066      	b.n	8003896 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	; 0x21
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fd ff69 	bl	80016ac <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Transmit+0x6c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800380c:	e02a      	b.n	8003864 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fb14 	bl	8003e46 <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e036      	b.n	8003896 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	3302      	adds	r3, #2
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e007      	b.n	8003856 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3301      	adds	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1cf      	bne.n	800380e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2140      	movs	r1, #64	; 0x40
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fae4 	bl	8003e46 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e006      	b.n	8003896 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d112      	bne.n	80038de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Receive_IT+0x26>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e00b      	b.n	80038e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fb24 	bl	8003f22 <UART_Start_Receive_IT>
 80038da:	4603      	mov	r3, r0
 80038dc:	e000      	b.n	80038e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b0ba      	sub	sp, #232	; 0xe8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_UART_IRQHandler+0x66>
 800393a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fc01 	bl	800414e <UART_Receive_IT>
      return;
 800394c:	e25b      	b.n	8003e06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800394e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80de 	beq.w	8003b14 <HAL_UART_IRQHandler+0x22c>
 8003958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003968:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80d1 	beq.w	8003b14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_UART_IRQHandler+0xae>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xd2>
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_UART_IRQHandler+0xf6>
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d011      	beq.n	8003a0e <HAL_UART_IRQHandler+0x126>
 80039ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f043 0208 	orr.w	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 81f2 	beq.w	8003dfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_UART_IRQHandler+0x14e>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb8c 	bl	800414e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_UART_IRQHandler+0x17a>
 8003a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04f      	beq.n	8003b02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa96 	bl	8003f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d041      	beq.n	8003afa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1d9      	bne.n	8003a76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d013      	beq.n	8003af2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	4a7e      	ldr	r2, [pc, #504]	; (8003cc8 <HAL_UART_IRQHandler+0x3e0>)
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fb3a 	bl	8002150 <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e00e      	b.n	8003b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f993 	bl	8003e1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e00a      	b.n	8003b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f98f 	bl	8003e1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e006      	b.n	8003b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f98b 	bl	8003e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b0e:	e175      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	bf00      	nop
    return;
 8003b12:	e173      	b.n	8003dfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 814f 	bne.w	8003dbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8148 	beq.w	8003dbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8141 	beq.w	8003dbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80b6 	beq.w	8003ccc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8145 	beq.w	8003e00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	f080 813e 	bcs.w	8003e00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f000 8088 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bc4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1d9      	bne.n	8003b98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e1      	bne.n	8003be4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e3      	bne.n	8003c20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c78:	f023 0310 	bic.w	r3, r3, #16
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e3      	bne.n	8003c66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fa19 	bl	80020da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8b6 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cc4:	e09c      	b.n	8003e00 <HAL_UART_IRQHandler+0x518>
 8003cc6:	bf00      	nop
 8003cc8:	08004059 	.word	0x08004059
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 808e 	beq.w	8003e04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8089 	beq.w	8003e04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d16:	647a      	str	r2, [r7, #68]	; 0x44
 8003d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e3      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	623b      	str	r3, [r7, #32]
   return(result);
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d94:	61fa      	str	r2, [r7, #28]
 8003d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	69b9      	ldr	r1, [r7, #24]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	617b      	str	r3, [r7, #20]
   return(result);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f83b 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dba:	e023      	b.n	8003e04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_UART_IRQHandler+0x4f4>
 8003dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f953 	bl	8004080 <UART_Transmit_IT>
    return;
 8003dda:	e014      	b.n	8003e06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <HAL_UART_IRQHandler+0x51e>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f992 	bl	800411e <UART_EndTransmit_IT>
    return;
 8003dfa:	e004      	b.n	8003e06 <HAL_UART_IRQHandler+0x51e>
    return;
 8003dfc:	bf00      	nop
 8003dfe:	e002      	b.n	8003e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e04:	bf00      	nop
  }
}
 8003e06:	37e8      	adds	r7, #232	; 0xe8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b090      	sub	sp, #64	; 0x40
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e56:	e050      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d04c      	beq.n	8003efa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e66:	f7fd fc21 	bl	80016ac <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d241      	bcs.n	8003efa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e96:	637a      	str	r2, [r7, #52]	; 0x34
 8003e98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e5      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eca:	623a      	str	r2, [r7, #32]
 8003ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	69f9      	ldr	r1, [r7, #28]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e5      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e00f      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d09f      	beq.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3740      	adds	r7, #64	; 0x40
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2222      	movs	r2, #34	; 0x22
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b095      	sub	sp, #84	; 0x54
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	d119      	bne.n	8004040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	60bb      	str	r3, [r7, #8]
   return(result);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0310 	bic.w	r3, r3, #16
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800402c:	61ba      	str	r2, [r7, #24]
 800402e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6979      	ldr	r1, [r7, #20]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	613b      	str	r3, [r7, #16]
   return(result);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800404e:	bf00      	nop
 8004050:	3754      	adds	r7, #84	; 0x54
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff fed3 	bl	8003e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b21      	cmp	r3, #33	; 0x21
 8004092:	d13e      	bne.n	8004112 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d114      	bne.n	80040c8 <UART_Transmit_IT+0x48>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d110      	bne.n	80040c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	1c9a      	adds	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]
 80040c6:	e008      	b.n	80040da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	1c59      	adds	r1, r3, #1
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6211      	str	r1, [r2, #32]
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fe64 	bl	8003e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b08c      	sub	sp, #48	; 0x30
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b22      	cmp	r3, #34	; 0x22
 8004160:	f040 80ae 	bne.w	80042c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d117      	bne.n	800419e <UART_Receive_IT+0x50>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d113      	bne.n	800419e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418c:	b29a      	uxth	r2, r3
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	1c9a      	adds	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
 800419c:	e026      	b.n	80041ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d007      	beq.n	80041c2 <UART_Receive_IT+0x74>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <UART_Receive_IT+0x82>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e008      	b.n	80041e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4619      	mov	r1, r3
 80041fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d15d      	bne.n	80042bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0220 	bic.w	r2, r2, #32
 800420e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800421e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	2b01      	cmp	r3, #1
 8004244:	d135      	bne.n	80042b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	613b      	str	r3, [r7, #16]
   return(result);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	623a      	str	r2, [r7, #32]
 800426e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	69f9      	ldr	r1, [r7, #28]
 8004272:	6a3a      	ldr	r2, [r7, #32]
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	61bb      	str	r3, [r7, #24]
   return(result);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b10      	cmp	r3, #16
 800428c:	d10a      	bne.n	80042a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fdc0 	bl	8003e30 <HAL_UARTEx_RxEventCallback>
 80042b0:	e002      	b.n	80042b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd f940 	bl	8001538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e002      	b.n	80042c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3730      	adds	r7, #48	; 0x30
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004306:	f023 030c 	bic.w	r3, r3, #12
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	430b      	orrs	r3, r1
 8004312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <UART_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7fe fd10 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	e002      	b.n	8004342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fe fcf8 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8004340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <UART_SetConfig+0x118>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	0119      	lsls	r1, r3, #4
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009a      	lsls	r2, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fbb2 f2f3 	udiv	r2, r2, r3
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <UART_SetConfig+0x118>)
 800437a:	fba3 0302 	umull	r0, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2064      	movs	r0, #100	; 0x64
 8004382:	fb00 f303 	mul.w	r3, r0, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	3332      	adds	r3, #50	; 0x32
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <UART_SetConfig+0x118>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004398:	4419      	add	r1, r3
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <UART_SetConfig+0x118>)
 80043b2:	fba3 0302 	umull	r0, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2064      	movs	r0, #100	; 0x64
 80043ba:	fb00 f303 	mul.w	r3, r0, r3
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	; 0x32
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <UART_SetConfig+0x118>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	440a      	add	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40013800 	.word	0x40013800
 80043e4:	51eb851f 	.word	0x51eb851f

080043e8 <__errno>:
 80043e8:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <__errno+0x8>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000020 	.word	0x20000020

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	2600      	movs	r6, #0
 80043f8:	4d0c      	ldr	r5, [pc, #48]	; (800442c <__libc_init_array+0x38>)
 80043fa:	4c0d      	ldr	r4, [pc, #52]	; (8004430 <__libc_init_array+0x3c>)
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	42a6      	cmp	r6, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	f002 fefc 	bl	8007200 <_init>
 8004408:	2600      	movs	r6, #0
 800440a:	4d0a      	ldr	r5, [pc, #40]	; (8004434 <__libc_init_array+0x40>)
 800440c:	4c0a      	ldr	r4, [pc, #40]	; (8004438 <__libc_init_array+0x44>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	42a6      	cmp	r6, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f855 3b04 	ldr.w	r3, [r5], #4
 800441c:	4798      	blx	r3
 800441e:	3601      	adds	r6, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f855 3b04 	ldr.w	r3, [r5], #4
 8004426:	4798      	blx	r3
 8004428:	3601      	adds	r6, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	08007624 	.word	0x08007624
 8004430:	08007624 	.word	0x08007624
 8004434:	08007624 	.word	0x08007624
 8004438:	08007628 	.word	0x08007628

0800443c <memset>:
 800443c:	4603      	mov	r3, r0
 800443e:	4402      	add	r2, r0
 8004440:	4293      	cmp	r3, r2
 8004442:	d100      	bne.n	8004446 <memset+0xa>
 8004444:	4770      	bx	lr
 8004446:	f803 1b01 	strb.w	r1, [r3], #1
 800444a:	e7f9      	b.n	8004440 <memset+0x4>

0800444c <__cvt>:
 800444c:	2b00      	cmp	r3, #0
 800444e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004452:	461f      	mov	r7, r3
 8004454:	bfbb      	ittet	lt
 8004456:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800445a:	461f      	movlt	r7, r3
 800445c:	2300      	movge	r3, #0
 800445e:	232d      	movlt	r3, #45	; 0x2d
 8004460:	b088      	sub	sp, #32
 8004462:	4614      	mov	r4, r2
 8004464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004466:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004468:	7013      	strb	r3, [r2, #0]
 800446a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800446c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004470:	f023 0820 	bic.w	r8, r3, #32
 8004474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004478:	d005      	beq.n	8004486 <__cvt+0x3a>
 800447a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800447e:	d100      	bne.n	8004482 <__cvt+0x36>
 8004480:	3501      	adds	r5, #1
 8004482:	2302      	movs	r3, #2
 8004484:	e000      	b.n	8004488 <__cvt+0x3c>
 8004486:	2303      	movs	r3, #3
 8004488:	aa07      	add	r2, sp, #28
 800448a:	9204      	str	r2, [sp, #16]
 800448c:	aa06      	add	r2, sp, #24
 800448e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004492:	e9cd 3500 	strd	r3, r5, [sp]
 8004496:	4622      	mov	r2, r4
 8004498:	463b      	mov	r3, r7
 800449a:	f000 fce5 	bl	8004e68 <_dtoa_r>
 800449e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044a2:	4606      	mov	r6, r0
 80044a4:	d102      	bne.n	80044ac <__cvt+0x60>
 80044a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044a8:	07db      	lsls	r3, r3, #31
 80044aa:	d522      	bpl.n	80044f2 <__cvt+0xa6>
 80044ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044b0:	eb06 0905 	add.w	r9, r6, r5
 80044b4:	d110      	bne.n	80044d8 <__cvt+0x8c>
 80044b6:	7833      	ldrb	r3, [r6, #0]
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d10a      	bne.n	80044d2 <__cvt+0x86>
 80044bc:	2200      	movs	r2, #0
 80044be:	2300      	movs	r3, #0
 80044c0:	4620      	mov	r0, r4
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fc fa70 	bl	80009a8 <__aeabi_dcmpeq>
 80044c8:	b918      	cbnz	r0, 80044d2 <__cvt+0x86>
 80044ca:	f1c5 0501 	rsb	r5, r5, #1
 80044ce:	f8ca 5000 	str.w	r5, [sl]
 80044d2:	f8da 3000 	ldr.w	r3, [sl]
 80044d6:	4499      	add	r9, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	2300      	movs	r3, #0
 80044dc:	4620      	mov	r0, r4
 80044de:	4639      	mov	r1, r7
 80044e0:	f7fc fa62 	bl	80009a8 <__aeabi_dcmpeq>
 80044e4:	b108      	cbz	r0, 80044ea <__cvt+0x9e>
 80044e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80044ea:	2230      	movs	r2, #48	; 0x30
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	454b      	cmp	r3, r9
 80044f0:	d307      	bcc.n	8004502 <__cvt+0xb6>
 80044f2:	4630      	mov	r0, r6
 80044f4:	9b07      	ldr	r3, [sp, #28]
 80044f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044f8:	1b9b      	subs	r3, r3, r6
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	b008      	add	sp, #32
 80044fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	9107      	str	r1, [sp, #28]
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e7f0      	b.n	80044ec <__cvt+0xa0>

0800450a <__exponent>:
 800450a:	4603      	mov	r3, r0
 800450c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800450e:	2900      	cmp	r1, #0
 8004510:	f803 2b02 	strb.w	r2, [r3], #2
 8004514:	bfb6      	itet	lt
 8004516:	222d      	movlt	r2, #45	; 0x2d
 8004518:	222b      	movge	r2, #43	; 0x2b
 800451a:	4249      	neglt	r1, r1
 800451c:	2909      	cmp	r1, #9
 800451e:	7042      	strb	r2, [r0, #1]
 8004520:	dd2b      	ble.n	800457a <__exponent+0x70>
 8004522:	f10d 0407 	add.w	r4, sp, #7
 8004526:	46a4      	mov	ip, r4
 8004528:	270a      	movs	r7, #10
 800452a:	fb91 f6f7 	sdiv	r6, r1, r7
 800452e:	460a      	mov	r2, r1
 8004530:	46a6      	mov	lr, r4
 8004532:	fb07 1516 	mls	r5, r7, r6, r1
 8004536:	2a63      	cmp	r2, #99	; 0x63
 8004538:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800453c:	4631      	mov	r1, r6
 800453e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004542:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004546:	dcf0      	bgt.n	800452a <__exponent+0x20>
 8004548:	3130      	adds	r1, #48	; 0x30
 800454a:	f1ae 0502 	sub.w	r5, lr, #2
 800454e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004552:	4629      	mov	r1, r5
 8004554:	1c44      	adds	r4, r0, #1
 8004556:	4561      	cmp	r1, ip
 8004558:	d30a      	bcc.n	8004570 <__exponent+0x66>
 800455a:	f10d 0209 	add.w	r2, sp, #9
 800455e:	eba2 020e 	sub.w	r2, r2, lr
 8004562:	4565      	cmp	r5, ip
 8004564:	bf88      	it	hi
 8004566:	2200      	movhi	r2, #0
 8004568:	4413      	add	r3, r2
 800456a:	1a18      	subs	r0, r3, r0
 800456c:	b003      	add	sp, #12
 800456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004574:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004578:	e7ed      	b.n	8004556 <__exponent+0x4c>
 800457a:	2330      	movs	r3, #48	; 0x30
 800457c:	3130      	adds	r1, #48	; 0x30
 800457e:	7083      	strb	r3, [r0, #2]
 8004580:	70c1      	strb	r1, [r0, #3]
 8004582:	1d03      	adds	r3, r0, #4
 8004584:	e7f1      	b.n	800456a <__exponent+0x60>
	...

08004588 <_printf_float>:
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	b091      	sub	sp, #68	; 0x44
 800458e:	460c      	mov	r4, r1
 8004590:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004594:	4616      	mov	r6, r2
 8004596:	461f      	mov	r7, r3
 8004598:	4605      	mov	r5, r0
 800459a:	f001 fa53 	bl	8005a44 <_localeconv_r>
 800459e:	6803      	ldr	r3, [r0, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	9309      	str	r3, [sp, #36]	; 0x24
 80045a4:	f7fb fdd4 	bl	8000150 <strlen>
 80045a8:	2300      	movs	r3, #0
 80045aa:	930e      	str	r3, [sp, #56]	; 0x38
 80045ac:	f8d8 3000 	ldr.w	r3, [r8]
 80045b0:	900a      	str	r0, [sp, #40]	; 0x28
 80045b2:	3307      	adds	r3, #7
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	f103 0208 	add.w	r2, r3, #8
 80045bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80045c0:	f8d4 b000 	ldr.w	fp, [r4]
 80045c4:	f8c8 2000 	str.w	r2, [r8]
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80045d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80045d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045da:	f04f 32ff 	mov.w	r2, #4294967295
 80045de:	4640      	mov	r0, r8
 80045e0:	4b9c      	ldr	r3, [pc, #624]	; (8004854 <_printf_float+0x2cc>)
 80045e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045e4:	f7fc fa12 	bl	8000a0c <__aeabi_dcmpun>
 80045e8:	bb70      	cbnz	r0, 8004648 <_printf_float+0xc0>
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	4640      	mov	r0, r8
 80045f0:	4b98      	ldr	r3, [pc, #608]	; (8004854 <_printf_float+0x2cc>)
 80045f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045f4:	f7fc f9ec 	bl	80009d0 <__aeabi_dcmple>
 80045f8:	bb30      	cbnz	r0, 8004648 <_printf_float+0xc0>
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	4640      	mov	r0, r8
 8004600:	4651      	mov	r1, sl
 8004602:	f7fc f9db 	bl	80009bc <__aeabi_dcmplt>
 8004606:	b110      	cbz	r0, 800460e <_printf_float+0x86>
 8004608:	232d      	movs	r3, #45	; 0x2d
 800460a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800460e:	4b92      	ldr	r3, [pc, #584]	; (8004858 <_printf_float+0x2d0>)
 8004610:	4892      	ldr	r0, [pc, #584]	; (800485c <_printf_float+0x2d4>)
 8004612:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004616:	bf94      	ite	ls
 8004618:	4698      	movls	r8, r3
 800461a:	4680      	movhi	r8, r0
 800461c:	2303      	movs	r3, #3
 800461e:	f04f 0a00 	mov.w	sl, #0
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	f02b 0304 	bic.w	r3, fp, #4
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	4633      	mov	r3, r6
 800462c:	4621      	mov	r1, r4
 800462e:	4628      	mov	r0, r5
 8004630:	9700      	str	r7, [sp, #0]
 8004632:	aa0f      	add	r2, sp, #60	; 0x3c
 8004634:	f000 f9d4 	bl	80049e0 <_printf_common>
 8004638:	3001      	adds	r0, #1
 800463a:	f040 8090 	bne.w	800475e <_printf_float+0x1d6>
 800463e:	f04f 30ff 	mov.w	r0, #4294967295
 8004642:	b011      	add	sp, #68	; 0x44
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	4642      	mov	r2, r8
 800464a:	4653      	mov	r3, sl
 800464c:	4640      	mov	r0, r8
 800464e:	4651      	mov	r1, sl
 8004650:	f7fc f9dc 	bl	8000a0c <__aeabi_dcmpun>
 8004654:	b148      	cbz	r0, 800466a <_printf_float+0xe2>
 8004656:	f1ba 0f00 	cmp.w	sl, #0
 800465a:	bfb8      	it	lt
 800465c:	232d      	movlt	r3, #45	; 0x2d
 800465e:	4880      	ldr	r0, [pc, #512]	; (8004860 <_printf_float+0x2d8>)
 8004660:	bfb8      	it	lt
 8004662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004666:	4b7f      	ldr	r3, [pc, #508]	; (8004864 <_printf_float+0x2dc>)
 8004668:	e7d3      	b.n	8004612 <_printf_float+0x8a>
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	d142      	bne.n	80046fa <_printf_float+0x172>
 8004674:	2306      	movs	r3, #6
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	9206      	str	r2, [sp, #24]
 800467c:	aa0e      	add	r2, sp, #56	; 0x38
 800467e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004682:	aa0d      	add	r2, sp, #52	; 0x34
 8004684:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004688:	9203      	str	r2, [sp, #12]
 800468a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800468e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	6863      	ldr	r3, [r4, #4]
 8004696:	4642      	mov	r2, r8
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4628      	mov	r0, r5
 800469c:	4653      	mov	r3, sl
 800469e:	910b      	str	r1, [sp, #44]	; 0x2c
 80046a0:	f7ff fed4 	bl	800444c <__cvt>
 80046a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046a6:	4680      	mov	r8, r0
 80046a8:	2947      	cmp	r1, #71	; 0x47
 80046aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046ac:	d108      	bne.n	80046c0 <_printf_float+0x138>
 80046ae:	1cc8      	adds	r0, r1, #3
 80046b0:	db02      	blt.n	80046b8 <_printf_float+0x130>
 80046b2:	6863      	ldr	r3, [r4, #4]
 80046b4:	4299      	cmp	r1, r3
 80046b6:	dd40      	ble.n	800473a <_printf_float+0x1b2>
 80046b8:	f1a9 0902 	sub.w	r9, r9, #2
 80046bc:	fa5f f989 	uxtb.w	r9, r9
 80046c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046c4:	d81f      	bhi.n	8004706 <_printf_float+0x17e>
 80046c6:	464a      	mov	r2, r9
 80046c8:	3901      	subs	r1, #1
 80046ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046ce:	910d      	str	r1, [sp, #52]	; 0x34
 80046d0:	f7ff ff1b 	bl	800450a <__exponent>
 80046d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d6:	4682      	mov	sl, r0
 80046d8:	1813      	adds	r3, r2, r0
 80046da:	2a01      	cmp	r2, #1
 80046dc:	6123      	str	r3, [r4, #16]
 80046de:	dc02      	bgt.n	80046e6 <_printf_float+0x15e>
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	d501      	bpl.n	80046ea <_printf_float+0x162>
 80046e6:	3301      	adds	r3, #1
 80046e8:	6123      	str	r3, [r4, #16]
 80046ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d09b      	beq.n	800462a <_printf_float+0xa2>
 80046f2:	232d      	movs	r3, #45	; 0x2d
 80046f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f8:	e797      	b.n	800462a <_printf_float+0xa2>
 80046fa:	2947      	cmp	r1, #71	; 0x47
 80046fc:	d1bc      	bne.n	8004678 <_printf_float+0xf0>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ba      	bne.n	8004678 <_printf_float+0xf0>
 8004702:	2301      	movs	r3, #1
 8004704:	e7b7      	b.n	8004676 <_printf_float+0xee>
 8004706:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800470a:	d118      	bne.n	800473e <_printf_float+0x1b6>
 800470c:	2900      	cmp	r1, #0
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	dd0b      	ble.n	800472a <_printf_float+0x1a2>
 8004712:	6121      	str	r1, [r4, #16]
 8004714:	b913      	cbnz	r3, 800471c <_printf_float+0x194>
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	07d0      	lsls	r0, r2, #31
 800471a:	d502      	bpl.n	8004722 <_printf_float+0x19a>
 800471c:	3301      	adds	r3, #1
 800471e:	440b      	add	r3, r1
 8004720:	6123      	str	r3, [r4, #16]
 8004722:	f04f 0a00 	mov.w	sl, #0
 8004726:	65a1      	str	r1, [r4, #88]	; 0x58
 8004728:	e7df      	b.n	80046ea <_printf_float+0x162>
 800472a:	b913      	cbnz	r3, 8004732 <_printf_float+0x1aa>
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	07d2      	lsls	r2, r2, #31
 8004730:	d501      	bpl.n	8004736 <_printf_float+0x1ae>
 8004732:	3302      	adds	r3, #2
 8004734:	e7f4      	b.n	8004720 <_printf_float+0x198>
 8004736:	2301      	movs	r3, #1
 8004738:	e7f2      	b.n	8004720 <_printf_float+0x198>
 800473a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800473e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004740:	4299      	cmp	r1, r3
 8004742:	db05      	blt.n	8004750 <_printf_float+0x1c8>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	6121      	str	r1, [r4, #16]
 8004748:	07d8      	lsls	r0, r3, #31
 800474a:	d5ea      	bpl.n	8004722 <_printf_float+0x19a>
 800474c:	1c4b      	adds	r3, r1, #1
 800474e:	e7e7      	b.n	8004720 <_printf_float+0x198>
 8004750:	2900      	cmp	r1, #0
 8004752:	bfcc      	ite	gt
 8004754:	2201      	movgt	r2, #1
 8004756:	f1c1 0202 	rsble	r2, r1, #2
 800475a:	4413      	add	r3, r2
 800475c:	e7e0      	b.n	8004720 <_printf_float+0x198>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	055a      	lsls	r2, r3, #21
 8004762:	d407      	bmi.n	8004774 <_printf_float+0x1ec>
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	4642      	mov	r2, r8
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	d12b      	bne.n	80047ca <_printf_float+0x242>
 8004772:	e764      	b.n	800463e <_printf_float+0xb6>
 8004774:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004778:	f240 80dd 	bls.w	8004936 <_printf_float+0x3ae>
 800477c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004780:	2200      	movs	r2, #0
 8004782:	2300      	movs	r3, #0
 8004784:	f7fc f910 	bl	80009a8 <__aeabi_dcmpeq>
 8004788:	2800      	cmp	r0, #0
 800478a:	d033      	beq.n	80047f4 <_printf_float+0x26c>
 800478c:	2301      	movs	r3, #1
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	4a35      	ldr	r2, [pc, #212]	; (8004868 <_printf_float+0x2e0>)
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	f43f af51 	beq.w	800463e <_printf_float+0xb6>
 800479c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047a0:	429a      	cmp	r2, r3
 80047a2:	db02      	blt.n	80047aa <_printf_float+0x222>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07d8      	lsls	r0, r3, #31
 80047a8:	d50f      	bpl.n	80047ca <_printf_float+0x242>
 80047aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ae:	4631      	mov	r1, r6
 80047b0:	4628      	mov	r0, r5
 80047b2:	47b8      	blx	r7
 80047b4:	3001      	adds	r0, #1
 80047b6:	f43f af42 	beq.w	800463e <_printf_float+0xb6>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	f104 091a 	add.w	r9, r4, #26
 80047c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4543      	cmp	r3, r8
 80047c8:	dc09      	bgt.n	80047de <_printf_float+0x256>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	079b      	lsls	r3, r3, #30
 80047ce:	f100 8102 	bmi.w	80049d6 <_printf_float+0x44e>
 80047d2:	68e0      	ldr	r0, [r4, #12]
 80047d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047d6:	4298      	cmp	r0, r3
 80047d8:	bfb8      	it	lt
 80047da:	4618      	movlt	r0, r3
 80047dc:	e731      	b.n	8004642 <_printf_float+0xba>
 80047de:	2301      	movs	r3, #1
 80047e0:	464a      	mov	r2, r9
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f af28 	beq.w	800463e <_printf_float+0xb6>
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	e7e6      	b.n	80047c2 <_printf_float+0x23a>
 80047f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dc38      	bgt.n	800486c <_printf_float+0x2e4>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <_printf_float+0x2e0>)
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f af1a 	beq.w	800463e <_printf_float+0xb6>
 800480a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800480e:	4313      	orrs	r3, r2
 8004810:	d102      	bne.n	8004818 <_printf_float+0x290>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	07d9      	lsls	r1, r3, #31
 8004816:	d5d8      	bpl.n	80047ca <_printf_float+0x242>
 8004818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f af0b 	beq.w	800463e <_printf_float+0xb6>
 8004828:	f04f 0900 	mov.w	r9, #0
 800482c:	f104 0a1a 	add.w	sl, r4, #26
 8004830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004832:	425b      	negs	r3, r3
 8004834:	454b      	cmp	r3, r9
 8004836:	dc01      	bgt.n	800483c <_printf_float+0x2b4>
 8004838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800483a:	e794      	b.n	8004766 <_printf_float+0x1de>
 800483c:	2301      	movs	r3, #1
 800483e:	4652      	mov	r2, sl
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f aef9 	beq.w	800463e <_printf_float+0xb6>
 800484c:	f109 0901 	add.w	r9, r9, #1
 8004850:	e7ee      	b.n	8004830 <_printf_float+0x2a8>
 8004852:	bf00      	nop
 8004854:	7fefffff 	.word	0x7fefffff
 8004858:	08007250 	.word	0x08007250
 800485c:	08007254 	.word	0x08007254
 8004860:	0800725c 	.word	0x0800725c
 8004864:	08007258 	.word	0x08007258
 8004868:	08007260 	.word	0x08007260
 800486c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800486e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004870:	429a      	cmp	r2, r3
 8004872:	bfa8      	it	ge
 8004874:	461a      	movge	r2, r3
 8004876:	2a00      	cmp	r2, #0
 8004878:	4691      	mov	r9, r2
 800487a:	dc37      	bgt.n	80048ec <_printf_float+0x364>
 800487c:	f04f 0b00 	mov.w	fp, #0
 8004880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004884:	f104 021a 	add.w	r2, r4, #26
 8004888:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800488c:	ebaa 0309 	sub.w	r3, sl, r9
 8004890:	455b      	cmp	r3, fp
 8004892:	dc33      	bgt.n	80048fc <_printf_float+0x374>
 8004894:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004898:	429a      	cmp	r2, r3
 800489a:	db3b      	blt.n	8004914 <_printf_float+0x38c>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	07da      	lsls	r2, r3, #31
 80048a0:	d438      	bmi.n	8004914 <_printf_float+0x38c>
 80048a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048a6:	eba3 020a 	sub.w	r2, r3, sl
 80048aa:	eba3 0901 	sub.w	r9, r3, r1
 80048ae:	4591      	cmp	r9, r2
 80048b0:	bfa8      	it	ge
 80048b2:	4691      	movge	r9, r2
 80048b4:	f1b9 0f00 	cmp.w	r9, #0
 80048b8:	dc34      	bgt.n	8004924 <_printf_float+0x39c>
 80048ba:	f04f 0800 	mov.w	r8, #0
 80048be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048c2:	f104 0a1a 	add.w	sl, r4, #26
 80048c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	eba3 0309 	sub.w	r3, r3, r9
 80048d0:	4543      	cmp	r3, r8
 80048d2:	f77f af7a 	ble.w	80047ca <_printf_float+0x242>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4652      	mov	r2, sl
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	47b8      	blx	r7
 80048e0:	3001      	adds	r0, #1
 80048e2:	f43f aeac 	beq.w	800463e <_printf_float+0xb6>
 80048e6:	f108 0801 	add.w	r8, r8, #1
 80048ea:	e7ec      	b.n	80048c6 <_printf_float+0x33e>
 80048ec:	4613      	mov	r3, r2
 80048ee:	4631      	mov	r1, r6
 80048f0:	4642      	mov	r2, r8
 80048f2:	4628      	mov	r0, r5
 80048f4:	47b8      	blx	r7
 80048f6:	3001      	adds	r0, #1
 80048f8:	d1c0      	bne.n	800487c <_printf_float+0x2f4>
 80048fa:	e6a0      	b.n	800463e <_printf_float+0xb6>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	920b      	str	r2, [sp, #44]	; 0x2c
 8004904:	47b8      	blx	r7
 8004906:	3001      	adds	r0, #1
 8004908:	f43f ae99 	beq.w	800463e <_printf_float+0xb6>
 800490c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800490e:	f10b 0b01 	add.w	fp, fp, #1
 8004912:	e7b9      	b.n	8004888 <_printf_float+0x300>
 8004914:	4631      	mov	r1, r6
 8004916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800491a:	4628      	mov	r0, r5
 800491c:	47b8      	blx	r7
 800491e:	3001      	adds	r0, #1
 8004920:	d1bf      	bne.n	80048a2 <_printf_float+0x31a>
 8004922:	e68c      	b.n	800463e <_printf_float+0xb6>
 8004924:	464b      	mov	r3, r9
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	eb08 020a 	add.w	r2, r8, sl
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	d1c2      	bne.n	80048ba <_printf_float+0x332>
 8004934:	e683      	b.n	800463e <_printf_float+0xb6>
 8004936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004938:	2a01      	cmp	r2, #1
 800493a:	dc01      	bgt.n	8004940 <_printf_float+0x3b8>
 800493c:	07db      	lsls	r3, r3, #31
 800493e:	d537      	bpl.n	80049b0 <_printf_float+0x428>
 8004940:	2301      	movs	r3, #1
 8004942:	4642      	mov	r2, r8
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f ae77 	beq.w	800463e <_printf_float+0xb6>
 8004950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004954:	4631      	mov	r1, r6
 8004956:	4628      	mov	r0, r5
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	f43f ae6f 	beq.w	800463e <_printf_float+0xb6>
 8004960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004964:	2200      	movs	r2, #0
 8004966:	2300      	movs	r3, #0
 8004968:	f7fc f81e 	bl	80009a8 <__aeabi_dcmpeq>
 800496c:	b9d8      	cbnz	r0, 80049a6 <_printf_float+0x41e>
 800496e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004970:	f108 0201 	add.w	r2, r8, #1
 8004974:	3b01      	subs	r3, #1
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	d10e      	bne.n	800499e <_printf_float+0x416>
 8004980:	e65d      	b.n	800463e <_printf_float+0xb6>
 8004982:	2301      	movs	r3, #1
 8004984:	464a      	mov	r2, r9
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f ae56 	beq.w	800463e <_printf_float+0xb6>
 8004992:	f108 0801 	add.w	r8, r8, #1
 8004996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004998:	3b01      	subs	r3, #1
 800499a:	4543      	cmp	r3, r8
 800499c:	dcf1      	bgt.n	8004982 <_printf_float+0x3fa>
 800499e:	4653      	mov	r3, sl
 80049a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049a4:	e6e0      	b.n	8004768 <_printf_float+0x1e0>
 80049a6:	f04f 0800 	mov.w	r8, #0
 80049aa:	f104 091a 	add.w	r9, r4, #26
 80049ae:	e7f2      	b.n	8004996 <_printf_float+0x40e>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4642      	mov	r2, r8
 80049b4:	e7df      	b.n	8004976 <_printf_float+0x3ee>
 80049b6:	2301      	movs	r3, #1
 80049b8:	464a      	mov	r2, r9
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f ae3c 	beq.w	800463e <_printf_float+0xb6>
 80049c6:	f108 0801 	add.w	r8, r8, #1
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80049ce:	1a5b      	subs	r3, r3, r1
 80049d0:	4543      	cmp	r3, r8
 80049d2:	dcf0      	bgt.n	80049b6 <_printf_float+0x42e>
 80049d4:	e6fd      	b.n	80047d2 <_printf_float+0x24a>
 80049d6:	f04f 0800 	mov.w	r8, #0
 80049da:	f104 0919 	add.w	r9, r4, #25
 80049de:	e7f4      	b.n	80049ca <_printf_float+0x442>

080049e0 <_printf_common>:
 80049e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e4:	4616      	mov	r6, r2
 80049e6:	4699      	mov	r9, r3
 80049e8:	688a      	ldr	r2, [r1, #8]
 80049ea:	690b      	ldr	r3, [r1, #16]
 80049ec:	4607      	mov	r7, r0
 80049ee:	4293      	cmp	r3, r2
 80049f0:	bfb8      	it	lt
 80049f2:	4613      	movlt	r3, r2
 80049f4:	6033      	str	r3, [r6, #0]
 80049f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049fa:	460c      	mov	r4, r1
 80049fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a00:	b10a      	cbz	r2, 8004a06 <_printf_common+0x26>
 8004a02:	3301      	adds	r3, #1
 8004a04:	6033      	str	r3, [r6, #0]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	0699      	lsls	r1, r3, #26
 8004a0a:	bf42      	ittt	mi
 8004a0c:	6833      	ldrmi	r3, [r6, #0]
 8004a0e:	3302      	addmi	r3, #2
 8004a10:	6033      	strmi	r3, [r6, #0]
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	f015 0506 	ands.w	r5, r5, #6
 8004a18:	d106      	bne.n	8004a28 <_printf_common+0x48>
 8004a1a:	f104 0a19 	add.w	sl, r4, #25
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	6832      	ldr	r2, [r6, #0]
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	dc28      	bgt.n	8004a7a <_printf_common+0x9a>
 8004a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a2c:	1e13      	subs	r3, r2, #0
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	bf18      	it	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	0692      	lsls	r2, r2, #26
 8004a36:	d42d      	bmi.n	8004a94 <_printf_common+0xb4>
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a40:	47c0      	blx	r8
 8004a42:	3001      	adds	r0, #1
 8004a44:	d020      	beq.n	8004a88 <_printf_common+0xa8>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	68e5      	ldr	r5, [r4, #12]
 8004a4a:	f003 0306 	and.w	r3, r3, #6
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	bf18      	it	ne
 8004a52:	2500      	movne	r5, #0
 8004a54:	6832      	ldr	r2, [r6, #0]
 8004a56:	f04f 0600 	mov.w	r6, #0
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	bf08      	it	eq
 8004a5e:	1aad      	subeq	r5, r5, r2
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	bf08      	it	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bfc4      	itt	gt
 8004a6c:	1a9b      	subgt	r3, r3, r2
 8004a6e:	18ed      	addgt	r5, r5, r3
 8004a70:	341a      	adds	r4, #26
 8004a72:	42b5      	cmp	r5, r6
 8004a74:	d11a      	bne.n	8004aac <_printf_common+0xcc>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e008      	b.n	8004a8c <_printf_common+0xac>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4638      	mov	r0, r7
 8004a82:	47c0      	blx	r8
 8004a84:	3001      	adds	r0, #1
 8004a86:	d103      	bne.n	8004a90 <_printf_common+0xb0>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	3501      	adds	r5, #1
 8004a92:	e7c4      	b.n	8004a1e <_printf_common+0x3e>
 8004a94:	2030      	movs	r0, #48	; 0x30
 8004a96:	18e1      	adds	r1, r4, r3
 8004a98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa2:	4422      	add	r2, r4
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aaa:	e7c5      	b.n	8004a38 <_printf_common+0x58>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4622      	mov	r2, r4
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0e6      	beq.n	8004a88 <_printf_common+0xa8>
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7d9      	b.n	8004a72 <_printf_common+0x92>
	...

08004ac0 <_printf_i>:
 8004ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	7e0f      	ldrb	r7, [r1, #24]
 8004ac6:	4691      	mov	r9, r2
 8004ac8:	2f78      	cmp	r7, #120	; 0x78
 8004aca:	4680      	mov	r8, r0
 8004acc:	460c      	mov	r4, r1
 8004ace:	469a      	mov	sl, r3
 8004ad0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ad6:	d807      	bhi.n	8004ae8 <_printf_i+0x28>
 8004ad8:	2f62      	cmp	r7, #98	; 0x62
 8004ada:	d80a      	bhi.n	8004af2 <_printf_i+0x32>
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	f000 80d9 	beq.w	8004c94 <_printf_i+0x1d4>
 8004ae2:	2f58      	cmp	r7, #88	; 0x58
 8004ae4:	f000 80a4 	beq.w	8004c30 <_printf_i+0x170>
 8004ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af0:	e03a      	b.n	8004b68 <_printf_i+0xa8>
 8004af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004af6:	2b15      	cmp	r3, #21
 8004af8:	d8f6      	bhi.n	8004ae8 <_printf_i+0x28>
 8004afa:	a101      	add	r1, pc, #4	; (adr r1, 8004b00 <_printf_i+0x40>)
 8004afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b00:	08004b59 	.word	0x08004b59
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004ae9 	.word	0x08004ae9
 8004b0c:	08004ae9 	.word	0x08004ae9
 8004b10:	08004ae9 	.word	0x08004ae9
 8004b14:	08004ae9 	.word	0x08004ae9
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004ae9 	.word	0x08004ae9
 8004b20:	08004ae9 	.word	0x08004ae9
 8004b24:	08004ae9 	.word	0x08004ae9
 8004b28:	08004ae9 	.word	0x08004ae9
 8004b2c:	08004c7b 	.word	0x08004c7b
 8004b30:	08004b9d 	.word	0x08004b9d
 8004b34:	08004c5d 	.word	0x08004c5d
 8004b38:	08004ae9 	.word	0x08004ae9
 8004b3c:	08004ae9 	.word	0x08004ae9
 8004b40:	08004c9d 	.word	0x08004c9d
 8004b44:	08004ae9 	.word	0x08004ae9
 8004b48:	08004b9d 	.word	0x08004b9d
 8004b4c:	08004ae9 	.word	0x08004ae9
 8004b50:	08004ae9 	.word	0x08004ae9
 8004b54:	08004c65 	.word	0x08004c65
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	1d1a      	adds	r2, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	602a      	str	r2, [r5, #0]
 8004b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0a4      	b.n	8004cb6 <_printf_i+0x1f6>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	6829      	ldr	r1, [r5, #0]
 8004b70:	0606      	lsls	r6, r0, #24
 8004b72:	f101 0304 	add.w	r3, r1, #4
 8004b76:	d50a      	bpl.n	8004b8e <_printf_i+0xce>
 8004b78:	680e      	ldr	r6, [r1, #0]
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	2e00      	cmp	r6, #0
 8004b7e:	da03      	bge.n	8004b88 <_printf_i+0xc8>
 8004b80:	232d      	movs	r3, #45	; 0x2d
 8004b82:	4276      	negs	r6, r6
 8004b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b88:	230a      	movs	r3, #10
 8004b8a:	485e      	ldr	r0, [pc, #376]	; (8004d04 <_printf_i+0x244>)
 8004b8c:	e019      	b.n	8004bc2 <_printf_i+0x102>
 8004b8e:	680e      	ldr	r6, [r1, #0]
 8004b90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	bf18      	it	ne
 8004b98:	b236      	sxthne	r6, r6
 8004b9a:	e7ef      	b.n	8004b7c <_printf_i+0xbc>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6820      	ldr	r0, [r4, #0]
 8004ba0:	1d19      	adds	r1, r3, #4
 8004ba2:	6029      	str	r1, [r5, #0]
 8004ba4:	0601      	lsls	r1, r0, #24
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0xec>
 8004ba8:	681e      	ldr	r6, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <_printf_i+0xf2>
 8004bac:	0646      	lsls	r6, r0, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0xe8>
 8004bb0:	881e      	ldrh	r6, [r3, #0]
 8004bb2:	2f6f      	cmp	r7, #111	; 0x6f
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2308      	moveq	r3, #8
 8004bb8:	230a      	movne	r3, #10
 8004bba:	4852      	ldr	r0, [pc, #328]	; (8004d04 <_printf_i+0x244>)
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bc2:	6865      	ldr	r5, [r4, #4]
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	bfa8      	it	ge
 8004bc8:	6821      	ldrge	r1, [r4, #0]
 8004bca:	60a5      	str	r5, [r4, #8]
 8004bcc:	bfa4      	itt	ge
 8004bce:	f021 0104 	bicge.w	r1, r1, #4
 8004bd2:	6021      	strge	r1, [r4, #0]
 8004bd4:	b90e      	cbnz	r6, 8004bda <_printf_i+0x11a>
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	d04d      	beq.n	8004c76 <_printf_i+0x1b6>
 8004bda:	4615      	mov	r5, r2
 8004bdc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004be0:	fb03 6711 	mls	r7, r3, r1, r6
 8004be4:	5dc7      	ldrb	r7, [r0, r7]
 8004be6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bea:	4637      	mov	r7, r6
 8004bec:	42bb      	cmp	r3, r7
 8004bee:	460e      	mov	r6, r1
 8004bf0:	d9f4      	bls.n	8004bdc <_printf_i+0x11c>
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d10b      	bne.n	8004c0e <_printf_i+0x14e>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	07de      	lsls	r6, r3, #31
 8004bfa:	d508      	bpl.n	8004c0e <_printf_i+0x14e>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	6861      	ldr	r1, [r4, #4]
 8004c00:	4299      	cmp	r1, r3
 8004c02:	bfde      	ittt	le
 8004c04:	2330      	movle	r3, #48	; 0x30
 8004c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c0e:	1b52      	subs	r2, r2, r5
 8004c10:	6122      	str	r2, [r4, #16]
 8004c12:	464b      	mov	r3, r9
 8004c14:	4621      	mov	r1, r4
 8004c16:	4640      	mov	r0, r8
 8004c18:	f8cd a000 	str.w	sl, [sp]
 8004c1c:	aa03      	add	r2, sp, #12
 8004c1e:	f7ff fedf 	bl	80049e0 <_printf_common>
 8004c22:	3001      	adds	r0, #1
 8004c24:	d14c      	bne.n	8004cc0 <_printf_i+0x200>
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	b004      	add	sp, #16
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	4834      	ldr	r0, [pc, #208]	; (8004d04 <_printf_i+0x244>)
 8004c32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c36:	6829      	ldr	r1, [r5, #0]
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c3e:	6029      	str	r1, [r5, #0]
 8004c40:	061d      	lsls	r5, r3, #24
 8004c42:	d514      	bpl.n	8004c6e <_printf_i+0x1ae>
 8004c44:	07df      	lsls	r7, r3, #31
 8004c46:	bf44      	itt	mi
 8004c48:	f043 0320 	orrmi.w	r3, r3, #32
 8004c4c:	6023      	strmi	r3, [r4, #0]
 8004c4e:	b91e      	cbnz	r6, 8004c58 <_printf_i+0x198>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	f023 0320 	bic.w	r3, r3, #32
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	2310      	movs	r3, #16
 8004c5a:	e7af      	b.n	8004bbc <_printf_i+0xfc>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	f043 0320 	orr.w	r3, r3, #32
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	2378      	movs	r3, #120	; 0x78
 8004c66:	4828      	ldr	r0, [pc, #160]	; (8004d08 <_printf_i+0x248>)
 8004c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c6c:	e7e3      	b.n	8004c36 <_printf_i+0x176>
 8004c6e:	0659      	lsls	r1, r3, #25
 8004c70:	bf48      	it	mi
 8004c72:	b2b6      	uxthmi	r6, r6
 8004c74:	e7e6      	b.n	8004c44 <_printf_i+0x184>
 8004c76:	4615      	mov	r5, r2
 8004c78:	e7bb      	b.n	8004bf2 <_printf_i+0x132>
 8004c7a:	682b      	ldr	r3, [r5, #0]
 8004c7c:	6826      	ldr	r6, [r4, #0]
 8004c7e:	1d18      	adds	r0, r3, #4
 8004c80:	6961      	ldr	r1, [r4, #20]
 8004c82:	6028      	str	r0, [r5, #0]
 8004c84:	0635      	lsls	r5, r6, #24
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	d501      	bpl.n	8004c8e <_printf_i+0x1ce>
 8004c8a:	6019      	str	r1, [r3, #0]
 8004c8c:	e002      	b.n	8004c94 <_printf_i+0x1d4>
 8004c8e:	0670      	lsls	r0, r6, #25
 8004c90:	d5fb      	bpl.n	8004c8a <_printf_i+0x1ca>
 8004c92:	8019      	strh	r1, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	4615      	mov	r5, r2
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	e7ba      	b.n	8004c12 <_printf_i+0x152>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	602a      	str	r2, [r5, #0]
 8004ca4:	681d      	ldr	r5, [r3, #0]
 8004ca6:	6862      	ldr	r2, [r4, #4]
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 fed7 	bl	8005a5c <memchr>
 8004cae:	b108      	cbz	r0, 8004cb4 <_printf_i+0x1f4>
 8004cb0:	1b40      	subs	r0, r0, r5
 8004cb2:	6060      	str	r0, [r4, #4]
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbe:	e7a8      	b.n	8004c12 <_printf_i+0x152>
 8004cc0:	462a      	mov	r2, r5
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	47d0      	blx	sl
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d0ab      	beq.n	8004c26 <_printf_i+0x166>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	079b      	lsls	r3, r3, #30
 8004cd2:	d413      	bmi.n	8004cfc <_printf_i+0x23c>
 8004cd4:	68e0      	ldr	r0, [r4, #12]
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	4298      	cmp	r0, r3
 8004cda:	bfb8      	it	lt
 8004cdc:	4618      	movlt	r0, r3
 8004cde:	e7a4      	b.n	8004c2a <_printf_i+0x16a>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4632      	mov	r2, r6
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	47d0      	blx	sl
 8004cea:	3001      	adds	r0, #1
 8004cec:	d09b      	beq.n	8004c26 <_printf_i+0x166>
 8004cee:	3501      	adds	r5, #1
 8004cf0:	68e3      	ldr	r3, [r4, #12]
 8004cf2:	9903      	ldr	r1, [sp, #12]
 8004cf4:	1a5b      	subs	r3, r3, r1
 8004cf6:	42ab      	cmp	r3, r5
 8004cf8:	dcf2      	bgt.n	8004ce0 <_printf_i+0x220>
 8004cfa:	e7eb      	b.n	8004cd4 <_printf_i+0x214>
 8004cfc:	2500      	movs	r5, #0
 8004cfe:	f104 0619 	add.w	r6, r4, #25
 8004d02:	e7f5      	b.n	8004cf0 <_printf_i+0x230>
 8004d04:	08007262 	.word	0x08007262
 8004d08:	08007273 	.word	0x08007273

08004d0c <siprintf>:
 8004d0c:	b40e      	push	{r1, r2, r3}
 8004d0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d12:	b500      	push	{lr}
 8004d14:	b09c      	sub	sp, #112	; 0x70
 8004d16:	ab1d      	add	r3, sp, #116	; 0x74
 8004d18:	9002      	str	r0, [sp, #8]
 8004d1a:	9006      	str	r0, [sp, #24]
 8004d1c:	9107      	str	r1, [sp, #28]
 8004d1e:	9104      	str	r1, [sp, #16]
 8004d20:	4808      	ldr	r0, [pc, #32]	; (8004d44 <siprintf+0x38>)
 8004d22:	4909      	ldr	r1, [pc, #36]	; (8004d48 <siprintf+0x3c>)
 8004d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d28:	9105      	str	r1, [sp, #20]
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	a902      	add	r1, sp, #8
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	f001 fb7e 	bl	8006430 <_svfiprintf_r>
 8004d34:	2200      	movs	r2, #0
 8004d36:	9b02      	ldr	r3, [sp, #8]
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	b01c      	add	sp, #112	; 0x70
 8004d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d40:	b003      	add	sp, #12
 8004d42:	4770      	bx	lr
 8004d44:	20000020 	.word	0x20000020
 8004d48:	ffff0208 	.word	0xffff0208

08004d4c <quorem>:
 8004d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d50:	6903      	ldr	r3, [r0, #16]
 8004d52:	690c      	ldr	r4, [r1, #16]
 8004d54:	4607      	mov	r7, r0
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	f2c0 8082 	blt.w	8004e60 <quorem+0x114>
 8004d5c:	3c01      	subs	r4, #1
 8004d5e:	f100 0514 	add.w	r5, r0, #20
 8004d62:	f101 0814 	add.w	r8, r1, #20
 8004d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d74:	3301      	adds	r3, #1
 8004d76:	429a      	cmp	r2, r3
 8004d78:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d84:	d331      	bcc.n	8004dea <quorem+0x9e>
 8004d86:	f04f 0e00 	mov.w	lr, #0
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	46ac      	mov	ip, r5
 8004d8e:	46f2      	mov	sl, lr
 8004d90:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d94:	b293      	uxth	r3, r2
 8004d96:	fb06 e303 	mla	r3, r6, r3, lr
 8004d9a:	0c12      	lsrs	r2, r2, #16
 8004d9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	fb06 e202 	mla	r2, r6, r2, lr
 8004da6:	ebaa 0303 	sub.w	r3, sl, r3
 8004daa:	f8dc a000 	ldr.w	sl, [ip]
 8004dae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004db2:	fa1f fa8a 	uxth.w	sl, sl
 8004db6:	4453      	add	r3, sl
 8004db8:	f8dc a000 	ldr.w	sl, [ip]
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004dc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dcc:	4581      	cmp	r9, r0
 8004dce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8004dd6:	d2db      	bcs.n	8004d90 <quorem+0x44>
 8004dd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ddc:	b92b      	cbnz	r3, 8004dea <quorem+0x9e>
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	3b04      	subs	r3, #4
 8004de2:	429d      	cmp	r5, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	d32f      	bcc.n	8004e48 <quorem+0xfc>
 8004de8:	613c      	str	r4, [r7, #16]
 8004dea:	4638      	mov	r0, r7
 8004dec:	f001 f8d0 	bl	8005f90 <__mcmp>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	db25      	blt.n	8004e40 <quorem+0xf4>
 8004df4:	4628      	mov	r0, r5
 8004df6:	f04f 0c00 	mov.w	ip, #0
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	f858 1b04 	ldr.w	r1, [r8], #4
 8004e00:	f8d0 e000 	ldr.w	lr, [r0]
 8004e04:	b28b      	uxth	r3, r1
 8004e06:	ebac 0303 	sub.w	r3, ip, r3
 8004e0a:	fa1f f28e 	uxth.w	r2, lr
 8004e0e:	4413      	add	r3, r2
 8004e10:	0c0a      	lsrs	r2, r1, #16
 8004e12:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e20:	45c1      	cmp	r9, r8
 8004e22:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e26:	f840 3b04 	str.w	r3, [r0], #4
 8004e2a:	d2e7      	bcs.n	8004dfc <quorem+0xb0>
 8004e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e34:	b922      	cbnz	r2, 8004e40 <quorem+0xf4>
 8004e36:	3b04      	subs	r3, #4
 8004e38:	429d      	cmp	r5, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	d30a      	bcc.n	8004e54 <quorem+0x108>
 8004e3e:	613c      	str	r4, [r7, #16]
 8004e40:	4630      	mov	r0, r6
 8004e42:	b003      	add	sp, #12
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	3b04      	subs	r3, #4
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d1cb      	bne.n	8004de8 <quorem+0x9c>
 8004e50:	3c01      	subs	r4, #1
 8004e52:	e7c6      	b.n	8004de2 <quorem+0x96>
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	3b04      	subs	r3, #4
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d1f0      	bne.n	8004e3e <quorem+0xf2>
 8004e5c:	3c01      	subs	r4, #1
 8004e5e:	e7eb      	b.n	8004e38 <quorem+0xec>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e7ee      	b.n	8004e42 <quorem+0xf6>
 8004e64:	0000      	movs	r0, r0
	...

08004e68 <_dtoa_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e72:	b099      	sub	sp, #100	; 0x64
 8004e74:	4605      	mov	r5, r0
 8004e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e7e:	b974      	cbnz	r4, 8004e9e <_dtoa_r+0x36>
 8004e80:	2010      	movs	r0, #16
 8004e82:	f000 fde3 	bl	8005a4c <malloc>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6268      	str	r0, [r5, #36]	; 0x24
 8004e8a:	b920      	cbnz	r0, 8004e96 <_dtoa_r+0x2e>
 8004e8c:	21ea      	movs	r1, #234	; 0xea
 8004e8e:	4ba8      	ldr	r3, [pc, #672]	; (8005130 <_dtoa_r+0x2c8>)
 8004e90:	48a8      	ldr	r0, [pc, #672]	; (8005134 <_dtoa_r+0x2cc>)
 8004e92:	f001 fbdd 	bl	8006650 <__assert_func>
 8004e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e9a:	6004      	str	r4, [r0, #0]
 8004e9c:	60c4      	str	r4, [r0, #12]
 8004e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	b151      	cbz	r1, 8004eba <_dtoa_r+0x52>
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4093      	lsls	r3, r2
 8004eaa:	604a      	str	r2, [r1, #4]
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 fe30 	bl	8005b14 <_Bfree>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	1e3b      	subs	r3, r7, #0
 8004ebc:	bfaf      	iteee	ge
 8004ebe:	2300      	movge	r3, #0
 8004ec0:	2201      	movlt	r2, #1
 8004ec2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ec6:	9305      	strlt	r3, [sp, #20]
 8004ec8:	bfa8      	it	ge
 8004eca:	f8c8 3000 	strge.w	r3, [r8]
 8004ece:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004ed2:	4b99      	ldr	r3, [pc, #612]	; (8005138 <_dtoa_r+0x2d0>)
 8004ed4:	bfb8      	it	lt
 8004ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eda:	ea33 0309 	bics.w	r3, r3, r9
 8004ede:	d119      	bne.n	8004f14 <_dtoa_r+0xac>
 8004ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ee4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004eec:	4333      	orrs	r3, r6
 8004eee:	f000 857f 	beq.w	80059f0 <_dtoa_r+0xb88>
 8004ef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ef4:	b953      	cbnz	r3, 8004f0c <_dtoa_r+0xa4>
 8004ef6:	4b91      	ldr	r3, [pc, #580]	; (800513c <_dtoa_r+0x2d4>)
 8004ef8:	e022      	b.n	8004f40 <_dtoa_r+0xd8>
 8004efa:	4b91      	ldr	r3, [pc, #580]	; (8005140 <_dtoa_r+0x2d8>)
 8004efc:	9303      	str	r3, [sp, #12]
 8004efe:	3308      	adds	r3, #8
 8004f00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	b019      	add	sp, #100	; 0x64
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	4b8b      	ldr	r3, [pc, #556]	; (800513c <_dtoa_r+0x2d4>)
 8004f0e:	9303      	str	r3, [sp, #12]
 8004f10:	3303      	adds	r3, #3
 8004f12:	e7f5      	b.n	8004f00 <_dtoa_r+0x98>
 8004f14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	2300      	movs	r3, #0
 8004f24:	f7fb fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8004f28:	4680      	mov	r8, r0
 8004f2a:	b158      	cbz	r0, 8004f44 <_dtoa_r+0xdc>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8558 	beq.w	80059ea <_dtoa_r+0xb82>
 8004f3a:	4882      	ldr	r0, [pc, #520]	; (8005144 <_dtoa_r+0x2dc>)
 8004f3c:	6018      	str	r0, [r3, #0]
 8004f3e:	1e43      	subs	r3, r0, #1
 8004f40:	9303      	str	r3, [sp, #12]
 8004f42:	e7df      	b.n	8004f04 <_dtoa_r+0x9c>
 8004f44:	ab16      	add	r3, sp, #88	; 0x58
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	ab17      	add	r3, sp, #92	; 0x5c
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f52:	f001 f8c5 	bl	80060e0 <__d2b>
 8004f56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f5a:	4683      	mov	fp, r0
 8004f5c:	2c00      	cmp	r4, #0
 8004f5e:	d07f      	beq.n	8005060 <_dtoa_r+0x1f8>
 8004f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004f72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004f76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4b72      	ldr	r3, [pc, #456]	; (8005148 <_dtoa_r+0x2e0>)
 8004f7e:	f7fb f8f3 	bl	8000168 <__aeabi_dsub>
 8004f82:	a365      	add	r3, pc, #404	; (adr r3, 8005118 <_dtoa_r+0x2b0>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f7fb faa6 	bl	80004d8 <__aeabi_dmul>
 8004f8c:	a364      	add	r3, pc, #400	; (adr r3, 8005120 <_dtoa_r+0x2b8>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb f8eb 	bl	800016c <__adddf3>
 8004f96:	4606      	mov	r6, r0
 8004f98:	4620      	mov	r0, r4
 8004f9a:	460f      	mov	r7, r1
 8004f9c:	f7fb fa32 	bl	8000404 <__aeabi_i2d>
 8004fa0:	a361      	add	r3, pc, #388	; (adr r3, 8005128 <_dtoa_r+0x2c0>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb fa97 	bl	80004d8 <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4630      	mov	r0, r6
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	f7fb f8db 	bl	800016c <__adddf3>
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	f7fb fd3d 	bl	8000a38 <__aeabi_d2iz>
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4682      	mov	sl, r0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	f7fb fcf8 	bl	80009bc <__aeabi_dcmplt>
 8004fcc:	b148      	cbz	r0, 8004fe2 <_dtoa_r+0x17a>
 8004fce:	4650      	mov	r0, sl
 8004fd0:	f7fb fa18 	bl	8000404 <__aeabi_i2d>
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	f7fb fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8004fdc:	b908      	cbnz	r0, 8004fe2 <_dtoa_r+0x17a>
 8004fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fe2:	f1ba 0f16 	cmp.w	sl, #22
 8004fe6:	d858      	bhi.n	800509a <_dtoa_r+0x232>
 8004fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fec:	4b57      	ldr	r3, [pc, #348]	; (800514c <_dtoa_r+0x2e4>)
 8004fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb fce1 	bl	80009bc <__aeabi_dcmplt>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d04f      	beq.n	800509e <_dtoa_r+0x236>
 8004ffe:	2300      	movs	r3, #0
 8005000:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005004:	930f      	str	r3, [sp, #60]	; 0x3c
 8005006:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005008:	1b1c      	subs	r4, r3, r4
 800500a:	1e63      	subs	r3, r4, #1
 800500c:	9309      	str	r3, [sp, #36]	; 0x24
 800500e:	bf49      	itett	mi
 8005010:	f1c4 0301 	rsbmi	r3, r4, #1
 8005014:	2300      	movpl	r3, #0
 8005016:	9306      	strmi	r3, [sp, #24]
 8005018:	2300      	movmi	r3, #0
 800501a:	bf54      	ite	pl
 800501c:	9306      	strpl	r3, [sp, #24]
 800501e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005020:	f1ba 0f00 	cmp.w	sl, #0
 8005024:	db3d      	blt.n	80050a2 <_dtoa_r+0x23a>
 8005026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005028:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800502c:	4453      	add	r3, sl
 800502e:	9309      	str	r3, [sp, #36]	; 0x24
 8005030:	2300      	movs	r3, #0
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
 8005034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005036:	2b09      	cmp	r3, #9
 8005038:	f200 808c 	bhi.w	8005154 <_dtoa_r+0x2ec>
 800503c:	2b05      	cmp	r3, #5
 800503e:	bfc4      	itt	gt
 8005040:	3b04      	subgt	r3, #4
 8005042:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005046:	bfc8      	it	gt
 8005048:	2400      	movgt	r4, #0
 800504a:	f1a3 0302 	sub.w	r3, r3, #2
 800504e:	bfd8      	it	le
 8005050:	2401      	movle	r4, #1
 8005052:	2b03      	cmp	r3, #3
 8005054:	f200 808a 	bhi.w	800516c <_dtoa_r+0x304>
 8005058:	e8df f003 	tbb	[pc, r3]
 800505c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005060:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005064:	441c      	add	r4, r3
 8005066:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800506a:	2b20      	cmp	r3, #32
 800506c:	bfc3      	ittte	gt
 800506e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005072:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005076:	fa09 f303 	lslgt.w	r3, r9, r3
 800507a:	f1c3 0320 	rsble	r3, r3, #32
 800507e:	bfc6      	itte	gt
 8005080:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005084:	4318      	orrgt	r0, r3
 8005086:	fa06 f003 	lslle.w	r0, r6, r3
 800508a:	f7fb f9ab 	bl	80003e4 <__aeabi_ui2d>
 800508e:	2301      	movs	r3, #1
 8005090:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005094:	3c01      	subs	r4, #1
 8005096:	9313      	str	r3, [sp, #76]	; 0x4c
 8005098:	e76f      	b.n	8004f7a <_dtoa_r+0x112>
 800509a:	2301      	movs	r3, #1
 800509c:	e7b2      	b.n	8005004 <_dtoa_r+0x19c>
 800509e:	900f      	str	r0, [sp, #60]	; 0x3c
 80050a0:	e7b1      	b.n	8005006 <_dtoa_r+0x19e>
 80050a2:	9b06      	ldr	r3, [sp, #24]
 80050a4:	eba3 030a 	sub.w	r3, r3, sl
 80050a8:	9306      	str	r3, [sp, #24]
 80050aa:	f1ca 0300 	rsb	r3, sl, #0
 80050ae:	930a      	str	r3, [sp, #40]	; 0x28
 80050b0:	2300      	movs	r3, #0
 80050b2:	930e      	str	r3, [sp, #56]	; 0x38
 80050b4:	e7be      	b.n	8005034 <_dtoa_r+0x1cc>
 80050b6:	2300      	movs	r3, #0
 80050b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dc58      	bgt.n	8005172 <_dtoa_r+0x30a>
 80050c0:	f04f 0901 	mov.w	r9, #1
 80050c4:	464b      	mov	r3, r9
 80050c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80050ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80050ce:	2200      	movs	r2, #0
 80050d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80050d2:	6042      	str	r2, [r0, #4]
 80050d4:	2204      	movs	r2, #4
 80050d6:	f102 0614 	add.w	r6, r2, #20
 80050da:	429e      	cmp	r6, r3
 80050dc:	6841      	ldr	r1, [r0, #4]
 80050de:	d94e      	bls.n	800517e <_dtoa_r+0x316>
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fcd7 	bl	8005a94 <_Balloc>
 80050e6:	9003      	str	r0, [sp, #12]
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d14c      	bne.n	8005186 <_dtoa_r+0x31e>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <_dtoa_r+0x2e8>)
 80050f4:	e6cc      	b.n	8004e90 <_dtoa_r+0x28>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7de      	b.n	80050b8 <_dtoa_r+0x250>
 80050fa:	2300      	movs	r3, #0
 80050fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80050fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005100:	eb0a 0903 	add.w	r9, sl, r3
 8005104:	f109 0301 	add.w	r3, r9, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	9308      	str	r3, [sp, #32]
 800510c:	bfb8      	it	lt
 800510e:	2301      	movlt	r3, #1
 8005110:	e7dd      	b.n	80050ce <_dtoa_r+0x266>
 8005112:	2301      	movs	r3, #1
 8005114:	e7f2      	b.n	80050fc <_dtoa_r+0x294>
 8005116:	bf00      	nop
 8005118:	636f4361 	.word	0x636f4361
 800511c:	3fd287a7 	.word	0x3fd287a7
 8005120:	8b60c8b3 	.word	0x8b60c8b3
 8005124:	3fc68a28 	.word	0x3fc68a28
 8005128:	509f79fb 	.word	0x509f79fb
 800512c:	3fd34413 	.word	0x3fd34413
 8005130:	08007291 	.word	0x08007291
 8005134:	080072a8 	.word	0x080072a8
 8005138:	7ff00000 	.word	0x7ff00000
 800513c:	0800728d 	.word	0x0800728d
 8005140:	08007284 	.word	0x08007284
 8005144:	08007261 	.word	0x08007261
 8005148:	3ff80000 	.word	0x3ff80000
 800514c:	08007398 	.word	0x08007398
 8005150:	08007303 	.word	0x08007303
 8005154:	2401      	movs	r4, #1
 8005156:	2300      	movs	r3, #0
 8005158:	940b      	str	r4, [sp, #44]	; 0x2c
 800515a:	9322      	str	r3, [sp, #136]	; 0x88
 800515c:	f04f 39ff 	mov.w	r9, #4294967295
 8005160:	2200      	movs	r2, #0
 8005162:	2312      	movs	r3, #18
 8005164:	f8cd 9020 	str.w	r9, [sp, #32]
 8005168:	9223      	str	r2, [sp, #140]	; 0x8c
 800516a:	e7b0      	b.n	80050ce <_dtoa_r+0x266>
 800516c:	2301      	movs	r3, #1
 800516e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005170:	e7f4      	b.n	800515c <_dtoa_r+0x2f4>
 8005172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005176:	464b      	mov	r3, r9
 8005178:	f8cd 9020 	str.w	r9, [sp, #32]
 800517c:	e7a7      	b.n	80050ce <_dtoa_r+0x266>
 800517e:	3101      	adds	r1, #1
 8005180:	6041      	str	r1, [r0, #4]
 8005182:	0052      	lsls	r2, r2, #1
 8005184:	e7a7      	b.n	80050d6 <_dtoa_r+0x26e>
 8005186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005188:	9a03      	ldr	r2, [sp, #12]
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	9b08      	ldr	r3, [sp, #32]
 800518e:	2b0e      	cmp	r3, #14
 8005190:	f200 80a8 	bhi.w	80052e4 <_dtoa_r+0x47c>
 8005194:	2c00      	cmp	r4, #0
 8005196:	f000 80a5 	beq.w	80052e4 <_dtoa_r+0x47c>
 800519a:	f1ba 0f00 	cmp.w	sl, #0
 800519e:	dd34      	ble.n	800520a <_dtoa_r+0x3a2>
 80051a0:	4a9a      	ldr	r2, [pc, #616]	; (800540c <_dtoa_r+0x5a4>)
 80051a2:	f00a 030f 	and.w	r3, sl, #15
 80051a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80051ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80051ba:	d016      	beq.n	80051ea <_dtoa_r+0x382>
 80051bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051c0:	4b93      	ldr	r3, [pc, #588]	; (8005410 <_dtoa_r+0x5a8>)
 80051c2:	2703      	movs	r7, #3
 80051c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051c8:	f7fb fab0 	bl	800072c <__aeabi_ddiv>
 80051cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051d0:	f004 040f 	and.w	r4, r4, #15
 80051d4:	4e8e      	ldr	r6, [pc, #568]	; (8005410 <_dtoa_r+0x5a8>)
 80051d6:	b954      	cbnz	r4, 80051ee <_dtoa_r+0x386>
 80051d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e0:	f7fb faa4 	bl	800072c <__aeabi_ddiv>
 80051e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e8:	e029      	b.n	800523e <_dtoa_r+0x3d6>
 80051ea:	2702      	movs	r7, #2
 80051ec:	e7f2      	b.n	80051d4 <_dtoa_r+0x36c>
 80051ee:	07e1      	lsls	r1, r4, #31
 80051f0:	d508      	bpl.n	8005204 <_dtoa_r+0x39c>
 80051f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051fa:	f7fb f96d 	bl	80004d8 <__aeabi_dmul>
 80051fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005202:	3701      	adds	r7, #1
 8005204:	1064      	asrs	r4, r4, #1
 8005206:	3608      	adds	r6, #8
 8005208:	e7e5      	b.n	80051d6 <_dtoa_r+0x36e>
 800520a:	f000 80a5 	beq.w	8005358 <_dtoa_r+0x4f0>
 800520e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005212:	f1ca 0400 	rsb	r4, sl, #0
 8005216:	4b7d      	ldr	r3, [pc, #500]	; (800540c <_dtoa_r+0x5a4>)
 8005218:	f004 020f 	and.w	r2, r4, #15
 800521c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f7fb f958 	bl	80004d8 <__aeabi_dmul>
 8005228:	2702      	movs	r7, #2
 800522a:	2300      	movs	r3, #0
 800522c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005230:	4e77      	ldr	r6, [pc, #476]	; (8005410 <_dtoa_r+0x5a8>)
 8005232:	1124      	asrs	r4, r4, #4
 8005234:	2c00      	cmp	r4, #0
 8005236:	f040 8084 	bne.w	8005342 <_dtoa_r+0x4da>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1d2      	bne.n	80051e4 <_dtoa_r+0x37c>
 800523e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 808b 	beq.w	800535c <_dtoa_r+0x4f4>
 8005246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800524a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800524e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005252:	2200      	movs	r2, #0
 8005254:	4b6f      	ldr	r3, [pc, #444]	; (8005414 <_dtoa_r+0x5ac>)
 8005256:	f7fb fbb1 	bl	80009bc <__aeabi_dcmplt>
 800525a:	2800      	cmp	r0, #0
 800525c:	d07e      	beq.n	800535c <_dtoa_r+0x4f4>
 800525e:	9b08      	ldr	r3, [sp, #32]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d07b      	beq.n	800535c <_dtoa_r+0x4f4>
 8005264:	f1b9 0f00 	cmp.w	r9, #0
 8005268:	dd38      	ble.n	80052dc <_dtoa_r+0x474>
 800526a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800526e:	2200      	movs	r2, #0
 8005270:	4b69      	ldr	r3, [pc, #420]	; (8005418 <_dtoa_r+0x5b0>)
 8005272:	f7fb f931 	bl	80004d8 <__aeabi_dmul>
 8005276:	464c      	mov	r4, r9
 8005278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800527c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005280:	3701      	adds	r7, #1
 8005282:	4638      	mov	r0, r7
 8005284:	f7fb f8be 	bl	8000404 <__aeabi_i2d>
 8005288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800528c:	f7fb f924 	bl	80004d8 <__aeabi_dmul>
 8005290:	2200      	movs	r2, #0
 8005292:	4b62      	ldr	r3, [pc, #392]	; (800541c <_dtoa_r+0x5b4>)
 8005294:	f7fa ff6a 	bl	800016c <__adddf3>
 8005298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800529c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052a0:	9611      	str	r6, [sp, #68]	; 0x44
 80052a2:	2c00      	cmp	r4, #0
 80052a4:	d15d      	bne.n	8005362 <_dtoa_r+0x4fa>
 80052a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052aa:	2200      	movs	r2, #0
 80052ac:	4b5c      	ldr	r3, [pc, #368]	; (8005420 <_dtoa_r+0x5b8>)
 80052ae:	f7fa ff5b 	bl	8000168 <__aeabi_dsub>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ba:	4633      	mov	r3, r6
 80052bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052be:	f7fb fb9b 	bl	80009f8 <__aeabi_dcmpgt>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f040 829c 	bne.w	8005800 <_dtoa_r+0x998>
 80052c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052d2:	f7fb fb73 	bl	80009bc <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f040 8290 	bne.w	80057fc <_dtoa_r+0x994>
 80052dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f2c0 8152 	blt.w	8005590 <_dtoa_r+0x728>
 80052ec:	f1ba 0f0e 	cmp.w	sl, #14
 80052f0:	f300 814e 	bgt.w	8005590 <_dtoa_r+0x728>
 80052f4:	4b45      	ldr	r3, [pc, #276]	; (800540c <_dtoa_r+0x5a4>)
 80052f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005304:	2b00      	cmp	r3, #0
 8005306:	f280 80db 	bge.w	80054c0 <_dtoa_r+0x658>
 800530a:	9b08      	ldr	r3, [sp, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f300 80d7 	bgt.w	80054c0 <_dtoa_r+0x658>
 8005312:	f040 8272 	bne.w	80057fa <_dtoa_r+0x992>
 8005316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800531a:	2200      	movs	r2, #0
 800531c:	4b40      	ldr	r3, [pc, #256]	; (8005420 <_dtoa_r+0x5b8>)
 800531e:	f7fb f8db 	bl	80004d8 <__aeabi_dmul>
 8005322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005326:	f7fb fb5d 	bl	80009e4 <__aeabi_dcmpge>
 800532a:	9c08      	ldr	r4, [sp, #32]
 800532c:	4626      	mov	r6, r4
 800532e:	2800      	cmp	r0, #0
 8005330:	f040 8248 	bne.w	80057c4 <_dtoa_r+0x95c>
 8005334:	2331      	movs	r3, #49	; 0x31
 8005336:	9f03      	ldr	r7, [sp, #12]
 8005338:	f10a 0a01 	add.w	sl, sl, #1
 800533c:	f807 3b01 	strb.w	r3, [r7], #1
 8005340:	e244      	b.n	80057cc <_dtoa_r+0x964>
 8005342:	07e2      	lsls	r2, r4, #31
 8005344:	d505      	bpl.n	8005352 <_dtoa_r+0x4ea>
 8005346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800534a:	f7fb f8c5 	bl	80004d8 <__aeabi_dmul>
 800534e:	2301      	movs	r3, #1
 8005350:	3701      	adds	r7, #1
 8005352:	1064      	asrs	r4, r4, #1
 8005354:	3608      	adds	r6, #8
 8005356:	e76d      	b.n	8005234 <_dtoa_r+0x3cc>
 8005358:	2702      	movs	r7, #2
 800535a:	e770      	b.n	800523e <_dtoa_r+0x3d6>
 800535c:	46d0      	mov	r8, sl
 800535e:	9c08      	ldr	r4, [sp, #32]
 8005360:	e78f      	b.n	8005282 <_dtoa_r+0x41a>
 8005362:	9903      	ldr	r1, [sp, #12]
 8005364:	4b29      	ldr	r3, [pc, #164]	; (800540c <_dtoa_r+0x5a4>)
 8005366:	4421      	add	r1, r4
 8005368:	9112      	str	r1, [sp, #72]	; 0x48
 800536a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800536c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005378:	2900      	cmp	r1, #0
 800537a:	d055      	beq.n	8005428 <_dtoa_r+0x5c0>
 800537c:	2000      	movs	r0, #0
 800537e:	4929      	ldr	r1, [pc, #164]	; (8005424 <_dtoa_r+0x5bc>)
 8005380:	f7fb f9d4 	bl	800072c <__aeabi_ddiv>
 8005384:	463b      	mov	r3, r7
 8005386:	4632      	mov	r2, r6
 8005388:	f7fa feee 	bl	8000168 <__aeabi_dsub>
 800538c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005390:	9f03      	ldr	r7, [sp, #12]
 8005392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005396:	f7fb fb4f 	bl	8000a38 <__aeabi_d2iz>
 800539a:	4604      	mov	r4, r0
 800539c:	f7fb f832 	bl	8000404 <__aeabi_i2d>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053a8:	f7fa fede 	bl	8000168 <__aeabi_dsub>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	3430      	adds	r4, #48	; 0x30
 80053b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ba:	f807 4b01 	strb.w	r4, [r7], #1
 80053be:	f7fb fafd 	bl	80009bc <__aeabi_dcmplt>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d174      	bne.n	80054b0 <_dtoa_r+0x648>
 80053c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ca:	2000      	movs	r0, #0
 80053cc:	4911      	ldr	r1, [pc, #68]	; (8005414 <_dtoa_r+0x5ac>)
 80053ce:	f7fa fecb 	bl	8000168 <__aeabi_dsub>
 80053d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053d6:	f7fb faf1 	bl	80009bc <__aeabi_dcmplt>
 80053da:	2800      	cmp	r0, #0
 80053dc:	f040 80b7 	bne.w	800554e <_dtoa_r+0x6e6>
 80053e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053e2:	429f      	cmp	r7, r3
 80053e4:	f43f af7a 	beq.w	80052dc <_dtoa_r+0x474>
 80053e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053ec:	2200      	movs	r2, #0
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <_dtoa_r+0x5b0>)
 80053f0:	f7fb f872 	bl	80004d8 <__aeabi_dmul>
 80053f4:	2200      	movs	r2, #0
 80053f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <_dtoa_r+0x5b0>)
 8005400:	f7fb f86a 	bl	80004d8 <__aeabi_dmul>
 8005404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005408:	e7c3      	b.n	8005392 <_dtoa_r+0x52a>
 800540a:	bf00      	nop
 800540c:	08007398 	.word	0x08007398
 8005410:	08007370 	.word	0x08007370
 8005414:	3ff00000 	.word	0x3ff00000
 8005418:	40240000 	.word	0x40240000
 800541c:	401c0000 	.word	0x401c0000
 8005420:	40140000 	.word	0x40140000
 8005424:	3fe00000 	.word	0x3fe00000
 8005428:	4630      	mov	r0, r6
 800542a:	4639      	mov	r1, r7
 800542c:	f7fb f854 	bl	80004d8 <__aeabi_dmul>
 8005430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005432:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005436:	9c03      	ldr	r4, [sp, #12]
 8005438:	9314      	str	r3, [sp, #80]	; 0x50
 800543a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543e:	f7fb fafb 	bl	8000a38 <__aeabi_d2iz>
 8005442:	9015      	str	r0, [sp, #84]	; 0x54
 8005444:	f7fa ffde 	bl	8000404 <__aeabi_i2d>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005450:	f7fa fe8a 	bl	8000168 <__aeabi_dsub>
 8005454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005456:	4606      	mov	r6, r0
 8005458:	3330      	adds	r3, #48	; 0x30
 800545a:	f804 3b01 	strb.w	r3, [r4], #1
 800545e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005460:	460f      	mov	r7, r1
 8005462:	429c      	cmp	r4, r3
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	d124      	bne.n	80054b4 <_dtoa_r+0x64c>
 800546a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800546e:	4bb0      	ldr	r3, [pc, #704]	; (8005730 <_dtoa_r+0x8c8>)
 8005470:	f7fa fe7c 	bl	800016c <__adddf3>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fb fabc 	bl	80009f8 <__aeabi_dcmpgt>
 8005480:	2800      	cmp	r0, #0
 8005482:	d163      	bne.n	800554c <_dtoa_r+0x6e4>
 8005484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005488:	2000      	movs	r0, #0
 800548a:	49a9      	ldr	r1, [pc, #676]	; (8005730 <_dtoa_r+0x8c8>)
 800548c:	f7fa fe6c 	bl	8000168 <__aeabi_dsub>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4630      	mov	r0, r6
 8005496:	4639      	mov	r1, r7
 8005498:	f7fb fa90 	bl	80009bc <__aeabi_dcmplt>
 800549c:	2800      	cmp	r0, #0
 800549e:	f43f af1d 	beq.w	80052dc <_dtoa_r+0x474>
 80054a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054a4:	1e7b      	subs	r3, r7, #1
 80054a6:	9314      	str	r3, [sp, #80]	; 0x50
 80054a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d0f8      	beq.n	80054a2 <_dtoa_r+0x63a>
 80054b0:	46c2      	mov	sl, r8
 80054b2:	e03b      	b.n	800552c <_dtoa_r+0x6c4>
 80054b4:	4b9f      	ldr	r3, [pc, #636]	; (8005734 <_dtoa_r+0x8cc>)
 80054b6:	f7fb f80f 	bl	80004d8 <__aeabi_dmul>
 80054ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054be:	e7bc      	b.n	800543a <_dtoa_r+0x5d2>
 80054c0:	9f03      	ldr	r7, [sp, #12]
 80054c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054ca:	4640      	mov	r0, r8
 80054cc:	4649      	mov	r1, r9
 80054ce:	f7fb f92d 	bl	800072c <__aeabi_ddiv>
 80054d2:	f7fb fab1 	bl	8000a38 <__aeabi_d2iz>
 80054d6:	4604      	mov	r4, r0
 80054d8:	f7fa ff94 	bl	8000404 <__aeabi_i2d>
 80054dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e0:	f7fa fffa 	bl	80004d8 <__aeabi_dmul>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4640      	mov	r0, r8
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fa fe3c 	bl	8000168 <__aeabi_dsub>
 80054f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054f4:	f807 6b01 	strb.w	r6, [r7], #1
 80054f8:	9e03      	ldr	r6, [sp, #12]
 80054fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054fe:	1bbe      	subs	r6, r7, r6
 8005500:	45b4      	cmp	ip, r6
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	d136      	bne.n	8005576 <_dtoa_r+0x70e>
 8005508:	f7fa fe30 	bl	800016c <__adddf3>
 800550c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005510:	4680      	mov	r8, r0
 8005512:	4689      	mov	r9, r1
 8005514:	f7fb fa70 	bl	80009f8 <__aeabi_dcmpgt>
 8005518:	bb58      	cbnz	r0, 8005572 <_dtoa_r+0x70a>
 800551a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800551e:	4640      	mov	r0, r8
 8005520:	4649      	mov	r1, r9
 8005522:	f7fb fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8005526:	b108      	cbz	r0, 800552c <_dtoa_r+0x6c4>
 8005528:	07e1      	lsls	r1, r4, #31
 800552a:	d422      	bmi.n	8005572 <_dtoa_r+0x70a>
 800552c:	4628      	mov	r0, r5
 800552e:	4659      	mov	r1, fp
 8005530:	f000 faf0 	bl	8005b14 <_Bfree>
 8005534:	2300      	movs	r3, #0
 8005536:	703b      	strb	r3, [r7, #0]
 8005538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800553a:	f10a 0001 	add.w	r0, sl, #1
 800553e:	6018      	str	r0, [r3, #0]
 8005540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005542:	2b00      	cmp	r3, #0
 8005544:	f43f acde 	beq.w	8004f04 <_dtoa_r+0x9c>
 8005548:	601f      	str	r7, [r3, #0]
 800554a:	e4db      	b.n	8004f04 <_dtoa_r+0x9c>
 800554c:	4627      	mov	r7, r4
 800554e:	463b      	mov	r3, r7
 8005550:	461f      	mov	r7, r3
 8005552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005556:	2a39      	cmp	r2, #57	; 0x39
 8005558:	d107      	bne.n	800556a <_dtoa_r+0x702>
 800555a:	9a03      	ldr	r2, [sp, #12]
 800555c:	429a      	cmp	r2, r3
 800555e:	d1f7      	bne.n	8005550 <_dtoa_r+0x6e8>
 8005560:	2230      	movs	r2, #48	; 0x30
 8005562:	9903      	ldr	r1, [sp, #12]
 8005564:	f108 0801 	add.w	r8, r8, #1
 8005568:	700a      	strb	r2, [r1, #0]
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	3201      	adds	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e79e      	b.n	80054b0 <_dtoa_r+0x648>
 8005572:	46d0      	mov	r8, sl
 8005574:	e7eb      	b.n	800554e <_dtoa_r+0x6e6>
 8005576:	2200      	movs	r2, #0
 8005578:	4b6e      	ldr	r3, [pc, #440]	; (8005734 <_dtoa_r+0x8cc>)
 800557a:	f7fa ffad 	bl	80004d8 <__aeabi_dmul>
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	4680      	mov	r8, r0
 8005584:	4689      	mov	r9, r1
 8005586:	f7fb fa0f 	bl	80009a8 <__aeabi_dcmpeq>
 800558a:	2800      	cmp	r0, #0
 800558c:	d09b      	beq.n	80054c6 <_dtoa_r+0x65e>
 800558e:	e7cd      	b.n	800552c <_dtoa_r+0x6c4>
 8005590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005592:	2a00      	cmp	r2, #0
 8005594:	f000 80d0 	beq.w	8005738 <_dtoa_r+0x8d0>
 8005598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800559a:	2a01      	cmp	r2, #1
 800559c:	f300 80ae 	bgt.w	80056fc <_dtoa_r+0x894>
 80055a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	f000 80a6 	beq.w	80056f4 <_dtoa_r+0x88c>
 80055a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055ae:	9f06      	ldr	r7, [sp, #24]
 80055b0:	9a06      	ldr	r2, [sp, #24]
 80055b2:	2101      	movs	r1, #1
 80055b4:	441a      	add	r2, r3
 80055b6:	9206      	str	r2, [sp, #24]
 80055b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ba:	4628      	mov	r0, r5
 80055bc:	441a      	add	r2, r3
 80055be:	9209      	str	r2, [sp, #36]	; 0x24
 80055c0:	f000 fb5e 	bl	8005c80 <__i2b>
 80055c4:	4606      	mov	r6, r0
 80055c6:	2f00      	cmp	r7, #0
 80055c8:	dd0c      	ble.n	80055e4 <_dtoa_r+0x77c>
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	dd09      	ble.n	80055e4 <_dtoa_r+0x77c>
 80055d0:	42bb      	cmp	r3, r7
 80055d2:	bfa8      	it	ge
 80055d4:	463b      	movge	r3, r7
 80055d6:	9a06      	ldr	r2, [sp, #24]
 80055d8:	1aff      	subs	r7, r7, r3
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	9206      	str	r2, [sp, #24]
 80055de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	9309      	str	r3, [sp, #36]	; 0x24
 80055e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e6:	b1f3      	cbz	r3, 8005626 <_dtoa_r+0x7be>
 80055e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80a8 	beq.w	8005740 <_dtoa_r+0x8d8>
 80055f0:	2c00      	cmp	r4, #0
 80055f2:	dd10      	ble.n	8005616 <_dtoa_r+0x7ae>
 80055f4:	4631      	mov	r1, r6
 80055f6:	4622      	mov	r2, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 fbff 	bl	8005dfc <__pow5mult>
 80055fe:	465a      	mov	r2, fp
 8005600:	4601      	mov	r1, r0
 8005602:	4606      	mov	r6, r0
 8005604:	4628      	mov	r0, r5
 8005606:	f000 fb51 	bl	8005cac <__multiply>
 800560a:	4680      	mov	r8, r0
 800560c:	4659      	mov	r1, fp
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fa80 	bl	8005b14 <_Bfree>
 8005614:	46c3      	mov	fp, r8
 8005616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005618:	1b1a      	subs	r2, r3, r4
 800561a:	d004      	beq.n	8005626 <_dtoa_r+0x7be>
 800561c:	4659      	mov	r1, fp
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fbec 	bl	8005dfc <__pow5mult>
 8005624:	4683      	mov	fp, r0
 8005626:	2101      	movs	r1, #1
 8005628:	4628      	mov	r0, r5
 800562a:	f000 fb29 	bl	8005c80 <__i2b>
 800562e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005630:	4604      	mov	r4, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f340 8086 	ble.w	8005744 <_dtoa_r+0x8dc>
 8005638:	461a      	mov	r2, r3
 800563a:	4601      	mov	r1, r0
 800563c:	4628      	mov	r0, r5
 800563e:	f000 fbdd 	bl	8005dfc <__pow5mult>
 8005642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005644:	4604      	mov	r4, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	dd7f      	ble.n	800574a <_dtoa_r+0x8e2>
 800564a:	f04f 0800 	mov.w	r8, #0
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005654:	6918      	ldr	r0, [r3, #16]
 8005656:	f000 fac5 	bl	8005be4 <__hi0bits>
 800565a:	f1c0 0020 	rsb	r0, r0, #32
 800565e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005660:	4418      	add	r0, r3
 8005662:	f010 001f 	ands.w	r0, r0, #31
 8005666:	f000 8092 	beq.w	800578e <_dtoa_r+0x926>
 800566a:	f1c0 0320 	rsb	r3, r0, #32
 800566e:	2b04      	cmp	r3, #4
 8005670:	f340 808a 	ble.w	8005788 <_dtoa_r+0x920>
 8005674:	f1c0 001c 	rsb	r0, r0, #28
 8005678:	9b06      	ldr	r3, [sp, #24]
 800567a:	4407      	add	r7, r0
 800567c:	4403      	add	r3, r0
 800567e:	9306      	str	r3, [sp, #24]
 8005680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005682:	4403      	add	r3, r0
 8005684:	9309      	str	r3, [sp, #36]	; 0x24
 8005686:	9b06      	ldr	r3, [sp, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	dd05      	ble.n	8005698 <_dtoa_r+0x830>
 800568c:	4659      	mov	r1, fp
 800568e:	461a      	mov	r2, r3
 8005690:	4628      	mov	r0, r5
 8005692:	f000 fc0d 	bl	8005eb0 <__lshift>
 8005696:	4683      	mov	fp, r0
 8005698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	dd05      	ble.n	80056aa <_dtoa_r+0x842>
 800569e:	4621      	mov	r1, r4
 80056a0:	461a      	mov	r2, r3
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 fc04 	bl	8005eb0 <__lshift>
 80056a8:	4604      	mov	r4, r0
 80056aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d070      	beq.n	8005792 <_dtoa_r+0x92a>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4658      	mov	r0, fp
 80056b4:	f000 fc6c 	bl	8005f90 <__mcmp>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	da6a      	bge.n	8005792 <_dtoa_r+0x92a>
 80056bc:	2300      	movs	r3, #0
 80056be:	4659      	mov	r1, fp
 80056c0:	220a      	movs	r2, #10
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 fa48 	bl	8005b58 <__multadd>
 80056c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ca:	4683      	mov	fp, r0
 80056cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8194 	beq.w	80059fe <_dtoa_r+0xb96>
 80056d6:	4631      	mov	r1, r6
 80056d8:	2300      	movs	r3, #0
 80056da:	220a      	movs	r2, #10
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 fa3b 	bl	8005b58 <__multadd>
 80056e2:	f1b9 0f00 	cmp.w	r9, #0
 80056e6:	4606      	mov	r6, r0
 80056e8:	f300 8093 	bgt.w	8005812 <_dtoa_r+0x9aa>
 80056ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	dc57      	bgt.n	80057a2 <_dtoa_r+0x93a>
 80056f2:	e08e      	b.n	8005812 <_dtoa_r+0x9aa>
 80056f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056fa:	e757      	b.n	80055ac <_dtoa_r+0x744>
 80056fc:	9b08      	ldr	r3, [sp, #32]
 80056fe:	1e5c      	subs	r4, r3, #1
 8005700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005702:	42a3      	cmp	r3, r4
 8005704:	bfb7      	itett	lt
 8005706:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005708:	1b1c      	subge	r4, r3, r4
 800570a:	1ae2      	sublt	r2, r4, r3
 800570c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800570e:	bfbe      	ittt	lt
 8005710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005712:	189b      	addlt	r3, r3, r2
 8005714:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005716:	9b08      	ldr	r3, [sp, #32]
 8005718:	bfb8      	it	lt
 800571a:	2400      	movlt	r4, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	bfbb      	ittet	lt
 8005720:	9b06      	ldrlt	r3, [sp, #24]
 8005722:	9a08      	ldrlt	r2, [sp, #32]
 8005724:	9f06      	ldrge	r7, [sp, #24]
 8005726:	1a9f      	sublt	r7, r3, r2
 8005728:	bfac      	ite	ge
 800572a:	9b08      	ldrge	r3, [sp, #32]
 800572c:	2300      	movlt	r3, #0
 800572e:	e73f      	b.n	80055b0 <_dtoa_r+0x748>
 8005730:	3fe00000 	.word	0x3fe00000
 8005734:	40240000 	.word	0x40240000
 8005738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800573a:	9f06      	ldr	r7, [sp, #24]
 800573c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800573e:	e742      	b.n	80055c6 <_dtoa_r+0x75e>
 8005740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005742:	e76b      	b.n	800561c <_dtoa_r+0x7b4>
 8005744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005746:	2b01      	cmp	r3, #1
 8005748:	dc19      	bgt.n	800577e <_dtoa_r+0x916>
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	b9bb      	cbnz	r3, 800577e <_dtoa_r+0x916>
 800574e:	9b05      	ldr	r3, [sp, #20]
 8005750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005754:	b99b      	cbnz	r3, 800577e <_dtoa_r+0x916>
 8005756:	9b05      	ldr	r3, [sp, #20]
 8005758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800575c:	0d1b      	lsrs	r3, r3, #20
 800575e:	051b      	lsls	r3, r3, #20
 8005760:	b183      	cbz	r3, 8005784 <_dtoa_r+0x91c>
 8005762:	f04f 0801 	mov.w	r8, #1
 8005766:	9b06      	ldr	r3, [sp, #24]
 8005768:	3301      	adds	r3, #1
 800576a:	9306      	str	r3, [sp, #24]
 800576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576e:	3301      	adds	r3, #1
 8005770:	9309      	str	r3, [sp, #36]	; 0x24
 8005772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	f47f af6a 	bne.w	800564e <_dtoa_r+0x7e6>
 800577a:	2001      	movs	r0, #1
 800577c:	e76f      	b.n	800565e <_dtoa_r+0x7f6>
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	e7f6      	b.n	8005772 <_dtoa_r+0x90a>
 8005784:	4698      	mov	r8, r3
 8005786:	e7f4      	b.n	8005772 <_dtoa_r+0x90a>
 8005788:	f43f af7d 	beq.w	8005686 <_dtoa_r+0x81e>
 800578c:	4618      	mov	r0, r3
 800578e:	301c      	adds	r0, #28
 8005790:	e772      	b.n	8005678 <_dtoa_r+0x810>
 8005792:	9b08      	ldr	r3, [sp, #32]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dc36      	bgt.n	8005806 <_dtoa_r+0x99e>
 8005798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800579a:	2b02      	cmp	r3, #2
 800579c:	dd33      	ble.n	8005806 <_dtoa_r+0x99e>
 800579e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	d10d      	bne.n	80057c4 <_dtoa_r+0x95c>
 80057a8:	4621      	mov	r1, r4
 80057aa:	464b      	mov	r3, r9
 80057ac:	2205      	movs	r2, #5
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f9d2 	bl	8005b58 <__multadd>
 80057b4:	4601      	mov	r1, r0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4658      	mov	r0, fp
 80057ba:	f000 fbe9 	bl	8005f90 <__mcmp>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f73f adb8 	bgt.w	8005334 <_dtoa_r+0x4cc>
 80057c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057c6:	9f03      	ldr	r7, [sp, #12]
 80057c8:	ea6f 0a03 	mvn.w	sl, r3
 80057cc:	f04f 0800 	mov.w	r8, #0
 80057d0:	4621      	mov	r1, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 f99e 	bl	8005b14 <_Bfree>
 80057d8:	2e00      	cmp	r6, #0
 80057da:	f43f aea7 	beq.w	800552c <_dtoa_r+0x6c4>
 80057de:	f1b8 0f00 	cmp.w	r8, #0
 80057e2:	d005      	beq.n	80057f0 <_dtoa_r+0x988>
 80057e4:	45b0      	cmp	r8, r6
 80057e6:	d003      	beq.n	80057f0 <_dtoa_r+0x988>
 80057e8:	4641      	mov	r1, r8
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f992 	bl	8005b14 <_Bfree>
 80057f0:	4631      	mov	r1, r6
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 f98e 	bl	8005b14 <_Bfree>
 80057f8:	e698      	b.n	800552c <_dtoa_r+0x6c4>
 80057fa:	2400      	movs	r4, #0
 80057fc:	4626      	mov	r6, r4
 80057fe:	e7e1      	b.n	80057c4 <_dtoa_r+0x95c>
 8005800:	46c2      	mov	sl, r8
 8005802:	4626      	mov	r6, r4
 8005804:	e596      	b.n	8005334 <_dtoa_r+0x4cc>
 8005806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80fd 	beq.w	8005a0c <_dtoa_r+0xba4>
 8005812:	2f00      	cmp	r7, #0
 8005814:	dd05      	ble.n	8005822 <_dtoa_r+0x9ba>
 8005816:	4631      	mov	r1, r6
 8005818:	463a      	mov	r2, r7
 800581a:	4628      	mov	r0, r5
 800581c:	f000 fb48 	bl	8005eb0 <__lshift>
 8005820:	4606      	mov	r6, r0
 8005822:	f1b8 0f00 	cmp.w	r8, #0
 8005826:	d05c      	beq.n	80058e2 <_dtoa_r+0xa7a>
 8005828:	4628      	mov	r0, r5
 800582a:	6871      	ldr	r1, [r6, #4]
 800582c:	f000 f932 	bl	8005a94 <_Balloc>
 8005830:	4607      	mov	r7, r0
 8005832:	b928      	cbnz	r0, 8005840 <_dtoa_r+0x9d8>
 8005834:	4602      	mov	r2, r0
 8005836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800583a:	4b7f      	ldr	r3, [pc, #508]	; (8005a38 <_dtoa_r+0xbd0>)
 800583c:	f7ff bb28 	b.w	8004e90 <_dtoa_r+0x28>
 8005840:	6932      	ldr	r2, [r6, #16]
 8005842:	f106 010c 	add.w	r1, r6, #12
 8005846:	3202      	adds	r2, #2
 8005848:	0092      	lsls	r2, r2, #2
 800584a:	300c      	adds	r0, #12
 800584c:	f000 f914 	bl	8005a78 <memcpy>
 8005850:	2201      	movs	r2, #1
 8005852:	4639      	mov	r1, r7
 8005854:	4628      	mov	r0, r5
 8005856:	f000 fb2b 	bl	8005eb0 <__lshift>
 800585a:	46b0      	mov	r8, r6
 800585c:	4606      	mov	r6, r0
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	444b      	add	r3, r9
 8005868:	930a      	str	r3, [sp, #40]	; 0x28
 800586a:	9b04      	ldr	r3, [sp, #16]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	9309      	str	r3, [sp, #36]	; 0x24
 8005872:	9b08      	ldr	r3, [sp, #32]
 8005874:	4621      	mov	r1, r4
 8005876:	3b01      	subs	r3, #1
 8005878:	4658      	mov	r0, fp
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	f7ff fa66 	bl	8004d4c <quorem>
 8005880:	4603      	mov	r3, r0
 8005882:	4641      	mov	r1, r8
 8005884:	3330      	adds	r3, #48	; 0x30
 8005886:	9006      	str	r0, [sp, #24]
 8005888:	4658      	mov	r0, fp
 800588a:	930b      	str	r3, [sp, #44]	; 0x2c
 800588c:	f000 fb80 	bl	8005f90 <__mcmp>
 8005890:	4632      	mov	r2, r6
 8005892:	4681      	mov	r9, r0
 8005894:	4621      	mov	r1, r4
 8005896:	4628      	mov	r0, r5
 8005898:	f000 fb96 	bl	8005fc8 <__mdiff>
 800589c:	68c2      	ldr	r2, [r0, #12]
 800589e:	4607      	mov	r7, r0
 80058a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a2:	bb02      	cbnz	r2, 80058e6 <_dtoa_r+0xa7e>
 80058a4:	4601      	mov	r1, r0
 80058a6:	4658      	mov	r0, fp
 80058a8:	f000 fb72 	bl	8005f90 <__mcmp>
 80058ac:	4602      	mov	r2, r0
 80058ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058b0:	4639      	mov	r1, r7
 80058b2:	4628      	mov	r0, r5
 80058b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80058b8:	f000 f92c 	bl	8005b14 <_Bfree>
 80058bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058c0:	9f08      	ldr	r7, [sp, #32]
 80058c2:	ea43 0102 	orr.w	r1, r3, r2
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	430b      	orrs	r3, r1
 80058ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058cc:	d10d      	bne.n	80058ea <_dtoa_r+0xa82>
 80058ce:	2b39      	cmp	r3, #57	; 0x39
 80058d0:	d029      	beq.n	8005926 <_dtoa_r+0xabe>
 80058d2:	f1b9 0f00 	cmp.w	r9, #0
 80058d6:	dd01      	ble.n	80058dc <_dtoa_r+0xa74>
 80058d8:	9b06      	ldr	r3, [sp, #24]
 80058da:	3331      	adds	r3, #49	; 0x31
 80058dc:	9a04      	ldr	r2, [sp, #16]
 80058de:	7013      	strb	r3, [r2, #0]
 80058e0:	e776      	b.n	80057d0 <_dtoa_r+0x968>
 80058e2:	4630      	mov	r0, r6
 80058e4:	e7b9      	b.n	800585a <_dtoa_r+0x9f2>
 80058e6:	2201      	movs	r2, #1
 80058e8:	e7e2      	b.n	80058b0 <_dtoa_r+0xa48>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	db06      	blt.n	80058fe <_dtoa_r+0xa96>
 80058f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058f2:	ea41 0909 	orr.w	r9, r1, r9
 80058f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058f8:	ea59 0101 	orrs.w	r1, r9, r1
 80058fc:	d120      	bne.n	8005940 <_dtoa_r+0xad8>
 80058fe:	2a00      	cmp	r2, #0
 8005900:	ddec      	ble.n	80058dc <_dtoa_r+0xa74>
 8005902:	4659      	mov	r1, fp
 8005904:	2201      	movs	r2, #1
 8005906:	4628      	mov	r0, r5
 8005908:	9308      	str	r3, [sp, #32]
 800590a:	f000 fad1 	bl	8005eb0 <__lshift>
 800590e:	4621      	mov	r1, r4
 8005910:	4683      	mov	fp, r0
 8005912:	f000 fb3d 	bl	8005f90 <__mcmp>
 8005916:	2800      	cmp	r0, #0
 8005918:	9b08      	ldr	r3, [sp, #32]
 800591a:	dc02      	bgt.n	8005922 <_dtoa_r+0xaba>
 800591c:	d1de      	bne.n	80058dc <_dtoa_r+0xa74>
 800591e:	07da      	lsls	r2, r3, #31
 8005920:	d5dc      	bpl.n	80058dc <_dtoa_r+0xa74>
 8005922:	2b39      	cmp	r3, #57	; 0x39
 8005924:	d1d8      	bne.n	80058d8 <_dtoa_r+0xa70>
 8005926:	2339      	movs	r3, #57	; 0x39
 8005928:	9a04      	ldr	r2, [sp, #16]
 800592a:	7013      	strb	r3, [r2, #0]
 800592c:	463b      	mov	r3, r7
 800592e:	461f      	mov	r7, r3
 8005930:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005934:	3b01      	subs	r3, #1
 8005936:	2a39      	cmp	r2, #57	; 0x39
 8005938:	d050      	beq.n	80059dc <_dtoa_r+0xb74>
 800593a:	3201      	adds	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e747      	b.n	80057d0 <_dtoa_r+0x968>
 8005940:	2a00      	cmp	r2, #0
 8005942:	dd03      	ble.n	800594c <_dtoa_r+0xae4>
 8005944:	2b39      	cmp	r3, #57	; 0x39
 8005946:	d0ee      	beq.n	8005926 <_dtoa_r+0xabe>
 8005948:	3301      	adds	r3, #1
 800594a:	e7c7      	b.n	80058dc <_dtoa_r+0xa74>
 800594c:	9a08      	ldr	r2, [sp, #32]
 800594e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005954:	428a      	cmp	r2, r1
 8005956:	d02a      	beq.n	80059ae <_dtoa_r+0xb46>
 8005958:	4659      	mov	r1, fp
 800595a:	2300      	movs	r3, #0
 800595c:	220a      	movs	r2, #10
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f8fa 	bl	8005b58 <__multadd>
 8005964:	45b0      	cmp	r8, r6
 8005966:	4683      	mov	fp, r0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	f04f 020a 	mov.w	r2, #10
 8005970:	4641      	mov	r1, r8
 8005972:	4628      	mov	r0, r5
 8005974:	d107      	bne.n	8005986 <_dtoa_r+0xb1e>
 8005976:	f000 f8ef 	bl	8005b58 <__multadd>
 800597a:	4680      	mov	r8, r0
 800597c:	4606      	mov	r6, r0
 800597e:	9b08      	ldr	r3, [sp, #32]
 8005980:	3301      	adds	r3, #1
 8005982:	9308      	str	r3, [sp, #32]
 8005984:	e775      	b.n	8005872 <_dtoa_r+0xa0a>
 8005986:	f000 f8e7 	bl	8005b58 <__multadd>
 800598a:	4631      	mov	r1, r6
 800598c:	4680      	mov	r8, r0
 800598e:	2300      	movs	r3, #0
 8005990:	220a      	movs	r2, #10
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f8e0 	bl	8005b58 <__multadd>
 8005998:	4606      	mov	r6, r0
 800599a:	e7f0      	b.n	800597e <_dtoa_r+0xb16>
 800599c:	f1b9 0f00 	cmp.w	r9, #0
 80059a0:	bfcc      	ite	gt
 80059a2:	464f      	movgt	r7, r9
 80059a4:	2701      	movle	r7, #1
 80059a6:	f04f 0800 	mov.w	r8, #0
 80059aa:	9a03      	ldr	r2, [sp, #12]
 80059ac:	4417      	add	r7, r2
 80059ae:	4659      	mov	r1, fp
 80059b0:	2201      	movs	r2, #1
 80059b2:	4628      	mov	r0, r5
 80059b4:	9308      	str	r3, [sp, #32]
 80059b6:	f000 fa7b 	bl	8005eb0 <__lshift>
 80059ba:	4621      	mov	r1, r4
 80059bc:	4683      	mov	fp, r0
 80059be:	f000 fae7 	bl	8005f90 <__mcmp>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	dcb2      	bgt.n	800592c <_dtoa_r+0xac4>
 80059c6:	d102      	bne.n	80059ce <_dtoa_r+0xb66>
 80059c8:	9b08      	ldr	r3, [sp, #32]
 80059ca:	07db      	lsls	r3, r3, #31
 80059cc:	d4ae      	bmi.n	800592c <_dtoa_r+0xac4>
 80059ce:	463b      	mov	r3, r7
 80059d0:	461f      	mov	r7, r3
 80059d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059d6:	2a30      	cmp	r2, #48	; 0x30
 80059d8:	d0fa      	beq.n	80059d0 <_dtoa_r+0xb68>
 80059da:	e6f9      	b.n	80057d0 <_dtoa_r+0x968>
 80059dc:	9a03      	ldr	r2, [sp, #12]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d1a5      	bne.n	800592e <_dtoa_r+0xac6>
 80059e2:	2331      	movs	r3, #49	; 0x31
 80059e4:	f10a 0a01 	add.w	sl, sl, #1
 80059e8:	e779      	b.n	80058de <_dtoa_r+0xa76>
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <_dtoa_r+0xbd4>)
 80059ec:	f7ff baa8 	b.w	8004f40 <_dtoa_r+0xd8>
 80059f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f47f aa81 	bne.w	8004efa <_dtoa_r+0x92>
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <_dtoa_r+0xbd8>)
 80059fa:	f7ff baa1 	b.w	8004f40 <_dtoa_r+0xd8>
 80059fe:	f1b9 0f00 	cmp.w	r9, #0
 8005a02:	dc03      	bgt.n	8005a0c <_dtoa_r+0xba4>
 8005a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	f73f aecb 	bgt.w	80057a2 <_dtoa_r+0x93a>
 8005a0c:	9f03      	ldr	r7, [sp, #12]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4658      	mov	r0, fp
 8005a12:	f7ff f99b 	bl	8004d4c <quorem>
 8005a16:	9a03      	ldr	r2, [sp, #12]
 8005a18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a1c:	f807 3b01 	strb.w	r3, [r7], #1
 8005a20:	1aba      	subs	r2, r7, r2
 8005a22:	4591      	cmp	r9, r2
 8005a24:	ddba      	ble.n	800599c <_dtoa_r+0xb34>
 8005a26:	4659      	mov	r1, fp
 8005a28:	2300      	movs	r3, #0
 8005a2a:	220a      	movs	r2, #10
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f893 	bl	8005b58 <__multadd>
 8005a32:	4683      	mov	fp, r0
 8005a34:	e7eb      	b.n	8005a0e <_dtoa_r+0xba6>
 8005a36:	bf00      	nop
 8005a38:	08007303 	.word	0x08007303
 8005a3c:	08007260 	.word	0x08007260
 8005a40:	08007284 	.word	0x08007284

08005a44 <_localeconv_r>:
 8005a44:	4800      	ldr	r0, [pc, #0]	; (8005a48 <_localeconv_r+0x4>)
 8005a46:	4770      	bx	lr
 8005a48:	20000174 	.word	0x20000174

08005a4c <malloc>:
 8005a4c:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <malloc+0xc>)
 8005a4e:	4601      	mov	r1, r0
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	f000 bc1d 	b.w	8006290 <_malloc_r>
 8005a56:	bf00      	nop
 8005a58:	20000020 	.word	0x20000020

08005a5c <memchr>:
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	b2c9      	uxtb	r1, r1
 8005a62:	4402      	add	r2, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	d101      	bne.n	8005a6e <memchr+0x12>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e003      	b.n	8005a76 <memchr+0x1a>
 8005a6e:	7804      	ldrb	r4, [r0, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	428c      	cmp	r4, r1
 8005a74:	d1f6      	bne.n	8005a64 <memchr+0x8>
 8005a76:	bd10      	pop	{r4, pc}

08005a78 <memcpy>:
 8005a78:	440a      	add	r2, r1
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a80:	d100      	bne.n	8005a84 <memcpy+0xc>
 8005a82:	4770      	bx	lr
 8005a84:	b510      	push	{r4, lr}
 8005a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a90:	d1f9      	bne.n	8005a86 <memcpy+0xe>
 8005a92:	bd10      	pop	{r4, pc}

08005a94 <_Balloc>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	b976      	cbnz	r6, 8005abc <_Balloc+0x28>
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff ffd4 	bl	8005a4c <malloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6260      	str	r0, [r4, #36]	; 0x24
 8005aa8:	b920      	cbnz	r0, 8005ab4 <_Balloc+0x20>
 8005aaa:	2166      	movs	r1, #102	; 0x66
 8005aac:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <_Balloc+0x78>)
 8005aae:	4818      	ldr	r0, [pc, #96]	; (8005b10 <_Balloc+0x7c>)
 8005ab0:	f000 fdce 	bl	8006650 <__assert_func>
 8005ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab8:	6006      	str	r6, [r0, #0]
 8005aba:	60c6      	str	r6, [r0, #12]
 8005abc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005abe:	68f3      	ldr	r3, [r6, #12]
 8005ac0:	b183      	cbz	r3, 8005ae4 <_Balloc+0x50>
 8005ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aca:	b9b8      	cbnz	r0, 8005afc <_Balloc+0x68>
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f605 	lsl.w	r6, r1, r5
 8005ad2:	1d72      	adds	r2, r6, #5
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	f000 fb5e 	bl	8006198 <_calloc_r>
 8005adc:	b160      	cbz	r0, 8005af8 <_Balloc+0x64>
 8005ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ae2:	e00e      	b.n	8005b02 <_Balloc+0x6e>
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fb55 	bl	8006198 <_calloc_r>
 8005aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af0:	60f0      	str	r0, [r6, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e4      	bne.n	8005ac2 <_Balloc+0x2e>
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b02:	2300      	movs	r3, #0
 8005b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b08:	e7f7      	b.n	8005afa <_Balloc+0x66>
 8005b0a:	bf00      	nop
 8005b0c:	08007291 	.word	0x08007291
 8005b10:	08007314 	.word	0x08007314

08005b14 <_Bfree>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b976      	cbnz	r6, 8005b3c <_Bfree+0x28>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f7ff ff94 	bl	8005a4c <malloc>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6268      	str	r0, [r5, #36]	; 0x24
 8005b28:	b920      	cbnz	r0, 8005b34 <_Bfree+0x20>
 8005b2a:	218a      	movs	r1, #138	; 0x8a
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <_Bfree+0x3c>)
 8005b2e:	4809      	ldr	r0, [pc, #36]	; (8005b54 <_Bfree+0x40>)
 8005b30:	f000 fd8e 	bl	8006650 <__assert_func>
 8005b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b38:	6006      	str	r6, [r0, #0]
 8005b3a:	60c6      	str	r6, [r0, #12]
 8005b3c:	b13c      	cbz	r4, 8005b4e <_Bfree+0x3a>
 8005b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b48:	6021      	str	r1, [r4, #0]
 8005b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	08007291 	.word	0x08007291
 8005b54:	08007314 	.word	0x08007314

08005b58 <__multadd>:
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	461e      	mov	r6, r3
 8005b62:	2000      	movs	r0, #0
 8005b64:	690d      	ldr	r5, [r1, #16]
 8005b66:	f101 0c14 	add.w	ip, r1, #20
 8005b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005b6e:	3001      	adds	r0, #1
 8005b70:	b299      	uxth	r1, r3
 8005b72:	fb02 6101 	mla	r1, r2, r1, r6
 8005b76:	0c1e      	lsrs	r6, r3, #16
 8005b78:	0c0b      	lsrs	r3, r1, #16
 8005b7a:	fb02 3306 	mla	r3, r2, r6, r3
 8005b7e:	b289      	uxth	r1, r1
 8005b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b84:	4285      	cmp	r5, r0
 8005b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b8e:	dcec      	bgt.n	8005b6a <__multadd+0x12>
 8005b90:	b30e      	cbz	r6, 8005bd6 <__multadd+0x7e>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc19      	bgt.n	8005bcc <__multadd+0x74>
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	f7ff ff79 	bl	8005a94 <_Balloc>
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__multadd+0x5a>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	21b5      	movs	r1, #181	; 0xb5
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <__multadd+0x84>)
 8005bac:	480c      	ldr	r0, [pc, #48]	; (8005be0 <__multadd+0x88>)
 8005bae:	f000 fd4f 	bl	8006650 <__assert_func>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	f104 010c 	add.w	r1, r4, #12
 8005bb8:	3202      	adds	r2, #2
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f7ff ff5b 	bl	8005a78 <memcpy>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ffa5 	bl	8005b14 <_Bfree>
 8005bca:	4644      	mov	r4, r8
 8005bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	615e      	str	r6, [r3, #20]
 8005bd4:	6125      	str	r5, [r4, #16]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	08007303 	.word	0x08007303
 8005be0:	08007314 	.word	0x08007314

08005be4 <__hi0bits>:
 8005be4:	0c02      	lsrs	r2, r0, #16
 8005be6:	0412      	lsls	r2, r2, #16
 8005be8:	4603      	mov	r3, r0
 8005bea:	b9ca      	cbnz	r2, 8005c20 <__hi0bits+0x3c>
 8005bec:	0403      	lsls	r3, r0, #16
 8005bee:	2010      	movs	r0, #16
 8005bf0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bf4:	bf04      	itt	eq
 8005bf6:	021b      	lsleq	r3, r3, #8
 8005bf8:	3008      	addeq	r0, #8
 8005bfa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bfe:	bf04      	itt	eq
 8005c00:	011b      	lsleq	r3, r3, #4
 8005c02:	3004      	addeq	r0, #4
 8005c04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c08:	bf04      	itt	eq
 8005c0a:	009b      	lsleq	r3, r3, #2
 8005c0c:	3002      	addeq	r0, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	db05      	blt.n	8005c1e <__hi0bits+0x3a>
 8005c12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c16:	f100 0001 	add.w	r0, r0, #1
 8005c1a:	bf08      	it	eq
 8005c1c:	2020      	moveq	r0, #32
 8005c1e:	4770      	bx	lr
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7e5      	b.n	8005bf0 <__hi0bits+0xc>

08005c24 <__lo0bits>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	4602      	mov	r2, r0
 8005c28:	f013 0007 	ands.w	r0, r3, #7
 8005c2c:	d00b      	beq.n	8005c46 <__lo0bits+0x22>
 8005c2e:	07d9      	lsls	r1, r3, #31
 8005c30:	d421      	bmi.n	8005c76 <__lo0bits+0x52>
 8005c32:	0798      	lsls	r0, r3, #30
 8005c34:	bf49      	itett	mi
 8005c36:	085b      	lsrmi	r3, r3, #1
 8005c38:	089b      	lsrpl	r3, r3, #2
 8005c3a:	2001      	movmi	r0, #1
 8005c3c:	6013      	strmi	r3, [r2, #0]
 8005c3e:	bf5c      	itt	pl
 8005c40:	2002      	movpl	r0, #2
 8005c42:	6013      	strpl	r3, [r2, #0]
 8005c44:	4770      	bx	lr
 8005c46:	b299      	uxth	r1, r3
 8005c48:	b909      	cbnz	r1, 8005c4e <__lo0bits+0x2a>
 8005c4a:	2010      	movs	r0, #16
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	b2d9      	uxtb	r1, r3
 8005c50:	b909      	cbnz	r1, 8005c56 <__lo0bits+0x32>
 8005c52:	3008      	adds	r0, #8
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	0719      	lsls	r1, r3, #28
 8005c58:	bf04      	itt	eq
 8005c5a:	091b      	lsreq	r3, r3, #4
 8005c5c:	3004      	addeq	r0, #4
 8005c5e:	0799      	lsls	r1, r3, #30
 8005c60:	bf04      	itt	eq
 8005c62:	089b      	lsreq	r3, r3, #2
 8005c64:	3002      	addeq	r0, #2
 8005c66:	07d9      	lsls	r1, r3, #31
 8005c68:	d403      	bmi.n	8005c72 <__lo0bits+0x4e>
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f100 0001 	add.w	r0, r0, #1
 8005c70:	d003      	beq.n	8005c7a <__lo0bits+0x56>
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	4770      	bx	lr
 8005c76:	2000      	movs	r0, #0
 8005c78:	4770      	bx	lr
 8005c7a:	2020      	movs	r0, #32
 8005c7c:	4770      	bx	lr
	...

08005c80 <__i2b>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	460c      	mov	r4, r1
 8005c84:	2101      	movs	r1, #1
 8005c86:	f7ff ff05 	bl	8005a94 <_Balloc>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	b928      	cbnz	r0, 8005c9a <__i2b+0x1a>
 8005c8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c92:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <__i2b+0x24>)
 8005c94:	4804      	ldr	r0, [pc, #16]	; (8005ca8 <__i2b+0x28>)
 8005c96:	f000 fcdb 	bl	8006650 <__assert_func>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	6144      	str	r4, [r0, #20]
 8005c9e:	6103      	str	r3, [r0, #16]
 8005ca0:	bd10      	pop	{r4, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08007303 	.word	0x08007303
 8005ca8:	08007314 	.word	0x08007314

08005cac <__multiply>:
 8005cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	690a      	ldr	r2, [r1, #16]
 8005cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cb8:	460c      	mov	r4, r1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	bfbe      	ittt	lt
 8005cbe:	460b      	movlt	r3, r1
 8005cc0:	464c      	movlt	r4, r9
 8005cc2:	4699      	movlt	r9, r3
 8005cc4:	6927      	ldr	r7, [r4, #16]
 8005cc6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	eb07 060a 	add.w	r6, r7, sl
 8005cd2:	42b3      	cmp	r3, r6
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	bfb8      	it	lt
 8005cd8:	3101      	addlt	r1, #1
 8005cda:	f7ff fedb 	bl	8005a94 <_Balloc>
 8005cde:	b930      	cbnz	r0, 8005cee <__multiply+0x42>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	f240 115d 	movw	r1, #349	; 0x15d
 8005ce6:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <__multiply+0x148>)
 8005ce8:	4843      	ldr	r0, [pc, #268]	; (8005df8 <__multiply+0x14c>)
 8005cea:	f000 fcb1 	bl	8006650 <__assert_func>
 8005cee:	f100 0514 	add.w	r5, r0, #20
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cfa:	4543      	cmp	r3, r8
 8005cfc:	d321      	bcc.n	8005d42 <__multiply+0x96>
 8005cfe:	f104 0314 	add.w	r3, r4, #20
 8005d02:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d06:	f109 0314 	add.w	r3, r9, #20
 8005d0a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d0e:	9202      	str	r2, [sp, #8]
 8005d10:	1b3a      	subs	r2, r7, r4
 8005d12:	3a15      	subs	r2, #21
 8005d14:	f022 0203 	bic.w	r2, r2, #3
 8005d18:	3204      	adds	r2, #4
 8005d1a:	f104 0115 	add.w	r1, r4, #21
 8005d1e:	428f      	cmp	r7, r1
 8005d20:	bf38      	it	cc
 8005d22:	2204      	movcc	r2, #4
 8005d24:	9201      	str	r2, [sp, #4]
 8005d26:	9a02      	ldr	r2, [sp, #8]
 8005d28:	9303      	str	r3, [sp, #12]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d80c      	bhi.n	8005d48 <__multiply+0x9c>
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	dd03      	ble.n	8005d3a <__multiply+0x8e>
 8005d32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d059      	beq.n	8005dee <__multiply+0x142>
 8005d3a:	6106      	str	r6, [r0, #16]
 8005d3c:	b005      	add	sp, #20
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	f843 2b04 	str.w	r2, [r3], #4
 8005d46:	e7d8      	b.n	8005cfa <__multiply+0x4e>
 8005d48:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d4c:	f1ba 0f00 	cmp.w	sl, #0
 8005d50:	d023      	beq.n	8005d9a <__multiply+0xee>
 8005d52:	46a9      	mov	r9, r5
 8005d54:	f04f 0c00 	mov.w	ip, #0
 8005d58:	f104 0e14 	add.w	lr, r4, #20
 8005d5c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d60:	f8d9 1000 	ldr.w	r1, [r9]
 8005d64:	fa1f fb82 	uxth.w	fp, r2
 8005d68:	b289      	uxth	r1, r1
 8005d6a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d6e:	4461      	add	r1, ip
 8005d70:	f8d9 c000 	ldr.w	ip, [r9]
 8005d74:	0c12      	lsrs	r2, r2, #16
 8005d76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d7a:	fb0a c202 	mla	r2, sl, r2, ip
 8005d7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d82:	b289      	uxth	r1, r1
 8005d84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d88:	4577      	cmp	r7, lr
 8005d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d8e:	f849 1b04 	str.w	r1, [r9], #4
 8005d92:	d8e3      	bhi.n	8005d5c <__multiply+0xb0>
 8005d94:	9a01      	ldr	r2, [sp, #4]
 8005d96:	f845 c002 	str.w	ip, [r5, r2]
 8005d9a:	9a03      	ldr	r2, [sp, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005da2:	f1b9 0f00 	cmp.w	r9, #0
 8005da6:	d020      	beq.n	8005dea <__multiply+0x13e>
 8005da8:	46ae      	mov	lr, r5
 8005daa:	f04f 0a00 	mov.w	sl, #0
 8005dae:	6829      	ldr	r1, [r5, #0]
 8005db0:	f104 0c14 	add.w	ip, r4, #20
 8005db4:	f8bc b000 	ldrh.w	fp, [ip]
 8005db8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dbc:	b289      	uxth	r1, r1
 8005dbe:	fb09 220b 	mla	r2, r9, fp, r2
 8005dc2:	4492      	add	sl, r2
 8005dc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005dc8:	f84e 1b04 	str.w	r1, [lr], #4
 8005dcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005dd0:	f8be 1000 	ldrh.w	r1, [lr]
 8005dd4:	0c12      	lsrs	r2, r2, #16
 8005dd6:	fb09 1102 	mla	r1, r9, r2, r1
 8005dda:	4567      	cmp	r7, ip
 8005ddc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005de0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005de4:	d8e6      	bhi.n	8005db4 <__multiply+0x108>
 8005de6:	9a01      	ldr	r2, [sp, #4]
 8005de8:	50a9      	str	r1, [r5, r2]
 8005dea:	3504      	adds	r5, #4
 8005dec:	e79b      	b.n	8005d26 <__multiply+0x7a>
 8005dee:	3e01      	subs	r6, #1
 8005df0:	e79d      	b.n	8005d2e <__multiply+0x82>
 8005df2:	bf00      	nop
 8005df4:	08007303 	.word	0x08007303
 8005df8:	08007314 	.word	0x08007314

08005dfc <__pow5mult>:
 8005dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e00:	4615      	mov	r5, r2
 8005e02:	f012 0203 	ands.w	r2, r2, #3
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	d007      	beq.n	8005e1c <__pow5mult+0x20>
 8005e0c:	4c25      	ldr	r4, [pc, #148]	; (8005ea4 <__pow5mult+0xa8>)
 8005e0e:	3a01      	subs	r2, #1
 8005e10:	2300      	movs	r3, #0
 8005e12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e16:	f7ff fe9f 	bl	8005b58 <__multadd>
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	10ad      	asrs	r5, r5, #2
 8005e1e:	d03d      	beq.n	8005e9c <__pow5mult+0xa0>
 8005e20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e22:	b97c      	cbnz	r4, 8005e44 <__pow5mult+0x48>
 8005e24:	2010      	movs	r0, #16
 8005e26:	f7ff fe11 	bl	8005a4c <malloc>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6270      	str	r0, [r6, #36]	; 0x24
 8005e2e:	b928      	cbnz	r0, 8005e3c <__pow5mult+0x40>
 8005e30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e34:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <__pow5mult+0xac>)
 8005e36:	481d      	ldr	r0, [pc, #116]	; (8005eac <__pow5mult+0xb0>)
 8005e38:	f000 fc0a 	bl	8006650 <__assert_func>
 8005e3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e40:	6004      	str	r4, [r0, #0]
 8005e42:	60c4      	str	r4, [r0, #12]
 8005e44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e4c:	b94c      	cbnz	r4, 8005e62 <__pow5mult+0x66>
 8005e4e:	f240 2171 	movw	r1, #625	; 0x271
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ff14 	bl	8005c80 <__i2b>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e60:	6003      	str	r3, [r0, #0]
 8005e62:	f04f 0900 	mov.w	r9, #0
 8005e66:	07eb      	lsls	r3, r5, #31
 8005e68:	d50a      	bpl.n	8005e80 <__pow5mult+0x84>
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff ff1c 	bl	8005cac <__multiply>
 8005e74:	4680      	mov	r8, r0
 8005e76:	4639      	mov	r1, r7
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff fe4b 	bl	8005b14 <_Bfree>
 8005e7e:	4647      	mov	r7, r8
 8005e80:	106d      	asrs	r5, r5, #1
 8005e82:	d00b      	beq.n	8005e9c <__pow5mult+0xa0>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	b938      	cbnz	r0, 8005e98 <__pow5mult+0x9c>
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff ff0d 	bl	8005cac <__multiply>
 8005e92:	6020      	str	r0, [r4, #0]
 8005e94:	f8c0 9000 	str.w	r9, [r0]
 8005e98:	4604      	mov	r4, r0
 8005e9a:	e7e4      	b.n	8005e66 <__pow5mult+0x6a>
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea2:	bf00      	nop
 8005ea4:	08007460 	.word	0x08007460
 8005ea8:	08007291 	.word	0x08007291
 8005eac:	08007314 	.word	0x08007314

08005eb0 <__lshift>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	4691      	mov	r9, r2
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	6849      	ldr	r1, [r1, #4]
 8005ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ec8:	f108 0601 	add.w	r6, r8, #1
 8005ecc:	42b3      	cmp	r3, r6
 8005ece:	db0b      	blt.n	8005ee8 <__lshift+0x38>
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f7ff fddf 	bl	8005a94 <_Balloc>
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	b948      	cbnz	r0, 8005eee <__lshift+0x3e>
 8005eda:	4602      	mov	r2, r0
 8005edc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ee0:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <__lshift+0xd8>)
 8005ee2:	482a      	ldr	r0, [pc, #168]	; (8005f8c <__lshift+0xdc>)
 8005ee4:	f000 fbb4 	bl	8006650 <__assert_func>
 8005ee8:	3101      	adds	r1, #1
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	e7ee      	b.n	8005ecc <__lshift+0x1c>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f100 0114 	add.w	r1, r0, #20
 8005ef4:	f100 0210 	add.w	r2, r0, #16
 8005ef8:	4618      	mov	r0, r3
 8005efa:	4553      	cmp	r3, sl
 8005efc:	db37      	blt.n	8005f6e <__lshift+0xbe>
 8005efe:	6920      	ldr	r0, [r4, #16]
 8005f00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f04:	f104 0314 	add.w	r3, r4, #20
 8005f08:	f019 091f 	ands.w	r9, r9, #31
 8005f0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f14:	d02f      	beq.n	8005f76 <__lshift+0xc6>
 8005f16:	468a      	mov	sl, r1
 8005f18:	f04f 0c00 	mov.w	ip, #0
 8005f1c:	f1c9 0e20 	rsb	lr, r9, #32
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	fa02 f209 	lsl.w	r2, r2, r9
 8005f26:	ea42 020c 	orr.w	r2, r2, ip
 8005f2a:	f84a 2b04 	str.w	r2, [sl], #4
 8005f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f32:	4298      	cmp	r0, r3
 8005f34:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f38:	d8f2      	bhi.n	8005f20 <__lshift+0x70>
 8005f3a:	1b03      	subs	r3, r0, r4
 8005f3c:	3b15      	subs	r3, #21
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	3304      	adds	r3, #4
 8005f44:	f104 0215 	add.w	r2, r4, #21
 8005f48:	4290      	cmp	r0, r2
 8005f4a:	bf38      	it	cc
 8005f4c:	2304      	movcc	r3, #4
 8005f4e:	f841 c003 	str.w	ip, [r1, r3]
 8005f52:	f1bc 0f00 	cmp.w	ip, #0
 8005f56:	d001      	beq.n	8005f5c <__lshift+0xac>
 8005f58:	f108 0602 	add.w	r6, r8, #2
 8005f5c:	3e01      	subs	r6, #1
 8005f5e:	4638      	mov	r0, r7
 8005f60:	4621      	mov	r1, r4
 8005f62:	612e      	str	r6, [r5, #16]
 8005f64:	f7ff fdd6 	bl	8005b14 <_Bfree>
 8005f68:	4628      	mov	r0, r5
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f72:	3301      	adds	r3, #1
 8005f74:	e7c1      	b.n	8005efa <__lshift+0x4a>
 8005f76:	3904      	subs	r1, #4
 8005f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7c:	4298      	cmp	r0, r3
 8005f7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f82:	d8f9      	bhi.n	8005f78 <__lshift+0xc8>
 8005f84:	e7ea      	b.n	8005f5c <__lshift+0xac>
 8005f86:	bf00      	nop
 8005f88:	08007303 	.word	0x08007303
 8005f8c:	08007314 	.word	0x08007314

08005f90 <__mcmp>:
 8005f90:	4603      	mov	r3, r0
 8005f92:	690a      	ldr	r2, [r1, #16]
 8005f94:	6900      	ldr	r0, [r0, #16]
 8005f96:	b530      	push	{r4, r5, lr}
 8005f98:	1a80      	subs	r0, r0, r2
 8005f9a:	d10d      	bne.n	8005fb8 <__mcmp+0x28>
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	3114      	adds	r1, #20
 8005fa0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fb0:	4295      	cmp	r5, r2
 8005fb2:	d002      	beq.n	8005fba <__mcmp+0x2a>
 8005fb4:	d304      	bcc.n	8005fc0 <__mcmp+0x30>
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	bd30      	pop	{r4, r5, pc}
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	d3f4      	bcc.n	8005fa8 <__mcmp+0x18>
 8005fbe:	e7fb      	b.n	8005fb8 <__mcmp+0x28>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	e7f8      	b.n	8005fb8 <__mcmp+0x28>
	...

08005fc8 <__mdiff>:
 8005fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	460d      	mov	r5, r1
 8005fce:	4607      	mov	r7, r0
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	f7ff ffdb 	bl	8005f90 <__mcmp>
 8005fda:	1e06      	subs	r6, r0, #0
 8005fdc:	d111      	bne.n	8006002 <__mdiff+0x3a>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff fd57 	bl	8005a94 <_Balloc>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	b928      	cbnz	r0, 8005ff6 <__mdiff+0x2e>
 8005fea:	f240 2132 	movw	r1, #562	; 0x232
 8005fee:	4b3a      	ldr	r3, [pc, #232]	; (80060d8 <__mdiff+0x110>)
 8005ff0:	483a      	ldr	r0, [pc, #232]	; (80060dc <__mdiff+0x114>)
 8005ff2:	f000 fb2d 	bl	8006650 <__assert_func>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	bfa4      	itt	ge
 8006004:	4623      	movge	r3, r4
 8006006:	462c      	movge	r4, r5
 8006008:	4638      	mov	r0, r7
 800600a:	6861      	ldr	r1, [r4, #4]
 800600c:	bfa6      	itte	ge
 800600e:	461d      	movge	r5, r3
 8006010:	2600      	movge	r6, #0
 8006012:	2601      	movlt	r6, #1
 8006014:	f7ff fd3e 	bl	8005a94 <_Balloc>
 8006018:	4602      	mov	r2, r0
 800601a:	b918      	cbnz	r0, 8006024 <__mdiff+0x5c>
 800601c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006020:	4b2d      	ldr	r3, [pc, #180]	; (80060d8 <__mdiff+0x110>)
 8006022:	e7e5      	b.n	8005ff0 <__mdiff+0x28>
 8006024:	f102 0814 	add.w	r8, r2, #20
 8006028:	46c2      	mov	sl, r8
 800602a:	f04f 0c00 	mov.w	ip, #0
 800602e:	6927      	ldr	r7, [r4, #16]
 8006030:	60c6      	str	r6, [r0, #12]
 8006032:	692e      	ldr	r6, [r5, #16]
 8006034:	f104 0014 	add.w	r0, r4, #20
 8006038:	f105 0914 	add.w	r9, r5, #20
 800603c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006040:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006044:	3410      	adds	r4, #16
 8006046:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800604a:	f859 3b04 	ldr.w	r3, [r9], #4
 800604e:	fa1f f18b 	uxth.w	r1, fp
 8006052:	448c      	add	ip, r1
 8006054:	b299      	uxth	r1, r3
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	ebac 0101 	sub.w	r1, ip, r1
 800605c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006060:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006064:	b289      	uxth	r1, r1
 8006066:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800606a:	454e      	cmp	r6, r9
 800606c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006070:	f84a 3b04 	str.w	r3, [sl], #4
 8006074:	d8e7      	bhi.n	8006046 <__mdiff+0x7e>
 8006076:	1b73      	subs	r3, r6, r5
 8006078:	3b15      	subs	r3, #21
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	3515      	adds	r5, #21
 8006080:	3304      	adds	r3, #4
 8006082:	42ae      	cmp	r6, r5
 8006084:	bf38      	it	cc
 8006086:	2304      	movcc	r3, #4
 8006088:	4418      	add	r0, r3
 800608a:	4443      	add	r3, r8
 800608c:	461e      	mov	r6, r3
 800608e:	4605      	mov	r5, r0
 8006090:	4575      	cmp	r5, lr
 8006092:	d30e      	bcc.n	80060b2 <__mdiff+0xea>
 8006094:	f10e 0103 	add.w	r1, lr, #3
 8006098:	1a09      	subs	r1, r1, r0
 800609a:	f021 0103 	bic.w	r1, r1, #3
 800609e:	3803      	subs	r0, #3
 80060a0:	4586      	cmp	lr, r0
 80060a2:	bf38      	it	cc
 80060a4:	2100      	movcc	r1, #0
 80060a6:	4419      	add	r1, r3
 80060a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80060ac:	b18b      	cbz	r3, 80060d2 <__mdiff+0x10a>
 80060ae:	6117      	str	r7, [r2, #16]
 80060b0:	e7a4      	b.n	8005ffc <__mdiff+0x34>
 80060b2:	f855 8b04 	ldr.w	r8, [r5], #4
 80060b6:	fa1f f188 	uxth.w	r1, r8
 80060ba:	4461      	add	r1, ip
 80060bc:	140c      	asrs	r4, r1, #16
 80060be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060c2:	b289      	uxth	r1, r1
 80060c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060c8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80060cc:	f846 1b04 	str.w	r1, [r6], #4
 80060d0:	e7de      	b.n	8006090 <__mdiff+0xc8>
 80060d2:	3f01      	subs	r7, #1
 80060d4:	e7e8      	b.n	80060a8 <__mdiff+0xe0>
 80060d6:	bf00      	nop
 80060d8:	08007303 	.word	0x08007303
 80060dc:	08007314 	.word	0x08007314

080060e0 <__d2b>:
 80060e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060e4:	2101      	movs	r1, #1
 80060e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80060ea:	4690      	mov	r8, r2
 80060ec:	461d      	mov	r5, r3
 80060ee:	f7ff fcd1 	bl	8005a94 <_Balloc>
 80060f2:	4604      	mov	r4, r0
 80060f4:	b930      	cbnz	r0, 8006104 <__d2b+0x24>
 80060f6:	4602      	mov	r2, r0
 80060f8:	f240 310a 	movw	r1, #778	; 0x30a
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <__d2b+0xb0>)
 80060fe:	4825      	ldr	r0, [pc, #148]	; (8006194 <__d2b+0xb4>)
 8006100:	f000 faa6 	bl	8006650 <__assert_func>
 8006104:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006108:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800610c:	bb2d      	cbnz	r5, 800615a <__d2b+0x7a>
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	f1b8 0300 	subs.w	r3, r8, #0
 8006114:	d026      	beq.n	8006164 <__d2b+0x84>
 8006116:	4668      	mov	r0, sp
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	f7ff fd83 	bl	8005c24 <__lo0bits>
 800611e:	9900      	ldr	r1, [sp, #0]
 8006120:	b1f0      	cbz	r0, 8006160 <__d2b+0x80>
 8006122:	9a01      	ldr	r2, [sp, #4]
 8006124:	f1c0 0320 	rsb	r3, r0, #32
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	430b      	orrs	r3, r1
 800612e:	40c2      	lsrs	r2, r0
 8006130:	6163      	str	r3, [r4, #20]
 8006132:	9201      	str	r2, [sp, #4]
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2102      	movne	r1, #2
 800613c:	2101      	moveq	r1, #1
 800613e:	61a3      	str	r3, [r4, #24]
 8006140:	6121      	str	r1, [r4, #16]
 8006142:	b1c5      	cbz	r5, 8006176 <__d2b+0x96>
 8006144:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006148:	4405      	add	r5, r0
 800614a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800614e:	603d      	str	r5, [r7, #0]
 8006150:	6030      	str	r0, [r6, #0]
 8006152:	4620      	mov	r0, r4
 8006154:	b002      	add	sp, #8
 8006156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800615a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615e:	e7d6      	b.n	800610e <__d2b+0x2e>
 8006160:	6161      	str	r1, [r4, #20]
 8006162:	e7e7      	b.n	8006134 <__d2b+0x54>
 8006164:	a801      	add	r0, sp, #4
 8006166:	f7ff fd5d 	bl	8005c24 <__lo0bits>
 800616a:	2101      	movs	r1, #1
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	6121      	str	r1, [r4, #16]
 8006170:	6163      	str	r3, [r4, #20]
 8006172:	3020      	adds	r0, #32
 8006174:	e7e5      	b.n	8006142 <__d2b+0x62>
 8006176:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800617a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800617e:	6038      	str	r0, [r7, #0]
 8006180:	6918      	ldr	r0, [r3, #16]
 8006182:	f7ff fd2f 	bl	8005be4 <__hi0bits>
 8006186:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800618a:	6031      	str	r1, [r6, #0]
 800618c:	e7e1      	b.n	8006152 <__d2b+0x72>
 800618e:	bf00      	nop
 8006190:	08007303 	.word	0x08007303
 8006194:	08007314 	.word	0x08007314

08006198 <_calloc_r>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	fba1 5402 	umull	r5, r4, r1, r2
 800619e:	b934      	cbnz	r4, 80061ae <_calloc_r+0x16>
 80061a0:	4629      	mov	r1, r5
 80061a2:	f000 f875 	bl	8006290 <_malloc_r>
 80061a6:	4606      	mov	r6, r0
 80061a8:	b928      	cbnz	r0, 80061b6 <_calloc_r+0x1e>
 80061aa:	4630      	mov	r0, r6
 80061ac:	bd70      	pop	{r4, r5, r6, pc}
 80061ae:	220c      	movs	r2, #12
 80061b0:	2600      	movs	r6, #0
 80061b2:	6002      	str	r2, [r0, #0]
 80061b4:	e7f9      	b.n	80061aa <_calloc_r+0x12>
 80061b6:	462a      	mov	r2, r5
 80061b8:	4621      	mov	r1, r4
 80061ba:	f7fe f93f 	bl	800443c <memset>
 80061be:	e7f4      	b.n	80061aa <_calloc_r+0x12>

080061c0 <_free_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4605      	mov	r5, r0
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d040      	beq.n	800624a <_free_r+0x8a>
 80061c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061cc:	1f0c      	subs	r4, r1, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfb8      	it	lt
 80061d2:	18e4      	addlt	r4, r4, r3
 80061d4:	f000 fa98 	bl	8006708 <__malloc_lock>
 80061d8:	4a1c      	ldr	r2, [pc, #112]	; (800624c <_free_r+0x8c>)
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	b933      	cbnz	r3, 80061ec <_free_r+0x2c>
 80061de:	6063      	str	r3, [r4, #4]
 80061e0:	6014      	str	r4, [r2, #0]
 80061e2:	4628      	mov	r0, r5
 80061e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e8:	f000 ba94 	b.w	8006714 <__malloc_unlock>
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d908      	bls.n	8006202 <_free_r+0x42>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	1821      	adds	r1, r4, r0
 80061f4:	428b      	cmp	r3, r1
 80061f6:	bf01      	itttt	eq
 80061f8:	6819      	ldreq	r1, [r3, #0]
 80061fa:	685b      	ldreq	r3, [r3, #4]
 80061fc:	1809      	addeq	r1, r1, r0
 80061fe:	6021      	streq	r1, [r4, #0]
 8006200:	e7ed      	b.n	80061de <_free_r+0x1e>
 8006202:	461a      	mov	r2, r3
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b10b      	cbz	r3, 800620c <_free_r+0x4c>
 8006208:	42a3      	cmp	r3, r4
 800620a:	d9fa      	bls.n	8006202 <_free_r+0x42>
 800620c:	6811      	ldr	r1, [r2, #0]
 800620e:	1850      	adds	r0, r2, r1
 8006210:	42a0      	cmp	r0, r4
 8006212:	d10b      	bne.n	800622c <_free_r+0x6c>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	4401      	add	r1, r0
 8006218:	1850      	adds	r0, r2, r1
 800621a:	4283      	cmp	r3, r0
 800621c:	6011      	str	r1, [r2, #0]
 800621e:	d1e0      	bne.n	80061e2 <_free_r+0x22>
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4401      	add	r1, r0
 8006226:	6011      	str	r1, [r2, #0]
 8006228:	6053      	str	r3, [r2, #4]
 800622a:	e7da      	b.n	80061e2 <_free_r+0x22>
 800622c:	d902      	bls.n	8006234 <_free_r+0x74>
 800622e:	230c      	movs	r3, #12
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	e7d6      	b.n	80061e2 <_free_r+0x22>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	1821      	adds	r1, r4, r0
 8006238:	428b      	cmp	r3, r1
 800623a:	bf01      	itttt	eq
 800623c:	6819      	ldreq	r1, [r3, #0]
 800623e:	685b      	ldreq	r3, [r3, #4]
 8006240:	1809      	addeq	r1, r1, r0
 8006242:	6021      	streq	r1, [r4, #0]
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	6054      	str	r4, [r2, #4]
 8006248:	e7cb      	b.n	80061e2 <_free_r+0x22>
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000308 	.word	0x20000308

08006250 <sbrk_aligned>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4e0e      	ldr	r6, [pc, #56]	; (800628c <sbrk_aligned+0x3c>)
 8006254:	460c      	mov	r4, r1
 8006256:	6831      	ldr	r1, [r6, #0]
 8006258:	4605      	mov	r5, r0
 800625a:	b911      	cbnz	r1, 8006262 <sbrk_aligned+0x12>
 800625c:	f000 f9e8 	bl	8006630 <_sbrk_r>
 8006260:	6030      	str	r0, [r6, #0]
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f000 f9e3 	bl	8006630 <_sbrk_r>
 800626a:	1c43      	adds	r3, r0, #1
 800626c:	d00a      	beq.n	8006284 <sbrk_aligned+0x34>
 800626e:	1cc4      	adds	r4, r0, #3
 8006270:	f024 0403 	bic.w	r4, r4, #3
 8006274:	42a0      	cmp	r0, r4
 8006276:	d007      	beq.n	8006288 <sbrk_aligned+0x38>
 8006278:	1a21      	subs	r1, r4, r0
 800627a:	4628      	mov	r0, r5
 800627c:	f000 f9d8 	bl	8006630 <_sbrk_r>
 8006280:	3001      	adds	r0, #1
 8006282:	d101      	bne.n	8006288 <sbrk_aligned+0x38>
 8006284:	f04f 34ff 	mov.w	r4, #4294967295
 8006288:	4620      	mov	r0, r4
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	2000030c 	.word	0x2000030c

08006290 <_malloc_r>:
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006294:	1ccd      	adds	r5, r1, #3
 8006296:	f025 0503 	bic.w	r5, r5, #3
 800629a:	3508      	adds	r5, #8
 800629c:	2d0c      	cmp	r5, #12
 800629e:	bf38      	it	cc
 80062a0:	250c      	movcc	r5, #12
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	4607      	mov	r7, r0
 80062a6:	db01      	blt.n	80062ac <_malloc_r+0x1c>
 80062a8:	42a9      	cmp	r1, r5
 80062aa:	d905      	bls.n	80062b8 <_malloc_r+0x28>
 80062ac:	230c      	movs	r3, #12
 80062ae:	2600      	movs	r6, #0
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4630      	mov	r0, r6
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	4e2e      	ldr	r6, [pc, #184]	; (8006374 <_malloc_r+0xe4>)
 80062ba:	f000 fa25 	bl	8006708 <__malloc_lock>
 80062be:	6833      	ldr	r3, [r6, #0]
 80062c0:	461c      	mov	r4, r3
 80062c2:	bb34      	cbnz	r4, 8006312 <_malloc_r+0x82>
 80062c4:	4629      	mov	r1, r5
 80062c6:	4638      	mov	r0, r7
 80062c8:	f7ff ffc2 	bl	8006250 <sbrk_aligned>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	4604      	mov	r4, r0
 80062d0:	d14d      	bne.n	800636e <_malloc_r+0xde>
 80062d2:	6834      	ldr	r4, [r6, #0]
 80062d4:	4626      	mov	r6, r4
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d140      	bne.n	800635c <_malloc_r+0xcc>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	4631      	mov	r1, r6
 80062de:	4638      	mov	r0, r7
 80062e0:	eb04 0803 	add.w	r8, r4, r3
 80062e4:	f000 f9a4 	bl	8006630 <_sbrk_r>
 80062e8:	4580      	cmp	r8, r0
 80062ea:	d13a      	bne.n	8006362 <_malloc_r+0xd2>
 80062ec:	6821      	ldr	r1, [r4, #0]
 80062ee:	3503      	adds	r5, #3
 80062f0:	1a6d      	subs	r5, r5, r1
 80062f2:	f025 0503 	bic.w	r5, r5, #3
 80062f6:	3508      	adds	r5, #8
 80062f8:	2d0c      	cmp	r5, #12
 80062fa:	bf38      	it	cc
 80062fc:	250c      	movcc	r5, #12
 80062fe:	4638      	mov	r0, r7
 8006300:	4629      	mov	r1, r5
 8006302:	f7ff ffa5 	bl	8006250 <sbrk_aligned>
 8006306:	3001      	adds	r0, #1
 8006308:	d02b      	beq.n	8006362 <_malloc_r+0xd2>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	442b      	add	r3, r5
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	e00e      	b.n	8006330 <_malloc_r+0xa0>
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	1b52      	subs	r2, r2, r5
 8006316:	d41e      	bmi.n	8006356 <_malloc_r+0xc6>
 8006318:	2a0b      	cmp	r2, #11
 800631a:	d916      	bls.n	800634a <_malloc_r+0xba>
 800631c:	1961      	adds	r1, r4, r5
 800631e:	42a3      	cmp	r3, r4
 8006320:	6025      	str	r5, [r4, #0]
 8006322:	bf18      	it	ne
 8006324:	6059      	strne	r1, [r3, #4]
 8006326:	6863      	ldr	r3, [r4, #4]
 8006328:	bf08      	it	eq
 800632a:	6031      	streq	r1, [r6, #0]
 800632c:	5162      	str	r2, [r4, r5]
 800632e:	604b      	str	r3, [r1, #4]
 8006330:	4638      	mov	r0, r7
 8006332:	f104 060b 	add.w	r6, r4, #11
 8006336:	f000 f9ed 	bl	8006714 <__malloc_unlock>
 800633a:	f026 0607 	bic.w	r6, r6, #7
 800633e:	1d23      	adds	r3, r4, #4
 8006340:	1af2      	subs	r2, r6, r3
 8006342:	d0b6      	beq.n	80062b2 <_malloc_r+0x22>
 8006344:	1b9b      	subs	r3, r3, r6
 8006346:	50a3      	str	r3, [r4, r2]
 8006348:	e7b3      	b.n	80062b2 <_malloc_r+0x22>
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	42a3      	cmp	r3, r4
 800634e:	bf0c      	ite	eq
 8006350:	6032      	streq	r2, [r6, #0]
 8006352:	605a      	strne	r2, [r3, #4]
 8006354:	e7ec      	b.n	8006330 <_malloc_r+0xa0>
 8006356:	4623      	mov	r3, r4
 8006358:	6864      	ldr	r4, [r4, #4]
 800635a:	e7b2      	b.n	80062c2 <_malloc_r+0x32>
 800635c:	4634      	mov	r4, r6
 800635e:	6876      	ldr	r6, [r6, #4]
 8006360:	e7b9      	b.n	80062d6 <_malloc_r+0x46>
 8006362:	230c      	movs	r3, #12
 8006364:	4638      	mov	r0, r7
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	f000 f9d4 	bl	8006714 <__malloc_unlock>
 800636c:	e7a1      	b.n	80062b2 <_malloc_r+0x22>
 800636e:	6025      	str	r5, [r4, #0]
 8006370:	e7de      	b.n	8006330 <_malloc_r+0xa0>
 8006372:	bf00      	nop
 8006374:	20000308 	.word	0x20000308

08006378 <__ssputs_r>:
 8006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	688e      	ldr	r6, [r1, #8]
 800637e:	4682      	mov	sl, r0
 8006380:	429e      	cmp	r6, r3
 8006382:	460c      	mov	r4, r1
 8006384:	4690      	mov	r8, r2
 8006386:	461f      	mov	r7, r3
 8006388:	d838      	bhi.n	80063fc <__ssputs_r+0x84>
 800638a:	898a      	ldrh	r2, [r1, #12]
 800638c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006390:	d032      	beq.n	80063f8 <__ssputs_r+0x80>
 8006392:	6825      	ldr	r5, [r4, #0]
 8006394:	6909      	ldr	r1, [r1, #16]
 8006396:	3301      	adds	r3, #1
 8006398:	eba5 0901 	sub.w	r9, r5, r1
 800639c:	6965      	ldr	r5, [r4, #20]
 800639e:	444b      	add	r3, r9
 80063a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063a8:	106d      	asrs	r5, r5, #1
 80063aa:	429d      	cmp	r5, r3
 80063ac:	bf38      	it	cc
 80063ae:	461d      	movcc	r5, r3
 80063b0:	0553      	lsls	r3, r2, #21
 80063b2:	d531      	bpl.n	8006418 <__ssputs_r+0xa0>
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7ff ff6b 	bl	8006290 <_malloc_r>
 80063ba:	4606      	mov	r6, r0
 80063bc:	b950      	cbnz	r0, 80063d4 <__ssputs_r+0x5c>
 80063be:	230c      	movs	r3, #12
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	f8ca 3000 	str.w	r3, [sl]
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d4:	464a      	mov	r2, r9
 80063d6:	6921      	ldr	r1, [r4, #16]
 80063d8:	f7ff fb4e 	bl	8005a78 <memcpy>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	6126      	str	r6, [r4, #16]
 80063ea:	444e      	add	r6, r9
 80063ec:	6026      	str	r6, [r4, #0]
 80063ee:	463e      	mov	r6, r7
 80063f0:	6165      	str	r5, [r4, #20]
 80063f2:	eba5 0509 	sub.w	r5, r5, r9
 80063f6:	60a5      	str	r5, [r4, #8]
 80063f8:	42be      	cmp	r6, r7
 80063fa:	d900      	bls.n	80063fe <__ssputs_r+0x86>
 80063fc:	463e      	mov	r6, r7
 80063fe:	4632      	mov	r2, r6
 8006400:	4641      	mov	r1, r8
 8006402:	6820      	ldr	r0, [r4, #0]
 8006404:	f000 f966 	bl	80066d4 <memmove>
 8006408:	68a3      	ldr	r3, [r4, #8]
 800640a:	2000      	movs	r0, #0
 800640c:	1b9b      	subs	r3, r3, r6
 800640e:	60a3      	str	r3, [r4, #8]
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	4433      	add	r3, r6
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	e7db      	b.n	80063d0 <__ssputs_r+0x58>
 8006418:	462a      	mov	r2, r5
 800641a:	f000 f981 	bl	8006720 <_realloc_r>
 800641e:	4606      	mov	r6, r0
 8006420:	2800      	cmp	r0, #0
 8006422:	d1e1      	bne.n	80063e8 <__ssputs_r+0x70>
 8006424:	4650      	mov	r0, sl
 8006426:	6921      	ldr	r1, [r4, #16]
 8006428:	f7ff feca 	bl	80061c0 <_free_r>
 800642c:	e7c7      	b.n	80063be <__ssputs_r+0x46>
	...

08006430 <_svfiprintf_r>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	4698      	mov	r8, r3
 8006436:	898b      	ldrh	r3, [r1, #12]
 8006438:	4607      	mov	r7, r0
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	460d      	mov	r5, r1
 800643e:	4614      	mov	r4, r2
 8006440:	b09d      	sub	sp, #116	; 0x74
 8006442:	d50e      	bpl.n	8006462 <_svfiprintf_r+0x32>
 8006444:	690b      	ldr	r3, [r1, #16]
 8006446:	b963      	cbnz	r3, 8006462 <_svfiprintf_r+0x32>
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	f7ff ff21 	bl	8006290 <_malloc_r>
 800644e:	6028      	str	r0, [r5, #0]
 8006450:	6128      	str	r0, [r5, #16]
 8006452:	b920      	cbnz	r0, 800645e <_svfiprintf_r+0x2e>
 8006454:	230c      	movs	r3, #12
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	e0d1      	b.n	8006602 <_svfiprintf_r+0x1d2>
 800645e:	2340      	movs	r3, #64	; 0x40
 8006460:	616b      	str	r3, [r5, #20]
 8006462:	2300      	movs	r3, #0
 8006464:	9309      	str	r3, [sp, #36]	; 0x24
 8006466:	2320      	movs	r3, #32
 8006468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800646c:	2330      	movs	r3, #48	; 0x30
 800646e:	f04f 0901 	mov.w	r9, #1
 8006472:	f8cd 800c 	str.w	r8, [sp, #12]
 8006476:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800661c <_svfiprintf_r+0x1ec>
 800647a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800647e:	4623      	mov	r3, r4
 8006480:	469a      	mov	sl, r3
 8006482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006486:	b10a      	cbz	r2, 800648c <_svfiprintf_r+0x5c>
 8006488:	2a25      	cmp	r2, #37	; 0x25
 800648a:	d1f9      	bne.n	8006480 <_svfiprintf_r+0x50>
 800648c:	ebba 0b04 	subs.w	fp, sl, r4
 8006490:	d00b      	beq.n	80064aa <_svfiprintf_r+0x7a>
 8006492:	465b      	mov	r3, fp
 8006494:	4622      	mov	r2, r4
 8006496:	4629      	mov	r1, r5
 8006498:	4638      	mov	r0, r7
 800649a:	f7ff ff6d 	bl	8006378 <__ssputs_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	f000 80aa 	beq.w	80065f8 <_svfiprintf_r+0x1c8>
 80064a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a6:	445a      	add	r2, fp
 80064a8:	9209      	str	r2, [sp, #36]	; 0x24
 80064aa:	f89a 3000 	ldrb.w	r3, [sl]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80a2 	beq.w	80065f8 <_svfiprintf_r+0x1c8>
 80064b4:	2300      	movs	r3, #0
 80064b6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064be:	f10a 0a01 	add.w	sl, sl, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	9307      	str	r3, [sp, #28]
 80064c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ca:	931a      	str	r3, [sp, #104]	; 0x68
 80064cc:	4654      	mov	r4, sl
 80064ce:	2205      	movs	r2, #5
 80064d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d4:	4851      	ldr	r0, [pc, #324]	; (800661c <_svfiprintf_r+0x1ec>)
 80064d6:	f7ff fac1 	bl	8005a5c <memchr>
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	b9d8      	cbnz	r0, 8006516 <_svfiprintf_r+0xe6>
 80064de:	06d0      	lsls	r0, r2, #27
 80064e0:	bf44      	itt	mi
 80064e2:	2320      	movmi	r3, #32
 80064e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e8:	0711      	lsls	r1, r2, #28
 80064ea:	bf44      	itt	mi
 80064ec:	232b      	movmi	r3, #43	; 0x2b
 80064ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064f2:	f89a 3000 	ldrb.w	r3, [sl]
 80064f6:	2b2a      	cmp	r3, #42	; 0x2a
 80064f8:	d015      	beq.n	8006526 <_svfiprintf_r+0xf6>
 80064fa:	4654      	mov	r4, sl
 80064fc:	2000      	movs	r0, #0
 80064fe:	f04f 0c0a 	mov.w	ip, #10
 8006502:	9a07      	ldr	r2, [sp, #28]
 8006504:	4621      	mov	r1, r4
 8006506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800650a:	3b30      	subs	r3, #48	; 0x30
 800650c:	2b09      	cmp	r3, #9
 800650e:	d94e      	bls.n	80065ae <_svfiprintf_r+0x17e>
 8006510:	b1b0      	cbz	r0, 8006540 <_svfiprintf_r+0x110>
 8006512:	9207      	str	r2, [sp, #28]
 8006514:	e014      	b.n	8006540 <_svfiprintf_r+0x110>
 8006516:	eba0 0308 	sub.w	r3, r0, r8
 800651a:	fa09 f303 	lsl.w	r3, r9, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	46a2      	mov	sl, r4
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	e7d2      	b.n	80064cc <_svfiprintf_r+0x9c>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	1d19      	adds	r1, r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	9103      	str	r1, [sp, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfbb      	ittet	lt
 8006532:	425b      	neglt	r3, r3
 8006534:	f042 0202 	orrlt.w	r2, r2, #2
 8006538:	9307      	strge	r3, [sp, #28]
 800653a:	9307      	strlt	r3, [sp, #28]
 800653c:	bfb8      	it	lt
 800653e:	9204      	strlt	r2, [sp, #16]
 8006540:	7823      	ldrb	r3, [r4, #0]
 8006542:	2b2e      	cmp	r3, #46	; 0x2e
 8006544:	d10c      	bne.n	8006560 <_svfiprintf_r+0x130>
 8006546:	7863      	ldrb	r3, [r4, #1]
 8006548:	2b2a      	cmp	r3, #42	; 0x2a
 800654a:	d135      	bne.n	80065b8 <_svfiprintf_r+0x188>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	3402      	adds	r4, #2
 8006550:	1d1a      	adds	r2, r3, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	9203      	str	r2, [sp, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	bfb8      	it	lt
 800655a:	f04f 33ff 	movlt.w	r3, #4294967295
 800655e:	9305      	str	r3, [sp, #20]
 8006560:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006620 <_svfiprintf_r+0x1f0>
 8006564:	2203      	movs	r2, #3
 8006566:	4650      	mov	r0, sl
 8006568:	7821      	ldrb	r1, [r4, #0]
 800656a:	f7ff fa77 	bl	8005a5c <memchr>
 800656e:	b140      	cbz	r0, 8006582 <_svfiprintf_r+0x152>
 8006570:	2340      	movs	r3, #64	; 0x40
 8006572:	eba0 000a 	sub.w	r0, r0, sl
 8006576:	fa03 f000 	lsl.w	r0, r3, r0
 800657a:	9b04      	ldr	r3, [sp, #16]
 800657c:	3401      	adds	r4, #1
 800657e:	4303      	orrs	r3, r0
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006586:	2206      	movs	r2, #6
 8006588:	4826      	ldr	r0, [pc, #152]	; (8006624 <_svfiprintf_r+0x1f4>)
 800658a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800658e:	f7ff fa65 	bl	8005a5c <memchr>
 8006592:	2800      	cmp	r0, #0
 8006594:	d038      	beq.n	8006608 <_svfiprintf_r+0x1d8>
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <_svfiprintf_r+0x1f8>)
 8006598:	bb1b      	cbnz	r3, 80065e2 <_svfiprintf_r+0x1b2>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	3307      	adds	r3, #7
 800659e:	f023 0307 	bic.w	r3, r3, #7
 80065a2:	3308      	adds	r3, #8
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a8:	4433      	add	r3, r6
 80065aa:	9309      	str	r3, [sp, #36]	; 0x24
 80065ac:	e767      	b.n	800647e <_svfiprintf_r+0x4e>
 80065ae:	460c      	mov	r4, r1
 80065b0:	2001      	movs	r0, #1
 80065b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065b6:	e7a5      	b.n	8006504 <_svfiprintf_r+0xd4>
 80065b8:	2300      	movs	r3, #0
 80065ba:	f04f 0c0a 	mov.w	ip, #10
 80065be:	4619      	mov	r1, r3
 80065c0:	3401      	adds	r4, #1
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	4620      	mov	r0, r4
 80065c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ca:	3a30      	subs	r2, #48	; 0x30
 80065cc:	2a09      	cmp	r2, #9
 80065ce:	d903      	bls.n	80065d8 <_svfiprintf_r+0x1a8>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0c5      	beq.n	8006560 <_svfiprintf_r+0x130>
 80065d4:	9105      	str	r1, [sp, #20]
 80065d6:	e7c3      	b.n	8006560 <_svfiprintf_r+0x130>
 80065d8:	4604      	mov	r4, r0
 80065da:	2301      	movs	r3, #1
 80065dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80065e0:	e7f0      	b.n	80065c4 <_svfiprintf_r+0x194>
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4638      	mov	r0, r7
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <_svfiprintf_r+0x1fc>)
 80065ec:	a904      	add	r1, sp, #16
 80065ee:	f7fd ffcb 	bl	8004588 <_printf_float>
 80065f2:	1c42      	adds	r2, r0, #1
 80065f4:	4606      	mov	r6, r0
 80065f6:	d1d6      	bne.n	80065a6 <_svfiprintf_r+0x176>
 80065f8:	89ab      	ldrh	r3, [r5, #12]
 80065fa:	065b      	lsls	r3, r3, #25
 80065fc:	f53f af2c 	bmi.w	8006458 <_svfiprintf_r+0x28>
 8006600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006602:	b01d      	add	sp, #116	; 0x74
 8006604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	462a      	mov	r2, r5
 800660e:	4638      	mov	r0, r7
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <_svfiprintf_r+0x1fc>)
 8006612:	a904      	add	r1, sp, #16
 8006614:	f7fe fa54 	bl	8004ac0 <_printf_i>
 8006618:	e7eb      	b.n	80065f2 <_svfiprintf_r+0x1c2>
 800661a:	bf00      	nop
 800661c:	0800746c 	.word	0x0800746c
 8006620:	08007472 	.word	0x08007472
 8006624:	08007476 	.word	0x08007476
 8006628:	08004589 	.word	0x08004589
 800662c:	08006379 	.word	0x08006379

08006630 <_sbrk_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	2300      	movs	r3, #0
 8006634:	4d05      	ldr	r5, [pc, #20]	; (800664c <_sbrk_r+0x1c>)
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fa fe84 	bl	8001348 <_sbrk>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_sbrk_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_sbrk_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	20000310 	.word	0x20000310

08006650 <__assert_func>:
 8006650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006652:	4614      	mov	r4, r2
 8006654:	461a      	mov	r2, r3
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <__assert_func+0x2c>)
 8006658:	4605      	mov	r5, r0
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68d8      	ldr	r0, [r3, #12]
 800665e:	b14c      	cbz	r4, 8006674 <__assert_func+0x24>
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <__assert_func+0x30>)
 8006662:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006666:	9100      	str	r1, [sp, #0]
 8006668:	462b      	mov	r3, r5
 800666a:	4906      	ldr	r1, [pc, #24]	; (8006684 <__assert_func+0x34>)
 800666c:	f000 f80e 	bl	800668c <fiprintf>
 8006670:	f000 faaa 	bl	8006bc8 <abort>
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <__assert_func+0x38>)
 8006676:	461c      	mov	r4, r3
 8006678:	e7f3      	b.n	8006662 <__assert_func+0x12>
 800667a:	bf00      	nop
 800667c:	20000020 	.word	0x20000020
 8006680:	0800747d 	.word	0x0800747d
 8006684:	0800748a 	.word	0x0800748a
 8006688:	080074b8 	.word	0x080074b8

0800668c <fiprintf>:
 800668c:	b40e      	push	{r1, r2, r3}
 800668e:	b503      	push	{r0, r1, lr}
 8006690:	4601      	mov	r1, r0
 8006692:	ab03      	add	r3, sp, #12
 8006694:	4805      	ldr	r0, [pc, #20]	; (80066ac <fiprintf+0x20>)
 8006696:	f853 2b04 	ldr.w	r2, [r3], #4
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	f000 f895 	bl	80067cc <_vfiprintf_r>
 80066a2:	b002      	add	sp, #8
 80066a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a8:	b003      	add	sp, #12
 80066aa:	4770      	bx	lr
 80066ac:	20000020 	.word	0x20000020

080066b0 <__ascii_mbtowc>:
 80066b0:	b082      	sub	sp, #8
 80066b2:	b901      	cbnz	r1, 80066b6 <__ascii_mbtowc+0x6>
 80066b4:	a901      	add	r1, sp, #4
 80066b6:	b142      	cbz	r2, 80066ca <__ascii_mbtowc+0x1a>
 80066b8:	b14b      	cbz	r3, 80066ce <__ascii_mbtowc+0x1e>
 80066ba:	7813      	ldrb	r3, [r2, #0]
 80066bc:	600b      	str	r3, [r1, #0]
 80066be:	7812      	ldrb	r2, [r2, #0]
 80066c0:	1e10      	subs	r0, r2, #0
 80066c2:	bf18      	it	ne
 80066c4:	2001      	movne	r0, #1
 80066c6:	b002      	add	sp, #8
 80066c8:	4770      	bx	lr
 80066ca:	4610      	mov	r0, r2
 80066cc:	e7fb      	b.n	80066c6 <__ascii_mbtowc+0x16>
 80066ce:	f06f 0001 	mvn.w	r0, #1
 80066d2:	e7f8      	b.n	80066c6 <__ascii_mbtowc+0x16>

080066d4 <memmove>:
 80066d4:	4288      	cmp	r0, r1
 80066d6:	b510      	push	{r4, lr}
 80066d8:	eb01 0402 	add.w	r4, r1, r2
 80066dc:	d902      	bls.n	80066e4 <memmove+0x10>
 80066de:	4284      	cmp	r4, r0
 80066e0:	4623      	mov	r3, r4
 80066e2:	d807      	bhi.n	80066f4 <memmove+0x20>
 80066e4:	1e43      	subs	r3, r0, #1
 80066e6:	42a1      	cmp	r1, r4
 80066e8:	d008      	beq.n	80066fc <memmove+0x28>
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f2:	e7f8      	b.n	80066e6 <memmove+0x12>
 80066f4:	4601      	mov	r1, r0
 80066f6:	4402      	add	r2, r0
 80066f8:	428a      	cmp	r2, r1
 80066fa:	d100      	bne.n	80066fe <memmove+0x2a>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006706:	e7f7      	b.n	80066f8 <memmove+0x24>

08006708 <__malloc_lock>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__malloc_lock+0x8>)
 800670a:	f000 bc19 	b.w	8006f40 <__retarget_lock_acquire_recursive>
 800670e:	bf00      	nop
 8006710:	20000314 	.word	0x20000314

08006714 <__malloc_unlock>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__malloc_unlock+0x8>)
 8006716:	f000 bc14 	b.w	8006f42 <__retarget_lock_release_recursive>
 800671a:	bf00      	nop
 800671c:	20000314 	.word	0x20000314

08006720 <_realloc_r>:
 8006720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006724:	4680      	mov	r8, r0
 8006726:	4614      	mov	r4, r2
 8006728:	460e      	mov	r6, r1
 800672a:	b921      	cbnz	r1, 8006736 <_realloc_r+0x16>
 800672c:	4611      	mov	r1, r2
 800672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006732:	f7ff bdad 	b.w	8006290 <_malloc_r>
 8006736:	b92a      	cbnz	r2, 8006744 <_realloc_r+0x24>
 8006738:	f7ff fd42 	bl	80061c0 <_free_r>
 800673c:	4625      	mov	r5, r4
 800673e:	4628      	mov	r0, r5
 8006740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006744:	f000 fc64 	bl	8007010 <_malloc_usable_size_r>
 8006748:	4284      	cmp	r4, r0
 800674a:	4607      	mov	r7, r0
 800674c:	d802      	bhi.n	8006754 <_realloc_r+0x34>
 800674e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006752:	d812      	bhi.n	800677a <_realloc_r+0x5a>
 8006754:	4621      	mov	r1, r4
 8006756:	4640      	mov	r0, r8
 8006758:	f7ff fd9a 	bl	8006290 <_malloc_r>
 800675c:	4605      	mov	r5, r0
 800675e:	2800      	cmp	r0, #0
 8006760:	d0ed      	beq.n	800673e <_realloc_r+0x1e>
 8006762:	42bc      	cmp	r4, r7
 8006764:	4622      	mov	r2, r4
 8006766:	4631      	mov	r1, r6
 8006768:	bf28      	it	cs
 800676a:	463a      	movcs	r2, r7
 800676c:	f7ff f984 	bl	8005a78 <memcpy>
 8006770:	4631      	mov	r1, r6
 8006772:	4640      	mov	r0, r8
 8006774:	f7ff fd24 	bl	80061c0 <_free_r>
 8006778:	e7e1      	b.n	800673e <_realloc_r+0x1e>
 800677a:	4635      	mov	r5, r6
 800677c:	e7df      	b.n	800673e <_realloc_r+0x1e>

0800677e <__sfputc_r>:
 800677e:	6893      	ldr	r3, [r2, #8]
 8006780:	b410      	push	{r4}
 8006782:	3b01      	subs	r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	6093      	str	r3, [r2, #8]
 8006788:	da07      	bge.n	800679a <__sfputc_r+0x1c>
 800678a:	6994      	ldr	r4, [r2, #24]
 800678c:	42a3      	cmp	r3, r4
 800678e:	db01      	blt.n	8006794 <__sfputc_r+0x16>
 8006790:	290a      	cmp	r1, #10
 8006792:	d102      	bne.n	800679a <__sfputc_r+0x1c>
 8006794:	bc10      	pop	{r4}
 8006796:	f000 b949 	b.w	8006a2c <__swbuf_r>
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	1c58      	adds	r0, r3, #1
 800679e:	6010      	str	r0, [r2, #0]
 80067a0:	7019      	strb	r1, [r3, #0]
 80067a2:	4608      	mov	r0, r1
 80067a4:	bc10      	pop	{r4}
 80067a6:	4770      	bx	lr

080067a8 <__sfputs_r>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	4614      	mov	r4, r2
 80067b0:	18d5      	adds	r5, r2, r3
 80067b2:	42ac      	cmp	r4, r5
 80067b4:	d101      	bne.n	80067ba <__sfputs_r+0x12>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e007      	b.n	80067ca <__sfputs_r+0x22>
 80067ba:	463a      	mov	r2, r7
 80067bc:	4630      	mov	r0, r6
 80067be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c2:	f7ff ffdc 	bl	800677e <__sfputc_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d1f3      	bne.n	80067b2 <__sfputs_r+0xa>
 80067ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067cc <_vfiprintf_r>:
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	460d      	mov	r5, r1
 80067d2:	4614      	mov	r4, r2
 80067d4:	4698      	mov	r8, r3
 80067d6:	4606      	mov	r6, r0
 80067d8:	b09d      	sub	sp, #116	; 0x74
 80067da:	b118      	cbz	r0, 80067e4 <_vfiprintf_r+0x18>
 80067dc:	6983      	ldr	r3, [r0, #24]
 80067de:	b90b      	cbnz	r3, 80067e4 <_vfiprintf_r+0x18>
 80067e0:	f000 fb10 	bl	8006e04 <__sinit>
 80067e4:	4b89      	ldr	r3, [pc, #548]	; (8006a0c <_vfiprintf_r+0x240>)
 80067e6:	429d      	cmp	r5, r3
 80067e8:	d11b      	bne.n	8006822 <_vfiprintf_r+0x56>
 80067ea:	6875      	ldr	r5, [r6, #4]
 80067ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	d405      	bmi.n	80067fe <_vfiprintf_r+0x32>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	059a      	lsls	r2, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_vfiprintf_r+0x32>
 80067f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067fa:	f000 fba1 	bl	8006f40 <__retarget_lock_acquire_recursive>
 80067fe:	89ab      	ldrh	r3, [r5, #12]
 8006800:	071b      	lsls	r3, r3, #28
 8006802:	d501      	bpl.n	8006808 <_vfiprintf_r+0x3c>
 8006804:	692b      	ldr	r3, [r5, #16]
 8006806:	b9eb      	cbnz	r3, 8006844 <_vfiprintf_r+0x78>
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f000 f96e 	bl	8006aec <__swsetup_r>
 8006810:	b1c0      	cbz	r0, 8006844 <_vfiprintf_r+0x78>
 8006812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006814:	07dc      	lsls	r4, r3, #31
 8006816:	d50e      	bpl.n	8006836 <_vfiprintf_r+0x6a>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	b01d      	add	sp, #116	; 0x74
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	4b7b      	ldr	r3, [pc, #492]	; (8006a10 <_vfiprintf_r+0x244>)
 8006824:	429d      	cmp	r5, r3
 8006826:	d101      	bne.n	800682c <_vfiprintf_r+0x60>
 8006828:	68b5      	ldr	r5, [r6, #8]
 800682a:	e7df      	b.n	80067ec <_vfiprintf_r+0x20>
 800682c:	4b79      	ldr	r3, [pc, #484]	; (8006a14 <_vfiprintf_r+0x248>)
 800682e:	429d      	cmp	r5, r3
 8006830:	bf08      	it	eq
 8006832:	68f5      	ldreq	r5, [r6, #12]
 8006834:	e7da      	b.n	80067ec <_vfiprintf_r+0x20>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	0598      	lsls	r0, r3, #22
 800683a:	d4ed      	bmi.n	8006818 <_vfiprintf_r+0x4c>
 800683c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800683e:	f000 fb80 	bl	8006f42 <__retarget_lock_release_recursive>
 8006842:	e7e9      	b.n	8006818 <_vfiprintf_r+0x4c>
 8006844:	2300      	movs	r3, #0
 8006846:	9309      	str	r3, [sp, #36]	; 0x24
 8006848:	2320      	movs	r3, #32
 800684a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800684e:	2330      	movs	r3, #48	; 0x30
 8006850:	f04f 0901 	mov.w	r9, #1
 8006854:	f8cd 800c 	str.w	r8, [sp, #12]
 8006858:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006a18 <_vfiprintf_r+0x24c>
 800685c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006860:	4623      	mov	r3, r4
 8006862:	469a      	mov	sl, r3
 8006864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006868:	b10a      	cbz	r2, 800686e <_vfiprintf_r+0xa2>
 800686a:	2a25      	cmp	r2, #37	; 0x25
 800686c:	d1f9      	bne.n	8006862 <_vfiprintf_r+0x96>
 800686e:	ebba 0b04 	subs.w	fp, sl, r4
 8006872:	d00b      	beq.n	800688c <_vfiprintf_r+0xc0>
 8006874:	465b      	mov	r3, fp
 8006876:	4622      	mov	r2, r4
 8006878:	4629      	mov	r1, r5
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff ff94 	bl	80067a8 <__sfputs_r>
 8006880:	3001      	adds	r0, #1
 8006882:	f000 80aa 	beq.w	80069da <_vfiprintf_r+0x20e>
 8006886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006888:	445a      	add	r2, fp
 800688a:	9209      	str	r2, [sp, #36]	; 0x24
 800688c:	f89a 3000 	ldrb.w	r3, [sl]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80a2 	beq.w	80069da <_vfiprintf_r+0x20e>
 8006896:	2300      	movs	r3, #0
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a0:	f10a 0a01 	add.w	sl, sl, #1
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ac:	931a      	str	r3, [sp, #104]	; 0x68
 80068ae:	4654      	mov	r4, sl
 80068b0:	2205      	movs	r2, #5
 80068b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b6:	4858      	ldr	r0, [pc, #352]	; (8006a18 <_vfiprintf_r+0x24c>)
 80068b8:	f7ff f8d0 	bl	8005a5c <memchr>
 80068bc:	9a04      	ldr	r2, [sp, #16]
 80068be:	b9d8      	cbnz	r0, 80068f8 <_vfiprintf_r+0x12c>
 80068c0:	06d1      	lsls	r1, r2, #27
 80068c2:	bf44      	itt	mi
 80068c4:	2320      	movmi	r3, #32
 80068c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ca:	0713      	lsls	r3, r2, #28
 80068cc:	bf44      	itt	mi
 80068ce:	232b      	movmi	r3, #43	; 0x2b
 80068d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d4:	f89a 3000 	ldrb.w	r3, [sl]
 80068d8:	2b2a      	cmp	r3, #42	; 0x2a
 80068da:	d015      	beq.n	8006908 <_vfiprintf_r+0x13c>
 80068dc:	4654      	mov	r4, sl
 80068de:	2000      	movs	r0, #0
 80068e0:	f04f 0c0a 	mov.w	ip, #10
 80068e4:	9a07      	ldr	r2, [sp, #28]
 80068e6:	4621      	mov	r1, r4
 80068e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ec:	3b30      	subs	r3, #48	; 0x30
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	d94e      	bls.n	8006990 <_vfiprintf_r+0x1c4>
 80068f2:	b1b0      	cbz	r0, 8006922 <_vfiprintf_r+0x156>
 80068f4:	9207      	str	r2, [sp, #28]
 80068f6:	e014      	b.n	8006922 <_vfiprintf_r+0x156>
 80068f8:	eba0 0308 	sub.w	r3, r0, r8
 80068fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006900:	4313      	orrs	r3, r2
 8006902:	46a2      	mov	sl, r4
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	e7d2      	b.n	80068ae <_vfiprintf_r+0xe2>
 8006908:	9b03      	ldr	r3, [sp, #12]
 800690a:	1d19      	adds	r1, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	9103      	str	r1, [sp, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	bfbb      	ittet	lt
 8006914:	425b      	neglt	r3, r3
 8006916:	f042 0202 	orrlt.w	r2, r2, #2
 800691a:	9307      	strge	r3, [sp, #28]
 800691c:	9307      	strlt	r3, [sp, #28]
 800691e:	bfb8      	it	lt
 8006920:	9204      	strlt	r2, [sp, #16]
 8006922:	7823      	ldrb	r3, [r4, #0]
 8006924:	2b2e      	cmp	r3, #46	; 0x2e
 8006926:	d10c      	bne.n	8006942 <_vfiprintf_r+0x176>
 8006928:	7863      	ldrb	r3, [r4, #1]
 800692a:	2b2a      	cmp	r3, #42	; 0x2a
 800692c:	d135      	bne.n	800699a <_vfiprintf_r+0x1ce>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	3402      	adds	r4, #2
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	9203      	str	r2, [sp, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	bfb8      	it	lt
 800693c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006a1c <_vfiprintf_r+0x250>
 8006946:	2203      	movs	r2, #3
 8006948:	4650      	mov	r0, sl
 800694a:	7821      	ldrb	r1, [r4, #0]
 800694c:	f7ff f886 	bl	8005a5c <memchr>
 8006950:	b140      	cbz	r0, 8006964 <_vfiprintf_r+0x198>
 8006952:	2340      	movs	r3, #64	; 0x40
 8006954:	eba0 000a 	sub.w	r0, r0, sl
 8006958:	fa03 f000 	lsl.w	r0, r3, r0
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	3401      	adds	r4, #1
 8006960:	4303      	orrs	r3, r0
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006968:	2206      	movs	r2, #6
 800696a:	482d      	ldr	r0, [pc, #180]	; (8006a20 <_vfiprintf_r+0x254>)
 800696c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006970:	f7ff f874 	bl	8005a5c <memchr>
 8006974:	2800      	cmp	r0, #0
 8006976:	d03f      	beq.n	80069f8 <_vfiprintf_r+0x22c>
 8006978:	4b2a      	ldr	r3, [pc, #168]	; (8006a24 <_vfiprintf_r+0x258>)
 800697a:	bb1b      	cbnz	r3, 80069c4 <_vfiprintf_r+0x1f8>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	3307      	adds	r3, #7
 8006980:	f023 0307 	bic.w	r3, r3, #7
 8006984:	3308      	adds	r3, #8
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698a:	443b      	add	r3, r7
 800698c:	9309      	str	r3, [sp, #36]	; 0x24
 800698e:	e767      	b.n	8006860 <_vfiprintf_r+0x94>
 8006990:	460c      	mov	r4, r1
 8006992:	2001      	movs	r0, #1
 8006994:	fb0c 3202 	mla	r2, ip, r2, r3
 8006998:	e7a5      	b.n	80068e6 <_vfiprintf_r+0x11a>
 800699a:	2300      	movs	r3, #0
 800699c:	f04f 0c0a 	mov.w	ip, #10
 80069a0:	4619      	mov	r1, r3
 80069a2:	3401      	adds	r4, #1
 80069a4:	9305      	str	r3, [sp, #20]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ac:	3a30      	subs	r2, #48	; 0x30
 80069ae:	2a09      	cmp	r2, #9
 80069b0:	d903      	bls.n	80069ba <_vfiprintf_r+0x1ee>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0c5      	beq.n	8006942 <_vfiprintf_r+0x176>
 80069b6:	9105      	str	r1, [sp, #20]
 80069b8:	e7c3      	b.n	8006942 <_vfiprintf_r+0x176>
 80069ba:	4604      	mov	r4, r0
 80069bc:	2301      	movs	r3, #1
 80069be:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c2:	e7f0      	b.n	80069a6 <_vfiprintf_r+0x1da>
 80069c4:	ab03      	add	r3, sp, #12
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <_vfiprintf_r+0x25c>)
 80069ce:	a904      	add	r1, sp, #16
 80069d0:	f7fd fdda 	bl	8004588 <_printf_float>
 80069d4:	4607      	mov	r7, r0
 80069d6:	1c78      	adds	r0, r7, #1
 80069d8:	d1d6      	bne.n	8006988 <_vfiprintf_r+0x1bc>
 80069da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069dc:	07d9      	lsls	r1, r3, #31
 80069de:	d405      	bmi.n	80069ec <_vfiprintf_r+0x220>
 80069e0:	89ab      	ldrh	r3, [r5, #12]
 80069e2:	059a      	lsls	r2, r3, #22
 80069e4:	d402      	bmi.n	80069ec <_vfiprintf_r+0x220>
 80069e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e8:	f000 faab 	bl	8006f42 <__retarget_lock_release_recursive>
 80069ec:	89ab      	ldrh	r3, [r5, #12]
 80069ee:	065b      	lsls	r3, r3, #25
 80069f0:	f53f af12 	bmi.w	8006818 <_vfiprintf_r+0x4c>
 80069f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f6:	e711      	b.n	800681c <_vfiprintf_r+0x50>
 80069f8:	ab03      	add	r3, sp, #12
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	462a      	mov	r2, r5
 80069fe:	4630      	mov	r0, r6
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <_vfiprintf_r+0x25c>)
 8006a02:	a904      	add	r1, sp, #16
 8006a04:	f7fe f85c 	bl	8004ac0 <_printf_i>
 8006a08:	e7e4      	b.n	80069d4 <_vfiprintf_r+0x208>
 8006a0a:	bf00      	nop
 8006a0c:	080075e4 	.word	0x080075e4
 8006a10:	08007604 	.word	0x08007604
 8006a14:	080075c4 	.word	0x080075c4
 8006a18:	0800746c 	.word	0x0800746c
 8006a1c:	08007472 	.word	0x08007472
 8006a20:	08007476 	.word	0x08007476
 8006a24:	08004589 	.word	0x08004589
 8006a28:	080067a9 	.word	0x080067a9

08006a2c <__swbuf_r>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	460e      	mov	r6, r1
 8006a30:	4614      	mov	r4, r2
 8006a32:	4605      	mov	r5, r0
 8006a34:	b118      	cbz	r0, 8006a3e <__swbuf_r+0x12>
 8006a36:	6983      	ldr	r3, [r0, #24]
 8006a38:	b90b      	cbnz	r3, 8006a3e <__swbuf_r+0x12>
 8006a3a:	f000 f9e3 	bl	8006e04 <__sinit>
 8006a3e:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <__swbuf_r+0x98>)
 8006a40:	429c      	cmp	r4, r3
 8006a42:	d12b      	bne.n	8006a9c <__swbuf_r+0x70>
 8006a44:	686c      	ldr	r4, [r5, #4]
 8006a46:	69a3      	ldr	r3, [r4, #24]
 8006a48:	60a3      	str	r3, [r4, #8]
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	071a      	lsls	r2, r3, #28
 8006a4e:	d52f      	bpl.n	8006ab0 <__swbuf_r+0x84>
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	b36b      	cbz	r3, 8006ab0 <__swbuf_r+0x84>
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	6820      	ldr	r0, [r4, #0]
 8006a58:	b2f6      	uxtb	r6, r6
 8006a5a:	1ac0      	subs	r0, r0, r3
 8006a5c:	6963      	ldr	r3, [r4, #20]
 8006a5e:	4637      	mov	r7, r6
 8006a60:	4283      	cmp	r3, r0
 8006a62:	dc04      	bgt.n	8006a6e <__swbuf_r+0x42>
 8006a64:	4621      	mov	r1, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f938 	bl	8006cdc <_fflush_r>
 8006a6c:	bb30      	cbnz	r0, 8006abc <__swbuf_r+0x90>
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	3001      	adds	r0, #1
 8006a72:	3b01      	subs	r3, #1
 8006a74:	60a3      	str	r3, [r4, #8]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	6022      	str	r2, [r4, #0]
 8006a7c:	701e      	strb	r6, [r3, #0]
 8006a7e:	6963      	ldr	r3, [r4, #20]
 8006a80:	4283      	cmp	r3, r0
 8006a82:	d004      	beq.n	8006a8e <__swbuf_r+0x62>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	07db      	lsls	r3, r3, #31
 8006a88:	d506      	bpl.n	8006a98 <__swbuf_r+0x6c>
 8006a8a:	2e0a      	cmp	r6, #10
 8006a8c:	d104      	bne.n	8006a98 <__swbuf_r+0x6c>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 f923 	bl	8006cdc <_fflush_r>
 8006a96:	b988      	cbnz	r0, 8006abc <__swbuf_r+0x90>
 8006a98:	4638      	mov	r0, r7
 8006a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <__swbuf_r+0x9c>)
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d101      	bne.n	8006aa6 <__swbuf_r+0x7a>
 8006aa2:	68ac      	ldr	r4, [r5, #8]
 8006aa4:	e7cf      	b.n	8006a46 <__swbuf_r+0x1a>
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <__swbuf_r+0xa0>)
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	bf08      	it	eq
 8006aac:	68ec      	ldreq	r4, [r5, #12]
 8006aae:	e7ca      	b.n	8006a46 <__swbuf_r+0x1a>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 f81a 	bl	8006aec <__swsetup_r>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d0cb      	beq.n	8006a54 <__swbuf_r+0x28>
 8006abc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ac0:	e7ea      	b.n	8006a98 <__swbuf_r+0x6c>
 8006ac2:	bf00      	nop
 8006ac4:	080075e4 	.word	0x080075e4
 8006ac8:	08007604 	.word	0x08007604
 8006acc:	080075c4 	.word	0x080075c4

08006ad0 <__ascii_wctomb>:
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	b141      	cbz	r1, 8006ae8 <__ascii_wctomb+0x18>
 8006ad6:	2aff      	cmp	r2, #255	; 0xff
 8006ad8:	d904      	bls.n	8006ae4 <__ascii_wctomb+0x14>
 8006ada:	228a      	movs	r2, #138	; 0x8a
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	4770      	bx	lr
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	700a      	strb	r2, [r1, #0]
 8006ae8:	4770      	bx	lr
	...

08006aec <__swsetup_r>:
 8006aec:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <__swsetup_r+0xcc>)
 8006aee:	b570      	push	{r4, r5, r6, lr}
 8006af0:	681d      	ldr	r5, [r3, #0]
 8006af2:	4606      	mov	r6, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	b125      	cbz	r5, 8006b02 <__swsetup_r+0x16>
 8006af8:	69ab      	ldr	r3, [r5, #24]
 8006afa:	b913      	cbnz	r3, 8006b02 <__swsetup_r+0x16>
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 f981 	bl	8006e04 <__sinit>
 8006b02:	4b2e      	ldr	r3, [pc, #184]	; (8006bbc <__swsetup_r+0xd0>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	d10f      	bne.n	8006b28 <__swsetup_r+0x3c>
 8006b08:	686c      	ldr	r4, [r5, #4]
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b10:	0719      	lsls	r1, r3, #28
 8006b12:	d42c      	bmi.n	8006b6e <__swsetup_r+0x82>
 8006b14:	06dd      	lsls	r5, r3, #27
 8006b16:	d411      	bmi.n	8006b3c <__swsetup_r+0x50>
 8006b18:	2309      	movs	r3, #9
 8006b1a:	6033      	str	r3, [r6, #0]
 8006b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	e03e      	b.n	8006ba6 <__swsetup_r+0xba>
 8006b28:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <__swsetup_r+0xd4>)
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d101      	bne.n	8006b32 <__swsetup_r+0x46>
 8006b2e:	68ac      	ldr	r4, [r5, #8]
 8006b30:	e7eb      	b.n	8006b0a <__swsetup_r+0x1e>
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <__swsetup_r+0xd8>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	bf08      	it	eq
 8006b38:	68ec      	ldreq	r4, [r5, #12]
 8006b3a:	e7e6      	b.n	8006b0a <__swsetup_r+0x1e>
 8006b3c:	0758      	lsls	r0, r3, #29
 8006b3e:	d512      	bpl.n	8006b66 <__swsetup_r+0x7a>
 8006b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b42:	b141      	cbz	r1, 8006b56 <__swsetup_r+0x6a>
 8006b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b48:	4299      	cmp	r1, r3
 8006b4a:	d002      	beq.n	8006b52 <__swsetup_r+0x66>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff fb37 	bl	80061c0 <_free_r>
 8006b52:	2300      	movs	r3, #0
 8006b54:	6363      	str	r3, [r4, #52]	; 0x34
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b5c:	81a3      	strh	r3, [r4, #12]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	f043 0308 	orr.w	r3, r3, #8
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	b94b      	cbnz	r3, 8006b86 <__swsetup_r+0x9a>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7c:	d003      	beq.n	8006b86 <__swsetup_r+0x9a>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4630      	mov	r0, r6
 8006b82:	f000 fa05 	bl	8006f90 <__smakebuf_r>
 8006b86:	89a0      	ldrh	r0, [r4, #12]
 8006b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b8c:	f010 0301 	ands.w	r3, r0, #1
 8006b90:	d00a      	beq.n	8006ba8 <__swsetup_r+0xbc>
 8006b92:	2300      	movs	r3, #0
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6963      	ldr	r3, [r4, #20]
 8006b98:	425b      	negs	r3, r3
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	b943      	cbnz	r3, 8006bb2 <__swsetup_r+0xc6>
 8006ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ba4:	d1ba      	bne.n	8006b1c <__swsetup_r+0x30>
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	0781      	lsls	r1, r0, #30
 8006baa:	bf58      	it	pl
 8006bac:	6963      	ldrpl	r3, [r4, #20]
 8006bae:	60a3      	str	r3, [r4, #8]
 8006bb0:	e7f4      	b.n	8006b9c <__swsetup_r+0xb0>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e7f7      	b.n	8006ba6 <__swsetup_r+0xba>
 8006bb6:	bf00      	nop
 8006bb8:	20000020 	.word	0x20000020
 8006bbc:	080075e4 	.word	0x080075e4
 8006bc0:	08007604 	.word	0x08007604
 8006bc4:	080075c4 	.word	0x080075c4

08006bc8 <abort>:
 8006bc8:	2006      	movs	r0, #6
 8006bca:	b508      	push	{r3, lr}
 8006bcc:	f000 fa50 	bl	8007070 <raise>
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f7fa fb46 	bl	8001262 <_exit>
	...

08006bd8 <__sflush_r>:
 8006bd8:	898a      	ldrh	r2, [r1, #12]
 8006bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bdc:	4605      	mov	r5, r0
 8006bde:	0710      	lsls	r0, r2, #28
 8006be0:	460c      	mov	r4, r1
 8006be2:	d457      	bmi.n	8006c94 <__sflush_r+0xbc>
 8006be4:	684b      	ldr	r3, [r1, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dc04      	bgt.n	8006bf4 <__sflush_r+0x1c>
 8006bea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc01      	bgt.n	8006bf4 <__sflush_r+0x1c>
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	d0fa      	beq.n	8006bf0 <__sflush_r+0x18>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c00:	682f      	ldr	r7, [r5, #0]
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	d032      	beq.n	8006c6c <__sflush_r+0x94>
 8006c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	075a      	lsls	r2, r3, #29
 8006c0c:	d505      	bpl.n	8006c1a <__sflush_r+0x42>
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	1ac0      	subs	r0, r0, r3
 8006c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c14:	b10b      	cbz	r3, 8006c1a <__sflush_r+0x42>
 8006c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c18:	1ac0      	subs	r0, r0, r3
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c20:	4628      	mov	r0, r5
 8006c22:	6a21      	ldr	r1, [r4, #32]
 8006c24:	47b0      	blx	r6
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	d106      	bne.n	8006c3a <__sflush_r+0x62>
 8006c2c:	6829      	ldr	r1, [r5, #0]
 8006c2e:	291d      	cmp	r1, #29
 8006c30:	d82c      	bhi.n	8006c8c <__sflush_r+0xb4>
 8006c32:	4a29      	ldr	r2, [pc, #164]	; (8006cd8 <__sflush_r+0x100>)
 8006c34:	40ca      	lsrs	r2, r1
 8006c36:	07d6      	lsls	r6, r2, #31
 8006c38:	d528      	bpl.n	8006c8c <__sflush_r+0xb4>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	6062      	str	r2, [r4, #4]
 8006c3e:	6922      	ldr	r2, [r4, #16]
 8006c40:	04d9      	lsls	r1, r3, #19
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	d504      	bpl.n	8006c50 <__sflush_r+0x78>
 8006c46:	1c42      	adds	r2, r0, #1
 8006c48:	d101      	bne.n	8006c4e <__sflush_r+0x76>
 8006c4a:	682b      	ldr	r3, [r5, #0]
 8006c4c:	b903      	cbnz	r3, 8006c50 <__sflush_r+0x78>
 8006c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c52:	602f      	str	r7, [r5, #0]
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d0cb      	beq.n	8006bf0 <__sflush_r+0x18>
 8006c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	d002      	beq.n	8006c66 <__sflush_r+0x8e>
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7ff faad 	bl	80061c0 <_free_r>
 8006c66:	2000      	movs	r0, #0
 8006c68:	6360      	str	r0, [r4, #52]	; 0x34
 8006c6a:	e7c2      	b.n	8006bf2 <__sflush_r+0x1a>
 8006c6c:	6a21      	ldr	r1, [r4, #32]
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b0      	blx	r6
 8006c74:	1c41      	adds	r1, r0, #1
 8006c76:	d1c7      	bne.n	8006c08 <__sflush_r+0x30>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0c4      	beq.n	8006c08 <__sflush_r+0x30>
 8006c7e:	2b1d      	cmp	r3, #29
 8006c80:	d001      	beq.n	8006c86 <__sflush_r+0xae>
 8006c82:	2b16      	cmp	r3, #22
 8006c84:	d101      	bne.n	8006c8a <__sflush_r+0xb2>
 8006c86:	602f      	str	r7, [r5, #0]
 8006c88:	e7b2      	b.n	8006bf0 <__sflush_r+0x18>
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	e7ae      	b.n	8006bf2 <__sflush_r+0x1a>
 8006c94:	690f      	ldr	r7, [r1, #16]
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	d0aa      	beq.n	8006bf0 <__sflush_r+0x18>
 8006c9a:	0793      	lsls	r3, r2, #30
 8006c9c:	bf18      	it	ne
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	680e      	ldr	r6, [r1, #0]
 8006ca2:	bf08      	it	eq
 8006ca4:	694b      	ldreq	r3, [r1, #20]
 8006ca6:	1bf6      	subs	r6, r6, r7
 8006ca8:	600f      	str	r7, [r1, #0]
 8006caa:	608b      	str	r3, [r1, #8]
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	dd9f      	ble.n	8006bf0 <__sflush_r+0x18>
 8006cb0:	4633      	mov	r3, r6
 8006cb2:	463a      	mov	r2, r7
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	6a21      	ldr	r1, [r4, #32]
 8006cb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006cbc:	47e0      	blx	ip
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dc06      	bgt.n	8006cd0 <__sflush_r+0xf8>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	e790      	b.n	8006bf2 <__sflush_r+0x1a>
 8006cd0:	4407      	add	r7, r0
 8006cd2:	1a36      	subs	r6, r6, r0
 8006cd4:	e7ea      	b.n	8006cac <__sflush_r+0xd4>
 8006cd6:	bf00      	nop
 8006cd8:	20400001 	.word	0x20400001

08006cdc <_fflush_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	b913      	cbnz	r3, 8006cec <_fflush_r+0x10>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	4628      	mov	r0, r5
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	b118      	cbz	r0, 8006cf6 <_fflush_r+0x1a>
 8006cee:	6983      	ldr	r3, [r0, #24]
 8006cf0:	b90b      	cbnz	r3, 8006cf6 <_fflush_r+0x1a>
 8006cf2:	f000 f887 	bl	8006e04 <__sinit>
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <_fflush_r+0x6c>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	d11b      	bne.n	8006d34 <_fflush_r+0x58>
 8006cfc:	686c      	ldr	r4, [r5, #4]
 8006cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0ef      	beq.n	8006ce6 <_fflush_r+0xa>
 8006d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d08:	07d0      	lsls	r0, r2, #31
 8006d0a:	d404      	bmi.n	8006d16 <_fflush_r+0x3a>
 8006d0c:	0599      	lsls	r1, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_fflush_r+0x3a>
 8006d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d12:	f000 f915 	bl	8006f40 <__retarget_lock_acquire_recursive>
 8006d16:	4628      	mov	r0, r5
 8006d18:	4621      	mov	r1, r4
 8006d1a:	f7ff ff5d 	bl	8006bd8 <__sflush_r>
 8006d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d20:	4605      	mov	r5, r0
 8006d22:	07da      	lsls	r2, r3, #31
 8006d24:	d4e0      	bmi.n	8006ce8 <_fflush_r+0xc>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	059b      	lsls	r3, r3, #22
 8006d2a:	d4dd      	bmi.n	8006ce8 <_fflush_r+0xc>
 8006d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d2e:	f000 f908 	bl	8006f42 <__retarget_lock_release_recursive>
 8006d32:	e7d9      	b.n	8006ce8 <_fflush_r+0xc>
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <_fflush_r+0x70>)
 8006d36:	429c      	cmp	r4, r3
 8006d38:	d101      	bne.n	8006d3e <_fflush_r+0x62>
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	e7df      	b.n	8006cfe <_fflush_r+0x22>
 8006d3e:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <_fflush_r+0x74>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	bf08      	it	eq
 8006d44:	68ec      	ldreq	r4, [r5, #12]
 8006d46:	e7da      	b.n	8006cfe <_fflush_r+0x22>
 8006d48:	080075e4 	.word	0x080075e4
 8006d4c:	08007604 	.word	0x08007604
 8006d50:	080075c4 	.word	0x080075c4

08006d54 <std>:
 8006d54:	2300      	movs	r3, #0
 8006d56:	b510      	push	{r4, lr}
 8006d58:	4604      	mov	r4, r0
 8006d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d62:	6083      	str	r3, [r0, #8]
 8006d64:	8181      	strh	r1, [r0, #12]
 8006d66:	6643      	str	r3, [r0, #100]	; 0x64
 8006d68:	81c2      	strh	r2, [r0, #14]
 8006d6a:	6183      	str	r3, [r0, #24]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	2208      	movs	r2, #8
 8006d70:	305c      	adds	r0, #92	; 0x5c
 8006d72:	f7fd fb63 	bl	800443c <memset>
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <std+0x38>)
 8006d78:	6224      	str	r4, [r4, #32]
 8006d7a:	6263      	str	r3, [r4, #36]	; 0x24
 8006d7c:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <std+0x3c>)
 8006d7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <std+0x40>)
 8006d82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <std+0x44>)
 8006d86:	6323      	str	r3, [r4, #48]	; 0x30
 8006d88:	bd10      	pop	{r4, pc}
 8006d8a:	bf00      	nop
 8006d8c:	080070a9 	.word	0x080070a9
 8006d90:	080070cb 	.word	0x080070cb
 8006d94:	08007103 	.word	0x08007103
 8006d98:	08007127 	.word	0x08007127

08006d9c <_cleanup_r>:
 8006d9c:	4901      	ldr	r1, [pc, #4]	; (8006da4 <_cleanup_r+0x8>)
 8006d9e:	f000 b8af 	b.w	8006f00 <_fwalk_reent>
 8006da2:	bf00      	nop
 8006da4:	08006cdd 	.word	0x08006cdd

08006da8 <__sfmoreglue>:
 8006da8:	2268      	movs	r2, #104	; 0x68
 8006daa:	b570      	push	{r4, r5, r6, lr}
 8006dac:	1e4d      	subs	r5, r1, #1
 8006dae:	4355      	muls	r5, r2
 8006db0:	460e      	mov	r6, r1
 8006db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006db6:	f7ff fa6b 	bl	8006290 <_malloc_r>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	b140      	cbz	r0, 8006dd0 <__sfmoreglue+0x28>
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8006dc4:	300c      	adds	r0, #12
 8006dc6:	60a0      	str	r0, [r4, #8]
 8006dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dcc:	f7fd fb36 	bl	800443c <memset>
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}

08006dd4 <__sfp_lock_acquire>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__sfp_lock_acquire+0x8>)
 8006dd6:	f000 b8b3 	b.w	8006f40 <__retarget_lock_acquire_recursive>
 8006dda:	bf00      	nop
 8006ddc:	20000315 	.word	0x20000315

08006de0 <__sfp_lock_release>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__sfp_lock_release+0x8>)
 8006de2:	f000 b8ae 	b.w	8006f42 <__retarget_lock_release_recursive>
 8006de6:	bf00      	nop
 8006de8:	20000315 	.word	0x20000315

08006dec <__sinit_lock_acquire>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__sinit_lock_acquire+0x8>)
 8006dee:	f000 b8a7 	b.w	8006f40 <__retarget_lock_acquire_recursive>
 8006df2:	bf00      	nop
 8006df4:	20000316 	.word	0x20000316

08006df8 <__sinit_lock_release>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__sinit_lock_release+0x8>)
 8006dfa:	f000 b8a2 	b.w	8006f42 <__retarget_lock_release_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20000316 	.word	0x20000316

08006e04 <__sinit>:
 8006e04:	b510      	push	{r4, lr}
 8006e06:	4604      	mov	r4, r0
 8006e08:	f7ff fff0 	bl	8006dec <__sinit_lock_acquire>
 8006e0c:	69a3      	ldr	r3, [r4, #24]
 8006e0e:	b11b      	cbz	r3, 8006e18 <__sinit+0x14>
 8006e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e14:	f7ff bff0 	b.w	8006df8 <__sinit_lock_release>
 8006e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <__sinit+0x68>)
 8006e20:	4a13      	ldr	r2, [pc, #76]	; (8006e70 <__sinit+0x6c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	bf08      	it	eq
 8006e2a:	2301      	moveq	r3, #1
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bf08      	it	eq
 8006e30:	61a3      	streq	r3, [r4, #24]
 8006e32:	f000 f81f 	bl	8006e74 <__sfp>
 8006e36:	6060      	str	r0, [r4, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f81b 	bl	8006e74 <__sfp>
 8006e3e:	60a0      	str	r0, [r4, #8]
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 f817 	bl	8006e74 <__sfp>
 8006e46:	2200      	movs	r2, #0
 8006e48:	2104      	movs	r1, #4
 8006e4a:	60e0      	str	r0, [r4, #12]
 8006e4c:	6860      	ldr	r0, [r4, #4]
 8006e4e:	f7ff ff81 	bl	8006d54 <std>
 8006e52:	2201      	movs	r2, #1
 8006e54:	2109      	movs	r1, #9
 8006e56:	68a0      	ldr	r0, [r4, #8]
 8006e58:	f7ff ff7c 	bl	8006d54 <std>
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	2112      	movs	r1, #18
 8006e60:	68e0      	ldr	r0, [r4, #12]
 8006e62:	f7ff ff77 	bl	8006d54 <std>
 8006e66:	2301      	movs	r3, #1
 8006e68:	61a3      	str	r3, [r4, #24]
 8006e6a:	e7d1      	b.n	8006e10 <__sinit+0xc>
 8006e6c:	0800724c 	.word	0x0800724c
 8006e70:	08006d9d 	.word	0x08006d9d

08006e74 <__sfp>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	4607      	mov	r7, r0
 8006e78:	f7ff ffac 	bl	8006dd4 <__sfp_lock_acquire>
 8006e7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <__sfp+0x84>)
 8006e7e:	681e      	ldr	r6, [r3, #0]
 8006e80:	69b3      	ldr	r3, [r6, #24]
 8006e82:	b913      	cbnz	r3, 8006e8a <__sfp+0x16>
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7ff ffbd 	bl	8006e04 <__sinit>
 8006e8a:	3648      	adds	r6, #72	; 0x48
 8006e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	d503      	bpl.n	8006e9c <__sfp+0x28>
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	b30b      	cbz	r3, 8006edc <__sfp+0x68>
 8006e98:	6836      	ldr	r6, [r6, #0]
 8006e9a:	e7f7      	b.n	8006e8c <__sfp+0x18>
 8006e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ea0:	b9d5      	cbnz	r5, 8006ed8 <__sfp+0x64>
 8006ea2:	4b16      	ldr	r3, [pc, #88]	; (8006efc <__sfp+0x88>)
 8006ea4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ea8:	60e3      	str	r3, [r4, #12]
 8006eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8006eac:	f000 f847 	bl	8006f3e <__retarget_lock_init_recursive>
 8006eb0:	f7ff ff96 	bl	8006de0 <__sfp_lock_release>
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ec0:	6025      	str	r5, [r4, #0]
 8006ec2:	61a5      	str	r5, [r4, #24]
 8006ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ec8:	f7fd fab8 	bl	800443c <memset>
 8006ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed8:	3468      	adds	r4, #104	; 0x68
 8006eda:	e7d9      	b.n	8006e90 <__sfp+0x1c>
 8006edc:	2104      	movs	r1, #4
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f7ff ff62 	bl	8006da8 <__sfmoreglue>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	6030      	str	r0, [r6, #0]
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1d5      	bne.n	8006e98 <__sfp+0x24>
 8006eec:	f7ff ff78 	bl	8006de0 <__sfp_lock_release>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	e7ee      	b.n	8006ed4 <__sfp+0x60>
 8006ef6:	bf00      	nop
 8006ef8:	0800724c 	.word	0x0800724c
 8006efc:	ffff0001 	.word	0xffff0001

08006f00 <_fwalk_reent>:
 8006f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f04:	4606      	mov	r6, r0
 8006f06:	4688      	mov	r8, r1
 8006f08:	2700      	movs	r7, #0
 8006f0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f12:	f1b9 0901 	subs.w	r9, r9, #1
 8006f16:	d505      	bpl.n	8006f24 <_fwalk_reent+0x24>
 8006f18:	6824      	ldr	r4, [r4, #0]
 8006f1a:	2c00      	cmp	r4, #0
 8006f1c:	d1f7      	bne.n	8006f0e <_fwalk_reent+0xe>
 8006f1e:	4638      	mov	r0, r7
 8006f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f24:	89ab      	ldrh	r3, [r5, #12]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d907      	bls.n	8006f3a <_fwalk_reent+0x3a>
 8006f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	d003      	beq.n	8006f3a <_fwalk_reent+0x3a>
 8006f32:	4629      	mov	r1, r5
 8006f34:	4630      	mov	r0, r6
 8006f36:	47c0      	blx	r8
 8006f38:	4307      	orrs	r7, r0
 8006f3a:	3568      	adds	r5, #104	; 0x68
 8006f3c:	e7e9      	b.n	8006f12 <_fwalk_reent+0x12>

08006f3e <__retarget_lock_init_recursive>:
 8006f3e:	4770      	bx	lr

08006f40 <__retarget_lock_acquire_recursive>:
 8006f40:	4770      	bx	lr

08006f42 <__retarget_lock_release_recursive>:
 8006f42:	4770      	bx	lr

08006f44 <__swhatbuf_r>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	460e      	mov	r6, r1
 8006f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	461d      	mov	r5, r3
 8006f52:	b096      	sub	sp, #88	; 0x58
 8006f54:	da08      	bge.n	8006f68 <__swhatbuf_r+0x24>
 8006f56:	2200      	movs	r2, #0
 8006f58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	061a      	lsls	r2, r3, #24
 8006f60:	d410      	bmi.n	8006f84 <__swhatbuf_r+0x40>
 8006f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f66:	e00e      	b.n	8006f86 <__swhatbuf_r+0x42>
 8006f68:	466a      	mov	r2, sp
 8006f6a:	f000 f903 	bl	8007174 <_fstat_r>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	dbf1      	blt.n	8006f56 <__swhatbuf_r+0x12>
 8006f72:	9a01      	ldr	r2, [sp, #4]
 8006f74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f7c:	425a      	negs	r2, r3
 8006f7e:	415a      	adcs	r2, r3
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	e7ee      	b.n	8006f62 <__swhatbuf_r+0x1e>
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	2000      	movs	r0, #0
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	b016      	add	sp, #88	; 0x58
 8006f8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f90 <__smakebuf_r>:
 8006f90:	898b      	ldrh	r3, [r1, #12]
 8006f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f94:	079d      	lsls	r5, r3, #30
 8006f96:	4606      	mov	r6, r0
 8006f98:	460c      	mov	r4, r1
 8006f9a:	d507      	bpl.n	8006fac <__smakebuf_r+0x1c>
 8006f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	6163      	str	r3, [r4, #20]
 8006fa8:	b002      	add	sp, #8
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	466a      	mov	r2, sp
 8006fae:	ab01      	add	r3, sp, #4
 8006fb0:	f7ff ffc8 	bl	8006f44 <__swhatbuf_r>
 8006fb4:	9900      	ldr	r1, [sp, #0]
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7ff f969 	bl	8006290 <_malloc_r>
 8006fbe:	b948      	cbnz	r0, 8006fd4 <__smakebuf_r+0x44>
 8006fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc4:	059a      	lsls	r2, r3, #22
 8006fc6:	d4ef      	bmi.n	8006fa8 <__smakebuf_r+0x18>
 8006fc8:	f023 0303 	bic.w	r3, r3, #3
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	e7e3      	b.n	8006f9c <__smakebuf_r+0xc>
 8006fd4:	4b0d      	ldr	r3, [pc, #52]	; (800700c <__smakebuf_r+0x7c>)
 8006fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	6020      	str	r0, [r4, #0]
 8006fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	9b00      	ldr	r3, [sp, #0]
 8006fe4:	6120      	str	r0, [r4, #16]
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	9b01      	ldr	r3, [sp, #4]
 8006fea:	b15b      	cbz	r3, 8007004 <__smakebuf_r+0x74>
 8006fec:	4630      	mov	r0, r6
 8006fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff2:	f000 f8d1 	bl	8007198 <_isatty_r>
 8006ff6:	b128      	cbz	r0, 8007004 <__smakebuf_r+0x74>
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	89a0      	ldrh	r0, [r4, #12]
 8007006:	4305      	orrs	r5, r0
 8007008:	81a5      	strh	r5, [r4, #12]
 800700a:	e7cd      	b.n	8006fa8 <__smakebuf_r+0x18>
 800700c:	08006d9d 	.word	0x08006d9d

08007010 <_malloc_usable_size_r>:
 8007010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007014:	1f18      	subs	r0, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfbc      	itt	lt
 800701a:	580b      	ldrlt	r3, [r1, r0]
 800701c:	18c0      	addlt	r0, r0, r3
 800701e:	4770      	bx	lr

08007020 <_raise_r>:
 8007020:	291f      	cmp	r1, #31
 8007022:	b538      	push	{r3, r4, r5, lr}
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	d904      	bls.n	8007034 <_raise_r+0x14>
 800702a:	2316      	movs	r3, #22
 800702c:	6003      	str	r3, [r0, #0]
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007036:	b112      	cbz	r2, 800703e <_raise_r+0x1e>
 8007038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800703c:	b94b      	cbnz	r3, 8007052 <_raise_r+0x32>
 800703e:	4620      	mov	r0, r4
 8007040:	f000 f830 	bl	80070a4 <_getpid_r>
 8007044:	462a      	mov	r2, r5
 8007046:	4601      	mov	r1, r0
 8007048:	4620      	mov	r0, r4
 800704a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800704e:	f000 b817 	b.w	8007080 <_kill_r>
 8007052:	2b01      	cmp	r3, #1
 8007054:	d00a      	beq.n	800706c <_raise_r+0x4c>
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	d103      	bne.n	8007062 <_raise_r+0x42>
 800705a:	2316      	movs	r3, #22
 800705c:	6003      	str	r3, [r0, #0]
 800705e:	2001      	movs	r0, #1
 8007060:	e7e7      	b.n	8007032 <_raise_r+0x12>
 8007062:	2400      	movs	r4, #0
 8007064:	4628      	mov	r0, r5
 8007066:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800706a:	4798      	blx	r3
 800706c:	2000      	movs	r0, #0
 800706e:	e7e0      	b.n	8007032 <_raise_r+0x12>

08007070 <raise>:
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <raise+0xc>)
 8007072:	4601      	mov	r1, r0
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	f7ff bfd3 	b.w	8007020 <_raise_r>
 800707a:	bf00      	nop
 800707c:	20000020 	.word	0x20000020

08007080 <_kill_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	2300      	movs	r3, #0
 8007084:	4d06      	ldr	r5, [pc, #24]	; (80070a0 <_kill_r+0x20>)
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	f7fa f8d8 	bl	8001242 <_kill>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d102      	bne.n	800709c <_kill_r+0x1c>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	b103      	cbz	r3, 800709c <_kill_r+0x1c>
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	20000310 	.word	0x20000310

080070a4 <_getpid_r>:
 80070a4:	f7fa b8c6 	b.w	8001234 <_getpid>

080070a8 <__sread>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	460c      	mov	r4, r1
 80070ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b0:	f000 f894 	bl	80071dc <_read_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	bfab      	itete	ge
 80070b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070ba:	89a3      	ldrhlt	r3, [r4, #12]
 80070bc:	181b      	addge	r3, r3, r0
 80070be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070c2:	bfac      	ite	ge
 80070c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070c6:	81a3      	strhlt	r3, [r4, #12]
 80070c8:	bd10      	pop	{r4, pc}

080070ca <__swrite>:
 80070ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	461f      	mov	r7, r3
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	4605      	mov	r5, r0
 80070d4:	05db      	lsls	r3, r3, #23
 80070d6:	460c      	mov	r4, r1
 80070d8:	4616      	mov	r6, r2
 80070da:	d505      	bpl.n	80070e8 <__swrite+0x1e>
 80070dc:	2302      	movs	r3, #2
 80070de:	2200      	movs	r2, #0
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	f000 f868 	bl	80071b8 <_lseek_r>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	4632      	mov	r2, r6
 80070ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f0:	81a3      	strh	r3, [r4, #12]
 80070f2:	4628      	mov	r0, r5
 80070f4:	463b      	mov	r3, r7
 80070f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070fe:	f000 b817 	b.w	8007130 <_write_r>

08007102 <__sseek>:
 8007102:	b510      	push	{r4, lr}
 8007104:	460c      	mov	r4, r1
 8007106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710a:	f000 f855 	bl	80071b8 <_lseek_r>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	bf15      	itete	ne
 8007114:	6560      	strne	r0, [r4, #84]	; 0x54
 8007116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800711a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800711e:	81a3      	strheq	r3, [r4, #12]
 8007120:	bf18      	it	ne
 8007122:	81a3      	strhne	r3, [r4, #12]
 8007124:	bd10      	pop	{r4, pc}

08007126 <__sclose>:
 8007126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712a:	f000 b813 	b.w	8007154 <_close_r>
	...

08007130 <_write_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	4611      	mov	r1, r2
 8007138:	2200      	movs	r2, #0
 800713a:	4d05      	ldr	r5, [pc, #20]	; (8007150 <_write_r+0x20>)
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fa f8b6 	bl	80012b0 <_write>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_write_r+0x1e>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_write_r+0x1e>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	20000310 	.word	0x20000310

08007154 <_close_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	2300      	movs	r3, #0
 8007158:	4d05      	ldr	r5, [pc, #20]	; (8007170 <_close_r+0x1c>)
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7fa f8c2 	bl	80012e8 <_close>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_close_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_close_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000310 	.word	0x20000310

08007174 <_fstat_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	2300      	movs	r3, #0
 8007178:	4d06      	ldr	r5, [pc, #24]	; (8007194 <_fstat_r+0x20>)
 800717a:	4604      	mov	r4, r0
 800717c:	4608      	mov	r0, r1
 800717e:	4611      	mov	r1, r2
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	f7fa f8bc 	bl	80012fe <_fstat>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d102      	bne.n	8007190 <_fstat_r+0x1c>
 800718a:	682b      	ldr	r3, [r5, #0]
 800718c:	b103      	cbz	r3, 8007190 <_fstat_r+0x1c>
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	20000310 	.word	0x20000310

08007198 <_isatty_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	2300      	movs	r3, #0
 800719c:	4d05      	ldr	r5, [pc, #20]	; (80071b4 <_isatty_r+0x1c>)
 800719e:	4604      	mov	r4, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	f7fa f8ba 	bl	800131c <_isatty>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_isatty_r+0x1a>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_isatty_r+0x1a>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	20000310 	.word	0x20000310

080071b8 <_lseek_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	2200      	movs	r2, #0
 80071c2:	4d05      	ldr	r5, [pc, #20]	; (80071d8 <_lseek_r+0x20>)
 80071c4:	602a      	str	r2, [r5, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f7fa f8b2 	bl	8001330 <_lseek>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_lseek_r+0x1e>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_lseek_r+0x1e>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	20000310 	.word	0x20000310

080071dc <_read_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4604      	mov	r4, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	2200      	movs	r2, #0
 80071e6:	4d05      	ldr	r5, [pc, #20]	; (80071fc <_read_r+0x20>)
 80071e8:	602a      	str	r2, [r5, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f7fa f843 	bl	8001276 <_read>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_read_r+0x1e>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_read_r+0x1e>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	20000310 	.word	0x20000310

08007200 <_init>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr

0800720c <_fini>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr
